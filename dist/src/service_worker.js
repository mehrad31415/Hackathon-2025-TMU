(()=>{function e(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function n(e,t,n,s){Object.defineProperty(e,t,{get:n,set:s,enumerable:!0,configurable:!0})}var s={},r={},a=t.parcelRequired024;null==a&&((a=function(e){if(e in s)return s[e].exports;if(e in r){var t=r[e];delete r[e];var n={id:e,exports:{}};return s[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){r[e]=t},t.parcelRequired024=a),a.register("foUwZ",(function(e,t){})),a.register("gj6Et",(function(e,t){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("4gDjz",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("HLBv4",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("ktaoY",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("gBs5C",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("ktLSh",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));var i={};class o{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class l{refCount(e){return u("refCount")}incRef(e){return u("incRef")}timerAvailable(){return!0}time(e){return u("time")}read(e){return u("read")}readSync(e){return u("readSync")}readToGPU(e,t){return u("readToGPU")}numDataIds(){return u("numDataIds")}disposeData(e,t){return u("disposeData")}write(e,t,n){return u("write")}move(e,t,n,s,r){return u("move")}memory(){return u("memory")}floatPrecision(){return u("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return u("dispose")}}function u(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var c={};function h(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,m(e,t,n)}function p(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,m(e,n,s),m(t,n,s)}function d(e,t,n){return Math.max(e,Math.min(t,n))}function f(e){return e%2==0?e:e+1}function m(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function g(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function y(e,t){const n=Math.random();return t*n+(1-n)*e}function b(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function x(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function w(e,t,n=""){x(N(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function k(e){x(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function v(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||P(e)&&!n)for(let s=0;s<e.length;++s)v(e[s],t,n);else t.push(e);return t}function I(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function S(e){return 0===e.length}function N(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function T(e){return e%1==0}function C(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function $(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function E(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return h(t),t}function A(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function R(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function F(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function D(e,t){const n=t.length;return x((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),x(e.every((e=>T(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function _(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:D(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function M(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function L(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function z(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function B(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function P(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function W(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function U(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function V(e){return"string"==typeof e||e instanceof String}function G(e){return"boolean"==typeof e}function H(e){return"number"==typeof e}function j(e){return Array.isArray(e)?j(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":H(e)?"float32":V(e)?"string":G(e)?"bool":"float32"}function q(e){return!!(e&&e.constructor&&e.call&&e.apply)}function K(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function X(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Y(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=Y(e+t*o,i,n,s)}return r}function Z(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Y(0,e,t,n)}function J(e,t){const n=Q(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Q(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Z(e,new Float32Array(n));if("int32"===t)return Z(e,new Int32Array(n));if("bool"===t)return Z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{x(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function se(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function re(e){return e&&e.then&&"function"==typeof e.then}n(c,"shuffle",(()=>h)),n(c,"swap",(()=>m)),n(c,"shuffleCombo",(()=>p)),n(c,"clamp",(()=>d)),n(c,"nearestLargerEven",(()=>f)),n(c,"sum",(()=>g)),n(c,"randUniform",(()=>y)),n(c,"distSquared",(()=>b)),n(c,"assert",(()=>x)),n(c,"assertShapesMatch",(()=>w)),n(c,"arraysEqual",(()=>N)),n(c,"assertNonNull",(()=>k)),n(c,"flatten",(()=>v)),n(c,"isTypedArray",(()=>P)),n(c,"sizeFromShape",(()=>I)),n(c,"isScalarShape",(()=>S)),n(c,"isInt",(()=>T)),n(c,"tanh",(()=>C)),n(c,"sizeToSquarishShape",(()=>$)),n(c,"createShuffledIndices",(()=>E)),n(c,"rightPad",(()=>A)),n(c,"repeatedTry",(()=>R)),n(c,"inferFromImplicitShape",(()=>F)),n(c,"parseAxisParam",(()=>D)),n(c,"squeezeShape",(()=>_)),n(c,"getTypedArrayFromDType",(()=>O)),n(c,"getArrayFromDType",(()=>M)),n(c,"checkConversionForErrors",(()=>L)),n(c,"isValidDtype",(()=>z)),n(c,"hasEncodingLoss",(()=>B)),n(c,"bytesPerElement",(()=>W)),n(c,"bytesFromStringArray",(()=>U)),n(c,"isString",(()=>V)),n(c,"isBoolean",(()=>G)),n(c,"isNumber",(()=>H)),n(c,"inferDtype",(()=>j)),n(c,"isFunction",(()=>q)),n(c,"nearestDivisor",(()=>K)),n(c,"computeStrides",(()=>X)),n(c,"toNestedArray",(()=>Z)),n(c,"makeOnesTypedArray",(()=>J)),n(c,"makeZerosTypedArray",(()=>Q)),n(c,"makeZerosNestedTypedArray",(()=>ee)),n(c,"assertNonNegativeIntegerDimensions",(()=>te)),n(c,"locToIndex",(()=>ne)),n(c,"indexToLoc",(()=>se)),n(c,"isPromise",(()=>re));const ae="tfjsflags";class ie{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=oe,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(re(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(ae in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function oe(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function le(){return ue}let ue=null;var ce,he,pe={},de=pe={};function fe(){throw new Error("setTimeout has not been defined")}function me(){throw new Error("clearTimeout has not been defined")}function ge(e){if(ce===setTimeout)return setTimeout(e,0);if((ce===fe||!ce)&&setTimeout)return ce=setTimeout,setTimeout(e,0);try{return ce(e,0)}catch(t){try{return ce.call(null,e,0)}catch(t){return ce.call(this,e,0)}}}!function(){try{ce="function"==typeof setTimeout?setTimeout:fe}catch(e){ce=fe}try{he="function"==typeof clearTimeout?clearTimeout:me}catch(e){he=me}}();var ye,be=[],xe=!1,we=-1;function ke(){xe&&ye&&(xe=!1,ye.length?be=ye.concat(be):we=-1,be.length&&ve())}function ve(){if(!xe){var e=ge(ke);xe=!0;for(var t=be.length;t;){for(ye=be,be=[];++we<t;)ye&&ye[we].run();we=-1,t=be.length}ye=null,xe=!1,function(e){if(he===clearTimeout)return clearTimeout(e);if((he===me||!he)&&clearTimeout)return he=clearTimeout,clearTimeout(e);try{he(e)}catch(t){try{return he.call(null,e)}catch(t){return he.call(this,e)}}}(e)}}function Ie(e,t){this.fun=e,this.array=t}function Se(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Ne;function Te(){if(null==Ne){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==pe)e=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Ne=e}return Ne}function Ce(e,t){const n=function(){const e=Te();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}de.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];be.push(new Ie(e,t)),1!==be.length||xe||ge(ve)},Ie.prototype.run=function(){this.fun.apply(null,this.array)},de.title="browser",de.browser=!0,de.env={},de.argv=[],de.version="",de.versions={},de.on=Se,de.addListener=Se,de.once=Se,de.off=Se,de.removeListener=Se,de.removeAllListeners=Se,de.emit=Se,de.prependListener=Se,de.prependOnceListener=Se,de.listeners=function(e){return[]},de.binding=function(e){throw new Error("process.binding is not supported")},de.cwd=function(){return"/"},de.chdir=function(e){throw new Error("process.chdir is not supported")},de.umask=function(){return 0};var $e={};n($e,"Abs",(()=>Ee)),n($e,"Acos",(()=>Ae)),n($e,"Acosh",(()=>Re)),n($e,"Add",(()=>Fe)),n($e,"AddN",(()=>De)),n($e,"All",(()=>_e)),n($e,"Any",(()=>Oe)),n($e,"ArgMax",(()=>Me)),n($e,"ArgMin",(()=>Le)),n($e,"Asin",(()=>ze)),n($e,"Asinh",(()=>Be)),n($e,"Atan",(()=>Pe)),n($e,"Atanh",(()=>We)),n($e,"Atan2",(()=>Ue)),n($e,"AvgPool",(()=>Ve)),n($e,"AvgPoolGrad",(()=>Ge)),n($e,"AvgPool3D",(()=>He)),n($e,"AvgPool3DGrad",(()=>je)),n($e,"BatchMatMul",(()=>qe)),n($e,"BatchToSpaceND",(()=>Ke)),n($e,"Bincount",(()=>Xe)),n($e,"BroadcastTo",(()=>Ye)),n($e,"BroadcastArgs",(()=>Ze)),n($e,"Cast",(()=>Je)),n($e,"Ceil",(()=>Qe)),n($e,"ClipByValue",(()=>et)),n($e,"Complex",(()=>tt)),n($e,"ComplexAbs",(()=>nt)),n($e,"Concat",(()=>st)),n($e,"Conv2D",(()=>rt)),n($e,"Conv2DBackpropFilter",(()=>at)),n($e,"Conv2DBackpropInput",(()=>it)),n($e,"Conv3D",(()=>ot)),n($e,"Conv3DBackpropFilterV2",(()=>lt)),n($e,"Conv3DBackpropInputV2",(()=>ut)),n($e,"Cos",(()=>ct)),n($e,"Cosh",(()=>ht)),n($e,"Cumsum",(()=>pt)),n($e,"CropAndResize",(()=>dt)),n($e,"DenseBincount",(()=>ft)),n($e,"DepthToSpace",(()=>mt)),n($e,"DepthwiseConv2dNative",(()=>gt)),n($e,"DepthwiseConv2dNativeBackpropFilter",(()=>yt)),n($e,"DepthwiseConv2dNativeBackpropInput",(()=>bt)),n($e,"Diag",(()=>xt)),n($e,"Dilation2D",(()=>wt)),n($e,"Dilation2DBackpropInput",(()=>kt)),n($e,"Dilation2DBackpropFilter",(()=>vt)),n($e,"RealDiv",(()=>It)),n($e,"Einsum",(()=>St)),n($e,"Elu",(()=>Nt)),n($e,"EluGrad",(()=>Tt)),n($e,"Erf",(()=>Ct)),n($e,"Equal",(()=>$t)),n($e,"Exp",(()=>Et)),n($e,"ExpandDims",(()=>At)),n($e,"Expm1",(()=>Rt)),n($e,"FFT",(()=>Ft)),n($e,"Fill",(()=>Dt)),n($e,"FlipLeftRight",(()=>_t)),n($e,"Floor",(()=>Ot)),n($e,"FloorDiv",(()=>Mt)),n($e,"FusedBatchNorm",(()=>Lt)),n($e,"GatherV2",(()=>zt)),n($e,"GatherNd",(()=>Bt)),n($e,"Greater",(()=>Pt)),n($e,"GreaterEqual",(()=>Wt)),n($e,"Identity",(()=>Ut)),n($e,"IFFT",(()=>Vt)),n($e,"Imag",(()=>Gt)),n($e,"IsFinite",(()=>Ht)),n($e,"IsInf",(()=>jt)),n($e,"IsNan",(()=>qt)),n($e,"LeakyRelu",(()=>Kt)),n($e,"Less",(()=>Xt)),n($e,"LessEqual",(()=>Yt)),n($e,"LinSpace",(()=>Zt)),n($e,"Log",(()=>Jt)),n($e,"Log1p",(()=>Qt)),n($e,"LogicalAnd",(()=>en)),n($e,"LogicalNot",(()=>tn)),n($e,"LogicalOr",(()=>nn)),n($e,"LogSoftmax",(()=>sn)),n($e,"LRN",(()=>rn)),n($e,"LRNGrad",(()=>an)),n($e,"Max",(()=>on)),n($e,"Maximum",(()=>ln)),n($e,"MaxPool",(()=>un)),n($e,"MaxPoolGrad",(()=>cn)),n($e,"MaxPool3D",(()=>hn)),n($e,"MaxPool3DGrad",(()=>pn)),n($e,"MaxPoolWithArgmax",(()=>dn)),n($e,"Mean",(()=>fn)),n($e,"Min",(()=>mn)),n($e,"Minimum",(()=>gn)),n($e,"MirrorPad",(()=>yn)),n($e,"Mod",(()=>bn)),n($e,"Multinomial",(()=>xn)),n($e,"Multiply",(()=>wn)),n($e,"Neg",(()=>kn)),n($e,"NotEqual",(()=>vn)),n($e,"NonMaxSuppressionV3",(()=>In)),n($e,"NonMaxSuppressionV4",(()=>Sn)),n($e,"NonMaxSuppressionV5",(()=>Nn)),n($e,"OnesLike",(()=>Tn)),n($e,"OneHot",(()=>Cn)),n($e,"Pack",(()=>$n)),n($e,"PadV2",(()=>En)),n($e,"Pool",(()=>An)),n($e,"Pow",(()=>Rn)),n($e,"Prelu",(()=>Fn)),n($e,"Prod",(()=>Dn)),n($e,"Range",(()=>_n)),n($e,"Real",(()=>On)),n($e,"Reciprocal",(()=>Mn)),n($e,"Relu",(()=>Ln)),n($e,"Reshape",(()=>zn)),n($e,"ResizeNearestNeighbor",(()=>Bn)),n($e,"ResizeNearestNeighborGrad",(()=>Pn)),n($e,"ResizeBilinear",(()=>Wn)),n($e,"ResizeBilinearGrad",(()=>Un)),n($e,"Relu6",(()=>Vn)),n($e,"Reverse",(()=>Gn)),n($e,"Round",(()=>Hn)),n($e,"Rsqrt",(()=>jn)),n($e,"ScatterNd",(()=>qn)),n($e,"Select",(()=>Kn)),n($e,"Selu",(()=>Xn)),n($e,"Slice",(()=>Yn)),n($e,"Sin",(()=>Zn)),n($e,"Sinh",(()=>Jn)),n($e,"Sign",(()=>Qn)),n($e,"Sigmoid",(()=>es)),n($e,"Softplus",(()=>ts)),n($e,"Sqrt",(()=>ns)),n($e,"Sum",(()=>ss)),n($e,"SpaceToBatchND",(()=>rs)),n($e,"SplitV",(()=>as)),n($e,"Softmax",(()=>is)),n($e,"SparseFillEmptyRows",(()=>os)),n($e,"SparseReshape",(()=>ls)),n($e,"SparseSegmentMean",(()=>us)),n($e,"SparseSegmentSum",(()=>cs)),n($e,"SparseToDense",(()=>hs)),n($e,"SquaredDifference",(()=>ps)),n($e,"Square",(()=>ds)),n($e,"StridedSlice",(()=>fs)),n($e,"StringNGrams",(()=>ms)),n($e,"StringSplit",(()=>gs)),n($e,"StringToHashBucketFast",(()=>ys)),n($e,"Sub",(()=>bs)),n($e,"Tan",(()=>xs)),n($e,"Tanh",(()=>ws)),n($e,"Tile",(()=>ks)),n($e,"TopK",(()=>vs)),n($e,"Transform",(()=>Is)),n($e,"Transpose",(()=>Ss)),n($e,"Unique",(()=>Ns)),n($e,"Unpack",(()=>Ts)),n($e,"UnsortedSegmentSum",(()=>Cs)),n($e,"ZerosLike",(()=>$s)),n($e,"Step",(()=>Es)),n($e,"FromPixels",(()=>As)),n($e,"RotateWithOffset",(()=>Rs)),n($e,"_FusedMatMul",(()=>Fs)),n($e,"FusedConv2D",(()=>Ds)),n($e,"FusedDepthwiseConv2D",(()=>_s));const Ee="Abs",Ae="Acos",Re="Acosh",Fe="Add",De="AddN",_e="All",Oe="Any",Me="ArgMax",Le="ArgMin",ze="Asin",Be="Asinh",Pe="Atan",We="Atanh",Ue="Atan2",Ve="AvgPool",Ge="AvgPoolGrad",He="AvgPool3D",je="AvgPool3DGrad",qe="BatchMatMul",Ke="BatchToSpaceND",Xe="Bincount",Ye="BroadcastTo",Ze="BroadcastArgs",Je="Cast",Qe="Ceil",et="ClipByValue",tt="Complex",nt="ComplexAbs",st="Concat",rt="Conv2D",at="Conv2DBackpropFilter",it="Conv2DBackpropInput",ot="Conv3D",lt="Conv3DBackpropFilterV2",ut="Conv3DBackpropInputV2",ct="Cos",ht="Cosh",pt="Cumsum",dt="CropAndResize",ft="DenseBincount",mt="DepthToSpace",gt="DepthwiseConv2dNative",yt="DepthwiseConv2dNativeBackpropFilter",bt="DepthwiseConv2dNativeBackpropInput",xt="Diag",wt="Dilation2D",kt="Dilation2DBackpropInput",vt="Dilation2DBackpropFilter",It="RealDiv",St="Einsum",Nt="Elu",Tt="EluGrad",Ct="Erf",$t="Equal",Et="Exp",At="ExpandDims",Rt="Expm1",Ft="FFT",Dt="Fill",_t="FlipLeftRight",Ot="Floor",Mt="FloorDiv",Lt="FusedBatchNorm",zt="GatherV2",Bt="GatherNd",Pt="Greater",Wt="GreaterEqual",Ut="Identity",Vt="IFFT",Gt="Imag",Ht="IsFinite",jt="IsInf",qt="IsNan",Kt="LeakyRelu",Xt="Less",Yt="LessEqual",Zt="LinSpace",Jt="Log",Qt="Log1p",en="LogicalAnd",tn="LogicalNot",nn="LogicalOr",sn="LogSoftmax",rn="LRN",an="LRNGrad",on="Max",ln="Maximum",un="MaxPool",cn="MaxPoolGrad",hn="MaxPool3D",pn="MaxPool3DGrad",dn="MaxPoolWithArgmax",fn="Mean",mn="Min",gn="Minimum",yn="MirrorPad",bn="Mod",xn="Multinomial",wn="Multiply",kn="Neg",vn="NotEqual",In="NonMaxSuppressionV3",Sn="NonMaxSuppressionV4",Nn="NonMaxSuppressionV5",Tn="OnesLike",Cn="OneHot",$n="Pack",En="PadV2",An="Pool",Rn="Pow",Fn="Prelu",Dn="Prod",_n="Range",On="Real",Mn="Reciprocal",Ln="Relu",zn="Reshape",Bn="ResizeNearestNeighbor",Pn="ResizeNearestNeighborGrad",Wn="ResizeBilinear",Un="ResizeBilinearGrad",Vn="Relu6",Gn="Reverse",Hn="Round",jn="Rsqrt",qn="ScatterNd",Kn="Select",Xn="Selu",Yn="Slice",Zn="Sin",Jn="Sinh",Qn="Sign",es="Sigmoid",ts="Softplus",ns="Sqrt",ss="Sum",rs="SpaceToBatchND",as="SplitV",is="Softmax",os="SparseFillEmptyRows",ls="SparseReshape",us="SparseSegmentMean",cs="SparseSegmentSum",hs="SparseToDense",ps="SquaredDifference",ds="Square",fs="StridedSlice",ms="StringNGrams",gs="StringSplit",ys="StringToHashBucketFast",bs="Sub",xs="Tan",ws="Tanh",ks="Tile",vs="TopK",Is="Transform",Ss="Transpose",Ns="Unique",Ts="Unpack",Cs="UnsortedSegmentSum",$s="ZerosLike",Es="Step",As="FromPixels",Rs="RotateWithOffset",Fs="_FusedMatMul",Ds="FusedConv2D",_s="FusedDepthwiseConv2D";var Os={};n(Os,"getKernel",(()=>Ws)),n(Os,"getGradient",(()=>Us)),n(Os,"getKernelsForBackend",(()=>Vs)),n(Os,"registerKernel",(()=>Gs)),n(Os,"registerGradient",(()=>Hs)),n(Os,"unregisterKernel",(()=>js)),n(Os,"unregisterGradient",(()=>qs)),n(Os,"copyRegisteredKernels",(()=>Ks));var Ms={};function Ls(...e){le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(...e)}function zs(...e){le().getBool("IS_TEST")||le().getBool("PROD")||console.log(...e)}n(Ms,"warn",(()=>Ls)),n(Ms,"log",(()=>zs));const Bs=Ce("kernelRegistry",(()=>new Map)),Ps=Ce("gradRegistry",(()=>new Map));function Ws(e,t){const n=Xs(e,t);return Bs.get(n)}function Us(e){return Ps.get(e)}function Vs(e){const t=Bs.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function Gs(e){const{kernelName:t,backendName:n}=e,s=Xs(t,n);Bs.has(s)&&Ls(`The kernel '${t}' for backend '${n}' is already registered`),Bs.set(s,e)}function Hs(e){const{kernelName:t}=e;Ps.has(t)&&le().getBool("DEBUG")&&Ls(`Overriding the gradient for '${t}'`),Ps.set(t,e)}function js(e,t){const n=Xs(e,t);if(!Bs.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Bs.delete(n)}function qs(e){if(!Ps.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Ps.delete(e)}function Ks(e,t){Vs(e).forEach((e=>{Gs(Object.assign({},e,{backendName:t}))}))}function Xs(e,t){return`${t}_${e}`}var Ys={};n(Ys,"createScalarValue",(()=>Mr)),n(Ys,"encodeString",(()=>Pr)),n(Ys,"toTypedArray",(()=>Lr)),n(Ys,"now",(()=>zr)),n(Ys,"fetch",(()=>Br)),n(Ys,"decodeString",(()=>Wr));var Zs={};n(Zs,"hexToLong",(()=>Sr)),n(Zs,"fingerPrint64",(()=>Or));var Js;Js=er;var Qs=null;try{Qs=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function er(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function tr(e){return!0===(e&&e.__isLong__)}er.prototype.__isLong__,Object.defineProperty(er.prototype,"__isLong__",{value:!0}),er.isLong=tr;var nr={},sr={};function rr(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=sr[e])?s:(n=ir(e,(0|e)<0?-1:0,!0),r&&(sr[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=nr[e])?s:(n=ir(e,e<0?-1:0,!1),r&&(nr[e]=n),n)}function ar(e,t){if(isNaN(e))return t?mr:fr;if(t){if(e<0)return mr;if(e>=hr)return wr}else{if(e<=-pr)return kr;if(e+1>=pr)return xr}return e<0?ar(-e,t).neg():ir(e%cr|0,e/cr|0,t)}function ir(e,t,n){return new er(e,t,n)}er.fromInt=rr,er.fromNumber=ar,er.fromBits=ir;var or=Math.pow;function lr(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return fr;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return lr(e.substring(1),t,n).neg();for(var r=ar(or(n,8)),a=fr,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=ar(or(n,o));a=a.mul(u).add(ar(l))}else a=(a=a.mul(r)).add(ar(l))}return a.unsigned=t,a}function ur(e,t){return"number"==typeof e?ar(e,t):"string"==typeof e?lr(e,t):ir(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}er.fromString=lr,er.fromValue=ur;var cr=4294967296,hr=cr*cr,pr=hr/2,dr=rr(16777216),fr=rr(0);er.ZERO=fr;var mr=rr(0,!0);er.UZERO=mr;var gr=rr(1);er.ONE=gr;var yr=rr(1,!0);er.UONE=yr;var br=rr(-1);er.NEG_ONE=br;var xr=ir(-1,2147483647,!1);er.MAX_VALUE=xr;var wr=ir(-1,-1,!0);er.MAX_UNSIGNED_VALUE=wr;var kr=ir(0,-2147483648,!1);er.MIN_VALUE=kr;var vr=er.prototype;vr.toInt=function(){return this.unsigned?this.low>>>0:this.low},vr.toNumber=function(){return this.unsigned?(this.high>>>0)*cr+(this.low>>>0):this.high*cr+(this.low>>>0)},vr.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(kr)){var t=ar(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=ar(or(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},vr.getHighBits=function(){return this.high},vr.getHighBitsUnsigned=function(){return this.high>>>0},vr.getLowBits=function(){return this.low},vr.getLowBitsUnsigned=function(){return this.low>>>0},vr.getNumBitsAbs=function(){if(this.isNegative())return this.eq(kr)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},vr.isZero=function(){return 0===this.high&&0===this.low},vr.eqz=vr.isZero,vr.isNegative=function(){return!this.unsigned&&this.high<0},vr.isPositive=function(){return this.unsigned||this.high>=0},vr.isOdd=function(){return 1==(1&this.low)},vr.isEven=function(){return 0==(1&this.low)},vr.equals=function(e){return tr(e)||(e=ur(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},vr.eq=vr.equals,vr.notEquals=function(e){return!this.eq(e)},vr.neq=vr.notEquals,vr.ne=vr.notEquals,vr.lessThan=function(e){return this.comp(e)<0},vr.lt=vr.lessThan,vr.lessThanOrEqual=function(e){return this.comp(e)<=0},vr.lte=vr.lessThanOrEqual,vr.le=vr.lessThanOrEqual,vr.greaterThan=function(e){return this.comp(e)>0},vr.gt=vr.greaterThan,vr.greaterThanOrEqual=function(e){return this.comp(e)>=0},vr.gte=vr.greaterThanOrEqual,vr.ge=vr.greaterThanOrEqual,vr.compare=function(e){if(tr(e)||(e=ur(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},vr.comp=vr.compare,vr.negate=function(){return!this.unsigned&&this.eq(kr)?kr:this.not().add(gr)},vr.neg=vr.negate,vr.add=function(e){tr(e)||(e=ur(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=r+(65535&e.low))>>>16,u+=(c+=s+o)>>>16,l+=(u+=n+i)>>>16,l+=t+a,ir((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},vr.subtract=function(e){return tr(e)||(e=ur(e)),this.add(e.neg())},vr.sub=vr.subtract,vr.multiply=function(e){if(this.isZero())return fr;if(tr(e)||(e=ur(e)),Qs)return ir(Qs.mul(this.low,this.high,e.low,e.high),Qs.get_high(),this.unsigned);if(e.isZero())return fr;if(this.eq(kr))return e.isOdd()?kr:fr;if(e.eq(kr))return this.isOdd()?kr:fr;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(dr)&&e.lt(dr))return ar(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,p=0;return h+=(p+=r*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=r*o)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*o)>>>16,c&=65535,u+=(c+=r*i)>>>16,u+=t*l+n*o+s*i+r*a,ir((h&=65535)<<16|(p&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},vr.mul=vr.multiply,vr.divide=function(e){if(tr(e)||(e=ur(e)),e.isZero())throw Error("division by zero");var t,n,s;if(Qs)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?ir((this.unsigned?Qs.div_u:Qs.div_s)(this.low,this.high,e.low,e.high),Qs.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?mr:fr;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return mr;if(e.gt(this.shru(1)))return yr;s=mr}else{if(this.eq(kr))return e.eq(gr)||e.eq(br)?kr:e.eq(kr)?gr:(t=this.shr(1).div(e).shl(1)).eq(fr)?e.isNegative()?gr:br:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(kr))return this.unsigned?mr:fr;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=fr}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:or(2,r-48),i=ar(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=ar(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=gr),s=s.add(i),n=n.sub(o)}return s},vr.div=vr.divide,vr.modulo=function(e){return tr(e)||(e=ur(e)),Qs?ir((this.unsigned?Qs.rem_u:Qs.rem_s)(this.low,this.high,e.low,e.high),Qs.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},vr.mod=vr.modulo,vr.rem=vr.modulo,vr.not=function(){return ir(~this.low,~this.high,this.unsigned)},vr.and=function(e){return tr(e)||(e=ur(e)),ir(this.low&e.low,this.high&e.high,this.unsigned)},vr.or=function(e){return tr(e)||(e=ur(e)),ir(this.low|e.low,this.high|e.high,this.unsigned)},vr.xor=function(e){return tr(e)||(e=ur(e)),ir(this.low^e.low,this.high^e.high,this.unsigned)},vr.shiftLeft=function(e){return tr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ir(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):ir(0,this.low<<e-32,this.unsigned)},vr.shl=vr.shiftLeft,vr.shiftRight=function(e){return tr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ir(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):ir(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},vr.shr=vr.shiftRight,vr.shiftRightUnsigned=function(e){if(tr(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?ir(this.low>>>e|t<<32-e,t>>>e,this.unsigned):ir(32===e?t:t>>>e-32,0,this.unsigned)},vr.shru=vr.shiftRightUnsigned,vr.shr_u=vr.shiftRightUnsigned,vr.toSigned=function(){return this.unsigned?ir(this.low,this.high,!1):this},vr.toUnsigned=function(){return this.unsigned?this:ir(this.low,this.high,!0)},vr.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},vr.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},vr.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},er.fromBytes=function(e,t,n){return n?er.fromBytesLE(e,t):er.fromBytesBE(e,t)},er.fromBytesLE=function(e,t){return new er(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},er.fromBytesBE=function(e,t){return new er(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const Ir=Js.default||Js;function Sr(e){return Ir.fromString(e,!0,16)}const Nr=Sr("c3a5c85c97cb3127"),Tr=Sr("b492b66fbe98f273"),Cr=Sr("9ae16a3b2f90404f");function $r(e){return e.xor(e.shru(47))}function Er(e,t,n){const s=e.slice(t,t+n);return Ir.fromBytes(Array.from(s),!0,!0)}function Ar(e,t){return Er(e,t,8)}function Rr(e,t){return Er(e,t,4)}function Fr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Dr(e,t,n=Sr("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function _r(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Fr(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Fr(r,44)),[r.add(s),a.add(i)]}(Ar(e,t),Ar(e,t+8),Ar(e,t+16),Ar(e,t+24),n,s)}function Or(e,t=e.length){const n=Ir.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Cr.add(2*t),s=Ar(e,0).add(Cr),r=Ar(e,t-8);return Dr(Fr(r,37).mul(n).add(s),Fr(s,25).add(r).mul(n),n)}if(t>=4){const n=Cr.add(2*t);return Dr(Rr(e,0).shl(3).add(t),Rr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return $r(Cr.mul(n).xor(Nr.mul(s))).mul(Cr)}return Cr}(e,t):function(e,t=e.length){const n=Cr.add(2*t),s=Ar(e,0).mul(Tr),r=Ar(e,8),a=Ar(e,t-8).mul(n),i=Ar(e,t-16).mul(Cr);return Dr(Fr(s.add(r),43).add(Fr(a,30)).add(i),s.add(Fr(r.add(Cr),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Cr.add(2*t),s=Ar(e,0).mul(Cr),r=Ar(e,8),a=Ar(e,t-8).mul(n),i=Ar(e,t-16).mul(Cr),o=Fr(s.add(r),43).add(Fr(a,30)).add(i),l=Dr(o,s.add(Fr(r.add(Cr),18)).add(a),n),u=Ar(e,16).mul(n),c=Ar(e,24),h=o.add(Ar(e,t-32)).mul(n),p=l.add(Ar(e,t-24)).mul(n);return Dr(Fr(u.add(c),43).add(Fr(h,30)).add(p),u.add(Fr(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Tr).add(113),a=$r(r.mul(Cr).add(113)).mul(Cr),i=[Ir.UZERO,Ir.UZERO],o=[Ir.UZERO,Ir.UZERO];s=s.mul(Cr).add(Ar(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Fr(s.add(r).add(i[0]).add(Ar(e,l+8)),37).mul(Tr),r=Fr(r.add(i[1]).add(Ar(e,l+48)),42).mul(Tr),s=s.xor(o[1]),r=r.add(i[0]).add(Ar(e,l+40)),a=Fr(a.add(o[0]),33).mul(Tr),i=_r(e,l,i[1].mul(Tr),s.add(o[0])),o=_r(e,l+32,a.add(o[1]),r.add(Ar(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Tr.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Fr(s.add(r).add(i[0]).add(Ar(e,l+8)),37).mul(h),r=Fr(r.add(i[1]).add(Ar(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(Ar(e,l+40))),a=Fr(a.add(o[0]),33).mul(h),i=_r(e,l,i[1].mul(h),s.add(o[0])),o=_r(e,l+32,a.add(o[1]),r.add(Ar(e,l+16))),[a,s]=[s,a],Dr(Dr(i[0],o[0],h).add($r(r).mul(Nr)).add(a),Dr(i[1],o[1],h).add(s),h)}function Mr(e,t){return"string"===t?Pr(e):Lr([e],t)}function Lr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=v(e)),le().getBool("DEBUG")&&L(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function zr(){return le().platform.now()}function Br(e,t){return le().platform.fetch(e,t)}function Pr(e,t="utf-8"){return t=t||"utf-8",le().platform.encode(e,t)}function Wr(e,t="utf-8"){return t=t||"utf-8",le().platform.decode(e,t)}e(Ys,c),e(Ys,Zs);class Ur{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Gr)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=zr();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:zr()-i})}if(le().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Vr(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Vr(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Gr{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?A(`${s}ms`,9):s.error,o=A(e,25),l=t.rank,u=t.size,c=A(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Hr(e,t,n,s){const r=X(t),a=function(e,t,n,s){const r=I(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?Xr(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],jr(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=Kr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function jr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:V(e)?`'${e}'`:"bool"===n?qr(e):parseFloat(e.toFixed(7)).toString(),A(s,t)}function qr(e){return 0===e?"false":"true"}function Kr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[jr(Xr(e)[0],0,n)]}return"bool"===n?[qr(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=Xr(s),a=Xr(a)),["["+s.map(((e,t)=>jr(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>jr(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Xr(e):Array.from(e)).map(((e,t)=>jr(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...Kr(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...Kr(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...Kr(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Xr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Yr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=I(e),null!=n){const e=n.length;x(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(t,this.size),this.strides=X(e)}set(e,...t){0===t.length&&(t=[0]),x(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Zr().makeTensor(this.values,this.shape,this.dtype)}}let Zr=null,Jr=null,Qr=null;class ea{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=I(e),this.strides=X(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Jr.buffer(this.shape,this.dtype,e)}bufferSync(){return Jr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Z(this.shape,e,"complex64"===this.dtype)}arraySync(){return Z(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Zr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Wr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Zr().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Zr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Wr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Zr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Zr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Jr.print(this,e)}clone(){return this.throwIfDisposed(),Jr.clone(this)}toString(e=!1){return Hr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Jr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Zr().makeVariable(this,e,t,n)}}function ta(){return Ce("Tensor",(()=>ea))}Object.defineProperty(ea,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ta();class na extends ea{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!N(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Zr().disposeTensor(this),this.dataId=e.dataId,Zr().incRef(this,null)}dispose(){Zr().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(na,Symbol.hasInstance,{value:e=>e instanceof ea&&null!=e.assign&&e.assign instanceof Function});var sa,ra,aa,ia,oa,la,ua,ca,ha,pa={};n(pa,"makeTypesMatch",(()=>ga)),n(pa,"assertTypesMatch",(()=>ya)),n(pa,"isTensorInList",(()=>ba)),n(pa,"getTensorsInContainer",(()=>xa)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(sa||(sa={})),(aa=ra||(ra={})).float32="float32",aa.int32="int32",aa.bool="int32",aa.complex64="complex64",(oa=ia||(ia={})).float32="float32",oa.int32="int32",oa.bool="bool",oa.complex64="complex64",(ua=la||(la={})).float32="float32",ua.int32="float32",ua.bool="float32",ua.complex64="complex64",(ha=ca||(ca={})).float32="complex64",ha.int32="complex64",ha.bool="complex64",ha.complex64="complex64";const da={float32:la,int32:ra,bool:ia,complex64:ca};function fa(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return da[e][t]}function ma(e){return fa(e,"int32")}function ga(e,t){if(e.dtype===t.dtype)return[e,t];const n=fa(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ya(e,t){x(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function ba(e,t){return t.some((t=>t.id===e.id))}function xa(e){const t=[];return wa(e,t,new Set),t}function wa(e,t,n){if(null==e)return;if(e instanceof ea)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),wa(s,t,n))}}function ka(e){return null!=e.kernelName}class va{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ia{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new va}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Ls(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ur(this.backendInstance),!0}setupRegisteredKernels(){Vs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Vs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof l||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Ls(`Initialization of backend ${e} failed`),Ls(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return Ls(`Initialization of backend ${e} failed`),Ls(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Ia.nextTensorId++}nextVariableId(){return Ia.nextVariableId++}clone(e){const t=Na.runKernel(Ut,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Na.runKernel(Je,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Ws(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=ka(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(ka(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Ws(t,this.backendName);x(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=ka(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Us(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(x(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&V(e[0])&&(r=e.map((e=>Pr(e))));const a=s.write(r,t,n),i=new ea(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=U(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new ea(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new na(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*W(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof na||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*W(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Us(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=Q(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=xa(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(x(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));x(r instanceof ea,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=J(I(e),"float32");return Na.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!N(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Ta);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return x(q(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;x(t.every((e=>e instanceof ea)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),x(n.value instanceof ea,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),x(q(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];x(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),x(a.every((e=>e instanceof ea)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=zr(),n=await this.backend.time(e);return n.wallMs=zr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new va;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Sa(){const e=Te();if(null==e._tfengine){const t=new ie(e);e._tfengine=new Ia(t)}var t;return t=e._tfengine.ENV,ue=t,Zr=()=>e._tfengine,e._tfengine}Ia.nextTensorId=0,Ia.nextVariableId=0;const Na=Sa();function Ta(e,t){const n={a:e,b:t};return Na.runKernel(Fe,n)}var Ca={};let $a;function Ea(e){$a=e}function Aa(e){if(void 0!==$a)return $a;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ra(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n(Ca,"mockIsMobile",(()=>Ea)),n(Ca,"isMobile",(()=>Aa)),n(Ca,"isBrowser",(()=>Ra));const Fa=le();function Da(e,t){let n=e;if(P(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||P(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&le().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&_a(e,s,[]),s}function _a(e,t,n){if(n=n||[],!Array.isArray(e)&&!P(e))return void x(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));x(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),x(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)_a(e[t],s,n.concat(t))}function Oa(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Ma(e,t,n,s="numeric"){if(e instanceof ea)return Oa(s,e.dtype,t,n),e;let r=j(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Oa(s,r,t,n),null==e||!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Da(e,r);P(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Lr(e,r):v(e,[],!0);return Na.makeTensor(i,a,r)}function La(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Ma(e,`${t}[${r}]`,n,s)))}Fa.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Fa.registerFlag("IS_BROWSER",(()=>Ra())),Fa.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),Fa.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Fa.registerFlag("PROD",(()=>!1)),Fa.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Fa.getBool("DEBUG"))),Fa.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Fa.registerFlag("IS_TEST",(()=>!1)),Fa.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Fa.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const za="__op";function Ba(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=za;const r=(...e)=>{Na.startScope(n);try{const t=s(...e);return re(t)&&console.error("Cannot return a Promise inside of tidy."),Na.endScope(t),t}catch(e){throw Na.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Pa=Ba({complex_:function(e,t){const n=Ma(e,"real","complex"),s=Ma(t,"imag","complex");w(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Na.runKernel(tt,r)}});function Wa(e,t,n,s){if(null==s&&(s=j(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){te(t);const e=I(t),s=I(n);x(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==I(t.slice(e));x(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return P(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Lr(e,s):v(e,[],!0),Na.makeTensor(e,t,s)}function Ua(e,t,n){return Wa(e,t,Da(e,n),n)}const Va={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Ga,Ha,ja;Ha=function(e){var t,n,s=ti(e),r=s[0],a=s[1],i=new Za(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),o=0,l=a>0?r-4:r;for(n=0;n<l;n+=4)t=Ya[e.charCodeAt(n)]<<18|Ya[e.charCodeAt(n+1)]<<12|Ya[e.charCodeAt(n+2)]<<6|Ya[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;2===a&&(t=Ya[e.charCodeAt(n)]<<2|Ya[e.charCodeAt(n+1)]>>4,i[o++]=255&t);1===a&&(t=Ya[e.charCodeAt(n)]<<10|Ya[e.charCodeAt(n+1)]<<4|Ya[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t);return i},ja=function(e){for(var t,n=e.length,s=n%3,r=[],a=16383,i=0,o=n-s;i<o;i+=a)r.push(ni(e,i,i+a>o?o:i+a));1===s?(t=e[n-1],r.push(Xa[t>>2]+Xa[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],r.push(Xa[t>>10]+Xa[t>>4&63]+Xa[t<<2&63]+"="));return r.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var qa,Ka,Xa=[],Ya=[],Za="undefined"!=typeof Uint8Array?Uint8Array:Array,Ja="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Qa=0,ei=Ja.length;Qa<ei;++Qa)Xa[Qa]=Ja[Qa],Ya[Ja.charCodeAt(Qa)]=Qa;function ti(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function ni(e,t,n){for(var s,r,a=[],i=t;i<n;i+=3)s=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(Xa[(r=s)>>18&63]+Xa[r>>12&63]+Xa[r>>6&63]+Xa[63&r]);return a.join("")}Ya["-".charCodeAt(0)]=62,Ya["_".charCodeAt(0)]=63,qa=function(e,t,n,s,r){var a,i,o=8*r-s-1,l=(1<<o)-1,u=l>>1,c=-7,h=n?r-1:0,p=n?-1:1,d=e[t+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+e[t+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=s;c>0;i=256*i+e[t+h],h+=p,c-=8);if(0===a)a=1-u;else{if(a===l)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,s),a-=u}return(d?-1:1)*i*Math.pow(2,a-s)},Ka=function(e,t,n,s,r,a){var i,o,l,u=8*a-r-1,c=(1<<u)-1,h=c>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=s?0:a-1,f=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),(t+=i+h>=1?p/l:p*Math.pow(2,1-h))*l>=2&&(i++,l/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(t*l-1)*Math.pow(2,r),i+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,r),i=0));r>=8;e[n+d]=255&o,d+=f,o/=256,r-=8);for(i=i<<r|o,u+=r;u>0;e[n+d]=255&i,d+=f,i/=256,u-=8);e[n+d-f]|=128*m};const si="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;Ga=ii;const ri=2147483647;function ai(e){if(e>ri)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,ii.prototype),t}function ii(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return ui(e)}return oi(e,t,n)}function oi(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!ii.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|di(e,t);let s=ai(n);const r=s.write(e,t);r!==n&&(s=s.slice(0,r));return s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(qi(e,Uint8Array)){const t=new Uint8Array(e);return hi(t.buffer,t.byteOffset,t.byteLength)}return ci(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(qi(e,ArrayBuffer)||e&&qi(e.buffer,ArrayBuffer))return hi(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(qi(e,SharedArrayBuffer)||e&&qi(e.buffer,SharedArrayBuffer)))return hi(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return ii.from(s,t,n);const r=function(e){if(ii.isBuffer(e)){const t=0|pi(e.length),n=ai(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Ki(e.length)?ai(0):ci(e);if("Buffer"===e.type&&Array.isArray(e.data))return ci(e.data)}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return ii.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function li(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function ui(e){return li(e),ai(e<0?0:0|pi(e))}function ci(e){const t=e.length<0?0:0|pi(e.length),n=ai(t);for(let s=0;s<t;s+=1)n[s]=255&e[s];return n}function hi(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(s,ii.prototype),s}function pi(e){if(e>=ri)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+ri.toString(16)+" bytes");return 0|e}function di(e,t){if(ii.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||qi(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===n)return 0;let r=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Gi(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Hi(e).length;default:if(r)return s?-1:Gi(e).length;t=(""+t).toLowerCase(),r=!0}}function fi(e,t,n){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return $i(this,t,n);case"utf8":case"utf-8":return Si(this,t,n);case"ascii":return Ti(this,t,n);case"latin1":case"binary":return Ci(this,t,n);case"base64":return Ii(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ei(this,t,n);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function mi(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function gi(e,t,n,s,r){if(0===e.length)return-1;if("string"==typeof n?(s=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Ki(n=+n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=ii.from(t,s)),ii.isBuffer(t))return 0===t.length?-1:yi(e,t,n,s,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):yi(e,[t],n,s,r);throw new TypeError("val must be string, number or Buffer")}function yi(e,t,n,s,r){let a,i=1,o=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;i=2,o/=2,l/=2,n/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(r){let s=-1;for(a=n;a<o;a++)if(u(e,a)===u(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===l)return s*i}else-1!==s&&(a-=a-s),s=-1}else for(n+l>o&&(n=o-l),a=n;a>=0;a--){let n=!0;for(let s=0;s<l;s++)if(u(e,a+s)!==u(t,s)){n=!1;break}if(n)return a}return-1}function bi(e,t,n,s){n=Number(n)||0;const r=e.length-n;s?(s=Number(s))>r&&(s=r):s=r;const a=t.length;let i;for(s>a/2&&(s=a/2),i=0;i<s;++i){const s=parseInt(t.substr(2*i,2),16);if(Ki(s))return i;e[n+i]=s}return i}function xi(e,t,n,s){return ji(Gi(t,e.length-n),e,n,s)}function wi(e,t,n,s){return ji(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,s)}function ki(e,t,n,s){return ji(Hi(t),e,n,s)}function vi(e,t,n,s){return ji(function(e,t){let n,s,r;const a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),s=n>>8,r=n%256,a.push(r),a.push(s);return a}(t,e.length-n),e,n,s)}function Ii(e,t,n){return 0===t&&n===e.length?ja(e):ja(e.slice(t,n))}function Si(e,t,n){n=Math.min(e.length,n);const s=[];let r=t;for(;r<n;){const t=e[r];let a=null,i=t>239?4:t>223?3:t>191?2:1;if(r+i<=n){let n,s,o,l;switch(i){case 1:t<128&&(a=t);break;case 2:n=e[r+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(a=l));break;case 3:n=e[r+1],s=e[r+2],128==(192&n)&&128==(192&s)&&(l=(15&t)<<12|(63&n)<<6|63&s,l>2047&&(l<55296||l>57343)&&(a=l));break;case 4:n=e[r+1],s=e[r+2],o=e[r+3],128==(192&n)&&128==(192&s)&&128==(192&o)&&(l=(15&t)<<18|(63&n)<<12|(63&s)<<6|63&o,l>65535&&l<1114112&&(a=l))}}null===a?(a=65533,i=1):a>65535&&(a-=65536,s.push(a>>>10&1023|55296),a=56320|1023&a),s.push(a),r+=i}return function(e){const t=e.length;if(t<=Ni)return String.fromCharCode.apply(String,e);let n="",s=0;for(;s<t;)n+=String.fromCharCode.apply(String,e.slice(s,s+=Ni));return n}(s)}ii.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),ii.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(ii.prototype,"parent",{enumerable:!0,get:function(){if(ii.isBuffer(this))return this.buffer}}),Object.defineProperty(ii.prototype,"offset",{enumerable:!0,get:function(){if(ii.isBuffer(this))return this.byteOffset}}),ii.poolSize=8192,ii.from=function(e,t,n){return oi(e,t,n)},Object.setPrototypeOf(ii.prototype,Uint8Array.prototype),Object.setPrototypeOf(ii,Uint8Array),ii.alloc=function(e,t,n){return function(e,t,n){return li(e),e<=0?ai(e):void 0!==t?"string"==typeof n?ai(e).fill(t,n):ai(e).fill(t):ai(e)}(e,t,n)},ii.allocUnsafe=function(e){return ui(e)},ii.allocUnsafeSlow=function(e){return ui(e)},ii.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==ii.prototype},ii.compare=function(e,t){if(qi(e,Uint8Array)&&(e=ii.from(e,e.offset,e.byteLength)),qi(t,Uint8Array)&&(t=ii.from(t,t.offset,t.byteLength)),!ii.isBuffer(e)||!ii.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,s=t.length;for(let r=0,a=Math.min(n,s);r<a;++r)if(e[r]!==t[r]){n=e[r],s=t[r];break}return n<s?-1:s<n?1:0},ii.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},ii.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return ii.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const s=ii.allocUnsafe(t);let r=0;for(n=0;n<e.length;++n){let t=e[n];if(qi(t,Uint8Array))r+t.length>s.length?(ii.isBuffer(t)||(t=ii.from(t)),t.copy(s,r)):Uint8Array.prototype.set.call(s,t,r);else{if(!ii.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,r)}r+=t.length}return s},ii.byteLength=di,ii.prototype._isBuffer=!0,ii.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)mi(this,t,t+1);return this},ii.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)mi(this,t,t+3),mi(this,t+1,t+2);return this},ii.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)mi(this,t,t+7),mi(this,t+1,t+6),mi(this,t+2,t+5),mi(this,t+3,t+4);return this},ii.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?Si(this,0,e):fi.apply(this,arguments)},ii.prototype.toLocaleString=ii.prototype.toString,ii.prototype.equals=function(e){if(!ii.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===ii.compare(this,e)},ii.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},si&&(ii.prototype[si]=ii.prototype.inspect),ii.prototype.compare=function(e,t,n,s,r){if(qi(e,Uint8Array)&&(e=ii.from(e,e.offset,e.byteLength)),!ii.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===s&&(s=0),void 0===r&&(r=this.length),t<0||n>e.length||s<0||r>this.length)throw new RangeError("out of range index");if(s>=r&&t>=n)return 0;if(s>=r)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(r>>>=0)-(s>>>=0),i=(n>>>=0)-(t>>>=0);const o=Math.min(a,i),l=this.slice(s,r),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){a=l[e],i=u[e];break}return a<i?-1:i<a?1:0},ii.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},ii.prototype.indexOf=function(e,t,n){return gi(this,e,t,n,!0)},ii.prototype.lastIndexOf=function(e,t,n){return gi(this,e,t,n,!1)},ii.prototype.write=function(e,t,n,s){if(void 0===t)s="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)s=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===s&&(s="utf8")):(s=n,n=void 0)}const r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let a=!1;for(;;)switch(s){case"hex":return bi(this,e,t,n);case"utf8":case"utf-8":return xi(this,e,t,n);case"ascii":case"latin1":case"binary":return wi(this,e,t,n);case"base64":return ki(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return vi(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),a=!0}},ii.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const Ni=4096;function Ti(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(127&e[r]);return s}function Ci(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(e[r]);return s}function $i(e,t,n){const s=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>s)&&(n=s);let r="";for(let s=t;s<n;++s)r+=Xi[e[s]];return r}function Ei(e,t,n){const s=e.slice(t,n);let r="";for(let e=0;e<s.length-1;e+=2)r+=String.fromCharCode(s[e]+256*s[e+1]);return r}function Ai(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function Ri(e,t,n,s,r,a){if(!ii.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<a)throw new RangeError('"value" argument is out of bounds');if(n+s>e.length)throw new RangeError("Index out of range")}function Fi(e,t,n,s,r){Pi(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function Di(e,t,n,s,r){Pi(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function _i(e,t,n,s,r,a){if(n+s>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Oi(e,t,n,s,r){return t=+t,n>>>=0,r||_i(e,0,n,4),Ka(e,t,n,s,23,4),n+4}function Mi(e,t,n,s,r){return t=+t,n>>>=0,r||_i(e,0,n,8),Ka(e,t,n,s,52,8),n+8}ii.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,ii.prototype),s},ii.prototype.readUintLE=ii.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||Ai(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return s},ii.prototype.readUintBE=ii.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||Ai(e,t,this.length);let s=this[e+--t],r=1;for(;t>0&&(r*=256);)s+=this[e+--t]*r;return s},ii.prototype.readUint8=ii.prototype.readUInt8=function(e,t){return e>>>=0,t||Ai(e,1,this.length),this[e]},ii.prototype.readUint16LE=ii.prototype.readUInt16LE=function(e,t){return e>>>=0,t||Ai(e,2,this.length),this[e]|this[e+1]<<8},ii.prototype.readUint16BE=ii.prototype.readUInt16BE=function(e,t){return e>>>=0,t||Ai(e,2,this.length),this[e]<<8|this[e+1]},ii.prototype.readUint32LE=ii.prototype.readUInt32LE=function(e,t){return e>>>=0,t||Ai(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},ii.prototype.readUint32BE=ii.prototype.readUInt32BE=function(e,t){return e>>>=0,t||Ai(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},ii.prototype.readBigUInt64LE=Yi((function(e){Wi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Ui(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(s)+(BigInt(r)<<BigInt(32))})),ii.prototype.readBigUInt64BE=Yi((function(e){Wi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Ui(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(s)<<BigInt(32))+BigInt(r)})),ii.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||Ai(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return r*=128,s>=r&&(s-=Math.pow(2,8*t)),s},ii.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||Ai(e,t,this.length);let s=t,r=1,a=this[e+--s];for(;s>0&&(r*=256);)a+=this[e+--s]*r;return r*=128,a>=r&&(a-=Math.pow(2,8*t)),a},ii.prototype.readInt8=function(e,t){return e>>>=0,t||Ai(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},ii.prototype.readInt16LE=function(e,t){e>>>=0,t||Ai(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},ii.prototype.readInt16BE=function(e,t){e>>>=0,t||Ai(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},ii.prototype.readInt32LE=function(e,t){return e>>>=0,t||Ai(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},ii.prototype.readInt32BE=function(e,t){return e>>>=0,t||Ai(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},ii.prototype.readBigInt64LE=Yi((function(e){Wi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Ui(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),ii.prototype.readBigInt64BE=Yi((function(e){Wi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Ui(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),ii.prototype.readFloatLE=function(e,t){return e>>>=0,t||Ai(e,4,this.length),qa(this,e,!0,23,4)},ii.prototype.readFloatBE=function(e,t){return e>>>=0,t||Ai(e,4,this.length),qa(this,e,!1,23,4)},ii.prototype.readDoubleLE=function(e,t){return e>>>=0,t||Ai(e,8,this.length),qa(this,e,!0,52,8)},ii.prototype.readDoubleBE=function(e,t){return e>>>=0,t||Ai(e,8,this.length),qa(this,e,!1,52,8)},ii.prototype.writeUintLE=ii.prototype.writeUIntLE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){Ri(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=1,a=0;for(this[t]=255&e;++a<n&&(r*=256);)this[t+a]=e/r&255;return t+n},ii.prototype.writeUintBE=ii.prototype.writeUIntBE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){Ri(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=n-1,a=1;for(this[t+r]=255&e;--r>=0&&(a*=256);)this[t+r]=e/a&255;return t+n},ii.prototype.writeUint8=ii.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,1,255,0),this[t]=255&e,t+1},ii.prototype.writeUint16LE=ii.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},ii.prototype.writeUint16BE=ii.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},ii.prototype.writeUint32LE=ii.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},ii.prototype.writeUint32BE=ii.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},ii.prototype.writeBigUInt64LE=Yi((function(e,t=0){return Fi(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),ii.prototype.writeBigUInt64BE=Yi((function(e,t=0){return Di(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),ii.prototype.writeIntLE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);Ri(this,e,t,n,s-1,-s)}let r=0,a=1,i=0;for(this[t]=255&e;++r<n&&(a*=256);)e<0&&0===i&&0!==this[t+r-1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},ii.prototype.writeIntBE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);Ri(this,e,t,n,s-1,-s)}let r=n-1,a=1,i=0;for(this[t+r]=255&e;--r>=0&&(a*=256);)e<0&&0===i&&0!==this[t+r+1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},ii.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},ii.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},ii.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},ii.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},ii.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Ri(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},ii.prototype.writeBigInt64LE=Yi((function(e,t=0){return Fi(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),ii.prototype.writeBigInt64BE=Yi((function(e,t=0){return Di(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),ii.prototype.writeFloatLE=function(e,t,n){return Oi(this,e,t,!0,n)},ii.prototype.writeFloatBE=function(e,t,n){return Oi(this,e,t,!1,n)},ii.prototype.writeDoubleLE=function(e,t,n){return Mi(this,e,t,!0,n)},ii.prototype.writeDoubleBE=function(e,t,n){return Mi(this,e,t,!1,n)},ii.prototype.copy=function(e,t,n,s){if(!ii.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<n&&(s=n),s===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-n&&(s=e.length-t+n);const r=s-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,s):Uint8Array.prototype.set.call(e,this.subarray(n,s),t),r},ii.prototype.fill=function(e,t,n,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,n=this.length):"string"==typeof n&&(s=n,n=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!ii.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let r;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(r=t;r<n;++r)this[r]=e;else{const a=ii.isBuffer(e)?e:ii.from(e,s),i=a.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(r=0;r<n-t;++r)this[r+t]=a[r%i]}return this};const Li={};function zi(e,t,n){Li[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Bi(e){let t="",n=e.length;const s="-"===e[0]?1:0;for(;n>=s+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Pi(e,t,n,s,r,a){if(e>n||e<t){const s="bigint"==typeof t?"n":"";let r;throw r=a>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(a+1)}${s}`:`>= -(2${s} ** ${8*(a+1)-1}${s}) and < 2 ** ${8*(a+1)-1}${s}`:`>= ${t}${s} and <= ${n}${s}`,new Li.ERR_OUT_OF_RANGE("value",r,e)}!function(e,t,n){Wi(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||Ui(t,e.length-(n+1))}(s,r,a)}function Wi(e,t){if("number"!=typeof e)throw new Li.ERR_INVALID_ARG_TYPE(t,"number",e)}function Ui(e,t,n){if(Math.floor(e)!==e)throw Wi(e,n),new Li.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new Li.ERR_BUFFER_OUT_OF_BOUNDS;throw new Li.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}zi("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),zi("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),zi("ERR_OUT_OF_RANGE",(function(e,t,n){let s=`The value of "${e}" is out of range.`,r=n;return Number.isInteger(n)&&Math.abs(n)>2**32?r=Bi(String(n)):"bigint"==typeof n&&(r=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(r=Bi(r)),r+="n"),s+=` It must be ${t}. Received ${r}`,s}),RangeError);const Vi=/[^+/0-9A-Za-z-_]/g;function Gi(e,t){let n;t=t||1/0;const s=e.length;let r=null;const a=[];for(let i=0;i<s;++i){if(n=e.charCodeAt(i),n>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===s){(t-=3)>-1&&a.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&a.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Hi(e){return Ha(function(e){if((e=(e=e.split("=")[0]).trim().replace(Vi,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function ji(e,t,n,s){let r;for(r=0;r<s&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function qi(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Ki(e){return e!=e}const Xi=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const s=16*n;for(let r=0;r<16;++r)t[s+r]=e[n]+e[r]}return t}();function Yi(e){return"undefined"==typeof BigInt?Zi:e}function Zi(){throw new Error("BigInt not supported")}var Ji=Ga;async function Qi(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:to(await Promise.all(s)),specs:n}}function eo(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=I(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Va[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=uo()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=I(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=Va[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=Ua(e,o,"float32"),i=Ua(s,o,"float32");n[t]=Pa(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=Ua(u,o,i))}return n}function to(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const no=void 0!==Ji&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function so(e){return no?Ji.byteLength(e):new Blob([e]).size}function ro(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function ao(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function io(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function oo(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[s,r]=await t(e.weightsManifest);n.weightSpecs=s,n.weightData=r}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function lo(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:so(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:so(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function uo(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class co{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==co.instance&&(co.instance=new co),co.instance}static registerSaveRouter(e){co.getInstance().saveRouters.push(e)}static registerLoadRouter(e){co.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return co.getHandlers(e,"save")}static getLoadHandlers(e,t){return co.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?co.getInstance().loadRouters:co.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const ho=e=>co.registerSaveRouter(e),po=e=>co.registerLoadRouter(e),fo=e=>co.getSaveHandlers(e),mo=(e,t)=>co.getLoadHandlers(e,t),go="tensorflowjs",yo="models_store",bo="model_info_store";function xo(){if(!le().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function wo(e){const t=e.result;t.createObjectStore(yo,{keyPath:"modelPath"}),t.createObjectStore(bo,{keyPath:"modelPath"})}class ko{constructor(e){if(this.indexedDB=xo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(go,1);s.onupgradeneeded=()=>wo(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(yo,"readonly"),s=t.objectStore(yo).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=lo(t),a=r.transaction(bo,"readwrite");let i=a.objectStore(bo);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(yo,"readwrite");const o=l.objectStore(yo).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(bo);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}ko.URL_SCHEME="indexeddb://";const vo=e=>{return le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ko.URL_SCHEME)?(t=e.slice(ko.URL_SCHEME.length),new ko(t)):null;var t};co.registerSaveRouter(vo),co.registerLoadRouter(vo);class Io{constructor(){this.indexedDB=xo()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(go,1);n.onupgradeneeded=()=>wo(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(bo,"readonly"),a=r.objectStore(bo).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(ko.URL_SCHEME)?t.slice(ko.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(go,1);s.onupgradeneeded=()=>wo(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(bo,"readwrite"),i=a.objectStore(bo),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(yo,"readwrite");const s=l.objectStore(yo).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const So="/",No="tensorflowjs_models",To="info",Co="model_topology",$o="weight_specs",Eo="weight_data",Ao="model_metadata";function Ro(e){return{info:[No,e,To].join(So),topology:[No,e,Co].join(So),weightSpecs:[No,e,$o].join(So),weightData:[No,e,Eo].join(So),modelMetadata:[No,e,Ao].join(So)}}function Fo(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Do(e){const t=e.split(So);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(So)}class _o{constructor(e){if(!le().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Ro(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=lo(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(no)return Ji.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw Fo(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(no){const t=Ji.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}_o.URL_SCHEME="localstorage://";const Oo=e=>{return le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(_o.URL_SCHEME)?(t=e.slice(_o.URL_SCHEME.length),new _o(t)):null;var t};co.registerSaveRouter(Oo),co.registerLoadRouter(Oo);class Mo{constructor(){x(le().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),x("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=No+So,n=So+To;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[Do(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=Ro(e=(t=e).startsWith(_o.URL_SCHEME)?t.slice(_o.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return Fo(n),s}}const Lo="://";class zo{constructor(){this.managers={}}static getInstance(){return null==zo.instance&&(zo.instance=new zo),zo.instance}static registerManager(e,t){x(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Lo)&&(e=e.slice(0,e.indexOf(Lo))),x(e.length>0,(()=>"scheme must not be an empty string."));const n=zo.getInstance();x(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Bo(e){if(-1===e.indexOf(Lo))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${zo.getSchemes().join(",")}`);return{scheme:e.split(Lo)[0],path:e.split(Lo)[1]}}async function Po(e,t,n=!1){x(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=co.getLoadHandlers(e);x(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),x(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=co.getSaveHandlers(t);x(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),x(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Bo(e).scheme,l=Bo(e).path,u=o===Bo(e).scheme,c=await r.load();n&&u&&await zo.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await zo.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Wo(){const e=zo.getSchemes(),t={};for(const n of e){const e=await zo.getManager(n).listModels();for(const s in e){t[n+Lo+s]=e[s]}}return t}async function Uo(e){const t=Bo(e);return zo.getManager(t.scheme).removeModel(t.path)}async function Vo(e,t){return Po(e,t,!1)}async function Go(e,t){return Po(e,t,!0)}class Ho{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(le().get("IS_BROWSER")){le().setPlatform("browser",new Ho);try{zo.registerManager(_o.URL_SCHEME,new Mo)}catch(e){}try{zo.registerManager(ko.URL_SCHEME,new Io)}catch(e){}}const jo=()=>a("foUwZ");let qo;function Ko(e,t="float32",n){return t=t||"float32",te(e),new Yr(e,t,n)}le().get("IS_NODE")&&le().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=le().global.fetch?le().global.fetch(e,t):(null==qo&&(qo=jo()),qo(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Xo=Ba({cast_:function(e,t){const n=Ma(e,"x","cast");if(!z(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Na.runKernel(Je,s,r)}});const Yo=Ba({clone_:function(e){const t={x:Ma(e,"x","clone","string_or_numeric")};return Na.runKernel(Ut,t)}});function Zo(e,t=!1){console.log(e.toString(t))}Sa();Jr={buffer:Ko,cast:Xo,clone:Yo,print:Zo};var Jo={};n(Jo,"AdadeltaOptimizer",(()=>Vg)),n(Jo,"AdagradOptimizer",(()=>Gg)),n(Jo,"AdamOptimizer",(()=>Hg)),n(Jo,"AdamaxOptimizer",(()=>jg)),n(Jo,"MomentumOptimizer",(()=>Kg)),n(Jo,"Optimizer",(()=>Ug)),n(Jo,"OptimizerConstructors",(()=>Yg)),n(Jo,"RMSPropOptimizer",(()=>Xg)),n(Jo,"SGDOptimizer",(()=>qg)),n(Jo,"Tensor",(()=>ea)),n(Jo,"TensorBuffer",(()=>Yr)),n(Jo,"Variable",(()=>na)),n(Jo,"Rank",(()=>sa)),n(Jo,"sumOutType",(()=>ma)),n(Jo,"upcastType",(()=>fa)),n(Jo,"Reduction",(()=>Dd)),n(Jo,"customGrad",(()=>kp)),n(Jo,"grad",(()=>gp)),n(Jo,"grads",(()=>yp)),n(Jo,"valueAndGrad",(()=>bp)),n(Jo,"valueAndGrads",(()=>xp)),n(Jo,"variableGrads",(()=>wp)),n(Jo,"Environment",(()=>ie)),n(Jo,"env",(()=>le)),n(Jo,"ENV",(()=>ue)),n(Jo,"version_core",(()=>ku)),n(Jo,"nextFrame",(()=>ey)),n(Jo,"browser",(()=>Cl)),n(Jo,"io",(()=>Qo)),n(Jo,"math",(()=>yl)),n(Jo,"serialization",(()=>au)),n(Jo,"test_util",(()=>uu)),n(Jo,"util",(()=>Ys)),n(Jo,"backend_util",(()=>vu)),n(Jo,"broadcast_util",(()=>Il)),n(Jo,"tensor_util",(()=>pa)),n(Jo,"slice_util",(()=>Wl)),n(Jo,"gather_util",(()=>Ol)),n(Jo,"scatter_util",(()=>Ll)),n(Jo,"device_util",(()=>Ca)),n(Jo,"kernel_impls",(()=>xh)),n(Jo,"KernelBackend",(()=>l)),n(Jo,"DataStorage",(()=>o));var Qo={};n(Qo,"copyModel",(()=>Vo)),n(Qo,"listModels",(()=>Wo)),n(Qo,"moveModel",(()=>Go)),n(Qo,"removeModel",(()=>Uo)),n(Qo,"browserFiles",(()=>sl)),n(Qo,"browserHTTPRequest",(()=>pl)),n(Qo,"concatenateArrayBuffers",(()=>ro)),n(Qo,"decodeWeights",(()=>eo)),n(Qo,"encodeWeights",(()=>Qi)),n(Qo,"fromMemory",(()=>ml)),n(Qo,"getLoadHandlers",(()=>mo)),n(Qo,"getModelArtifactsForJSON",(()=>oo)),n(Qo,"getModelArtifactsInfoForJSON",(()=>lo)),n(Qo,"getSaveHandlers",(()=>fo)),n(Qo,"http",(()=>hl)),n(Qo,"isHTTPScheme",(()=>ul)),n(Qo,"loadWeights",(()=>il)),n(Qo,"registerLoadRouter",(()=>po)),n(Qo,"registerSaveRouter",(()=>ho)),n(Qo,"weightsLoaderFactory",(()=>ol)),n(Qo,"withSaveHandler",(()=>gl));function el(e){return new Promise((e=>setTimeout(e))).then(e)}class tl{constructor(e){if(!le().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(tl.URL_SCHEME)&&(e=e.slice(tl.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=io(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await el((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await el((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:lo(e)}}}}tl.URL_SCHEME="downloads://";class nl{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=oo(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,ro(e)]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>ao(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=ao(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function sl(e){return new nl(e)}function rl(e,t,n,s){var r,a,i;x(null!=(r=e)&&Array.isArray(r)&&r.length>0,(()=>"promises must be a none empty array")),i=s=null==s?1:s,x((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),x(i>=0&&i<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${i}`)),x(i>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${i}`));let o=0;return Promise.all(e.map((r=>(r.then((r=>{const a=n+ ++o/e.length*(s-n);return t(a),r})),r))))}async function al(e,t){null==t&&(t={});const n=null==t.fetchFunc?le().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await rl(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await rl(r,t.onProgress,.5,1)}async function il(e,t="",n,s){return ol((e=>al(e,{requestInit:s})))(e,t,n)}function ol(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Va[l]*I(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=eo(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}co.registerSaveRouter((e=>le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(tl.URL_SCHEME)?function(e="model"){return new tl(e)}(e.slice(tl.URL_SCHEME.length)):null));class ll{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(x("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=le().platform.fetch,x(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&x(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=io(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:lo(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return oo(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,ro(await al(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ul(e){return null!=e.match(ll.URL_SCHEME_REGEX)}ll.URL_SCHEME_REGEX=/^https?:\/\//;const cl=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>ul(e))):ul(e),n)return hl(e,t)}return null};function hl(e,t){return new ll(e,t)}function pl(e,t){return hl(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */co.registerSaveRouter(cl),co.registerLoadRouter(cl);class dl{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class fl{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function ml(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new dl(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new dl({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new dl({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})}function gl(e){return new fl(e)}var yl={};n(yl,"confusionMatrix",(()=>vl));const bl=Ba({matMul_:function(e,t,n=!1,s=!1){let r=Ma(e,"a","matMul"),a=Ma(t,"b","matMul");[r,a]=ga(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Na.runKernel(qe,i,o)}});const xl=Ba({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Ma(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Na.runKernel(Cn,r,a)}});var wl={};n(wl,"transpose",(()=>kl));const kl=Ba({transpose_:function(e,t){const n=Ma(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{x(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return Na.runKernel(Ss,s,r)}});const vl=Ba({confusionMatrix_:function(e,t,n){const s=Ma(e,"labels","confusionMatrix"),r=Ma(t,"predictions","confusionMatrix");x(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),x(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),x(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),x(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),x(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=xl(Xo(s,"int32"),n),i=xl(Xo(r,"int32"),n),o=kl(a),l=bl(o,i);return Xo(l,"int32")}});var Il={};function Sl(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Nl(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Tl(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}n(Il,"getBroadcastDims",(()=>Sl)),n(Il,"getReductionAxes",(()=>Nl)),n(Il,"assertAndGetBroadcastShape",(()=>Tl));var Cl={};function $l(e,t,n){if(k(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Da(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Wa(e,t,s,n)}let El;function Al(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Ws(As,Na.backendName)){const n={pixels:e},s={numChannels:t};return Na.runKernel(As,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==El)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");El=new OffscreenCanvas(1,1).getContext("2d")}else El=document.createElement("canvas").getContext("2d");El.canvas.width=l,El.canvas.height=u,El.drawImage(e,0,0,l,u),c=El.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return $l(h,[u,l,t],"int32")}function Rl(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function Fl(e,t=3){let n=null;if(le().getBool("WRAP_TO_IMAGEBITMAP")&&Rl(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Al(n,t)}async function Dl(e,t){let n=Ma(e,"img","toPixels");if(!(e instanceof ea)){const e=n;n=Xo(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}n(Cl,"fromPixelsAsync",(()=>Fl)),n(Cl,"toPixels",(()=>Dl)),n(Cl,"fromPixels",(()=>_l));const _l=Ba({fromPixels_:Al});var Ol={};function Ml(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===I(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...X(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}n(Ol,"prepareAndValidate",(()=>Ml));var Ll={};function zl(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Bl(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}zl(n,t,e)}function Pl(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:I(t.shape)/o,sliceSize:i,strides:[...X(n.slice(0,r)),1],outputSize:I(n)}}n(Ll,"validateUpdateShape",(()=>zl)),n(Ll,"validateInput",(()=>Bl)),n(Ll,"calculateShapes",(()=>Pl));var Wl={};n(Wl,"assertParamsValid",(()=>Ul)),n(Wl,"maskToAxes",(()=>Vl)),n(Wl,"computeOutShape",(()=>Gl)),n(Wl,"stridesWithElidedDims",(()=>Hl)),n(Wl,"getNormalizedAxes",(()=>Kl)),n(Wl,"startIndicesWithElidedDims",(()=>Xl)),n(Wl,"stopIndicesWithElidedDims",(()=>Yl)),n(Wl,"startForAxis",(()=>Jl)),n(Wl,"stopForAxis",(()=>Ql)),n(Wl,"stridesForAxis",(()=>Zl)),n(Wl,"isSliceContinous",(()=>eu)),n(Wl,"computeFlatOffset",(()=>tu)),n(Wl,"parseSliceParams",(()=>nu)),n(Wl,"sliceInfo",(()=>su));function Ul(e,t,n){const s=e.shape.length;x(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),x(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)x(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function Vl(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Gl(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function Hl(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function jl(e,t,n){return n<=e?n:n-(t-1)}function ql(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Kl(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Xl(i,l,u,s,e),h=Yl(o,l,u,r,e),p=Hl(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=Jl(i,s,a,e,t,l),h[t]=Ql(o,r,a,e,t,l),p[t]=Zl(a,t,l);return{begin:c,end:h,strides:p}}function Xl(e,t,n,s,r){const a=[...r],i=ql(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=jl(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Yl(e,t,n,s,r){const a=[...r],i=ql(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=jl(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=d(0,a[e],r[e])}return a}function Zl(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Jl(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=d(0,i,l-1),i}function Ql(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?d(0,i,l):d(-1,i,l-1),i}function eu(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function tu(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function nu(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{x(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(x(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function su(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[p.beginMask&1<<t,p.endMask&1<<t],a=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=ru(p.begin[t],0,p.strides[t],s,r,a),p.end[t]=ru(p.end[t],1,p.strides[t],s,r,a);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,l=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function ru(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var au={};n(au,"Serializable",(()=>iu)),n(au,"SerializationMap",(()=>ou)),n(au,"registerClass",(()=>lu));class iu{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ou{constructor(){this.classNameMap={}}static getMap(){return null==ou.instance&&(ou.instance=new ou),ou.instance}static register(e){ou.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function lu(e){x(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),x("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),x(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ou.register(e)}var uu={};n(uu,"TEST_EPSILON_FLOAT16",(()=>cu)),n(uu,"expectArraysClose",(()=>hu)),n(uu,"testEpsilon",(()=>pu)),n(uu,"expectPromiseToFail",(()=>fu)),n(uu,"expectArraysEqual",(()=>mu)),n(uu,"expectNumbersClose",(()=>gu)),n(uu,"expectValuesInRange",(()=>bu)),n(uu,"expectArrayBuffersEqual",(()=>xu)),n(uu,"encodeStrings",(()=>wu));const cu=.1;function hu(e,t,n){return null==n&&(n=pu()),du(e,t,((e,t)=>yu(e,t,n)))}function pu(){return 32===Na.backend.floatPrecision()?.001:cu}function du(e,t,n){let s=!0;if((P(e)||P(t))&&(s=!1),P(e)&&P(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Da(e),s=Da(t);if(!N(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=P(e)?e:v(e),a=P(t)?t:v(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function fu(e,t){e().then((()=>t.fail()),(()=>t()))}function mu(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return V(e)||V(e[0])||V(t)||V(t[0])?du(e,n,((e,t)=>e==t)):du(e,t,((e,t)=>yu(e,t,0)))}function gu(e,t,n){if(null==n&&(n=pu()),!yu(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function yu(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function bu(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function xu(e,t){const n=new Float32Array(e),s=new Float32Array(t);if(n.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);for(let e=0;e<s.length;e++)if(n[e]!==s[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${s[e]} but got ${n[e]} instead`)}function wu(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?wu(n):e[t]=Pr(n)}return e}
/** @license See the LICENSE file. */const ku="3.13.0";var vu={};n(vu,"fromUint8ToStringArray",(()=>yh)),n(vu,"fromStringArrayToUint8",(()=>bh)),n(vu,"slice_util",(()=>Wl)),n(vu,"upcastType",(()=>fa)),n(vu,"segment_util",(()=>Iu));var Iu={};n(Iu,"segOpComputeOptimalWindowSize",(()=>Cu)),n(Iu,"computeOutShape",(()=>$u)),n(Iu,"collectGatherOpShapeInfo",(()=>Eu));var Su={};n(Su,"PARALLELIZE_THRESHOLD",(()=>Nu)),n(Su,"computeOptimalWindowSize",(()=>Tu));const Nu=30;function Tu(e){return e<=Nu?e:K(e,Math.floor(Math.sqrt(e)))}function Cu(e,t){let n,s=!1;for(e<=Nu?(n=e,s=!0):n=K(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=K(e,n+1);return n}function $u(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function Eu(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var Au={};function Ru(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Fu(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Du(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function _u(e,t){return Fu(e,t.map((e=>1)),t)}function Ou(e,t,n){x(Ru(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Mu(e,t){if(Ru(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Lu(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function zu(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}n(Au,"axesAreInnerMostDims",(()=>Ru)),n(Au,"combineLocations",(()=>Fu)),n(Au,"computeOutAndReduceShapes",(()=>Du)),n(Au,"expandShapeToKeepDim",(()=>_u)),n(Au,"assertAxesAreInnerMostDims",(()=>Ou)),n(Au,"getAxesPermutation",(()=>Mu)),n(Au,"getUndoAxesPermutation",(()=>Lu)),n(Au,"getInnerMostAxes",(()=>zu));var Bu={};function Pu(e,t){const n=e[0].length;e.forEach(((e,t)=>{x(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),x(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)x(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Wu(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}n(Bu,"assertParamsConsistent",(()=>Pu)),n(Bu,"computeOutShape",(()=>Wu));var Uu={};function Vu(e,t,n,s,r="NHWC",a){return ju(e,[...t,e[3]],n,a,s,null,null,tc(r))}function Gu(e,t,n,s,r,a,i="channelsLast"){const[o,l]=Xu(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return ju(e,u,n,s,r,a,!1,i)}function Hu(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=Yu(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return qu(e,c,n,s,r,!1,h,a)}function ju(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Xu(n),[y,b]=Xu(s),x=Zu(p,y),w=Zu(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Ku(e,t,n));const a=e[0],i=e[1],o=Ju((a-t+2*s)/n+1,r),l=Ju((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ju((t-a+p+d)/s+1,o),h=Ju((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),S=i?f*h:f;let N;return"channelsFirst"===o?N=[l,S,v,I]:"channelsLast"===o&&(N=[l,v,I,S]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:N,filterShape:t}}function qu(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Yu(n),[w,k,v]=Yu(s),I=Zu(d,w),S=Zu(f,k),N=Zu(m,v),{padInfo:T,outDepth:C,outHeight:$,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=Ku(e,t,s));const i=e[0],o=e[1],l=e[2],u=Ju((i-t+2*r)/s+1,a),c=Ju((o-t+2*r)/s+1,a),h=Ju((l-t+2*r)/s+1,a);return[u,c,h,n]}([t,n,s,1],o,1,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,S,N,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,C,$,E]:"channelsLast"===i&&(R=[l,C,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:C,outHeight:$,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:S,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Ku(e,t,n,s=1){const r=Zu(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Xu(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Yu(e){return"number"==typeof e?[e,e,e]:e}function Zu(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ju(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Qu(e){const[t,n,s]=Xu(e);return 1===t&&1===n&&1===s}function ec(e,t){return Qu(e)||Qu(t)}function tc(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function nc(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}n(Uu,"computeDilation2DInfo",(()=>Vu)),n(Uu,"convertConv2DDataFormat",(()=>tc)),n(Uu,"computeConv2DInfo",(()=>ju)),n(Uu,"computePool2DInfo",(()=>Gu)),n(Uu,"computePool3DInfo",(()=>Hu)),n(Uu,"computeConv3DInfo",(()=>qu)),n(Uu,"computeDefaultPad",(()=>Ku)),n(Uu,"tupleValuesAreOne",(()=>Qu)),n(Uu,"eitherStridesOrDilationsAreOne",(()=>ec)),n(Uu,"checkPadOnDimRoundingMode",(()=>nc));var sc={};n(sc,"getFusedDyActivation",(()=>fc)),n(sc,"getFusedBiasGradient",(()=>mc)),n(sc,"applyActivation",(()=>gc)),n(sc,"shouldFuse",(()=>yc));const rc=Ba({elu_:function(e){const t={x:Ma(e,"x","elu","float32")};return Na.runKernel(Nt,t)}});const ac=Ba({leakyRelu_:function(e,t=.2){const n={x:Ma(e,"x","leakyRelu")},s={alpha:t};return Na.runKernel(Kt,n,s)}});const ic=Ba({mul_:function(e,t){let n=Ma(e,"a","mul"),s=Ma(t,"b","mul");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(wn,r)}});const oc=Ba({prelu_:function(e,t){const n={x:Ma(e,"x","prelu"),alpha:Ma(t,"alpha","prelu")};return Na.runKernel(Fn,n)}});const lc=Ba({relu_:function(e){const t={x:Ma(e,"x","relu")};return Na.runKernel(Ln,t)}});const uc=Ba({relu6_:function(e){const t={x:Ma(e,"x","relu6")};return Na.runKernel(Vn,t)}});const cc=Ba({reshape_:function(e,t){const n={x:Ma(e,"x","reshape","string_or_numeric")},s={shape:t};return Na.runKernel(zn,n,s)}});const hc=Ba({sigmoid_:function(e){const t={x:Ma(e,"x","sigmoid","float32")};return Na.runKernel(es,t)}});const pc=Ba({step_:function(e,t=0){const n={x:Ma(e,"x","step")},s={alpha:t};return Na.runKernel(Es,n,s)}});const dc=Ba({sum_:function(e,t=null,n=!1){let s=Ma(e,"x","sum");"bool"===s.dtype&&(s=Xo(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Na.runKernel(ss,r,a)}});function fc(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return ic(e,pc(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function mc(e,t){let n=t;const s=Nl(e.shape,t.shape);return s.length>0&&(n=dc(n,s)),cc(n,e.shape)}function gc(e,t,n,s){if("linear"===t)return e;if("relu"===t)return lc(e);if("elu"===t)return rc(e);if("relu6"===t)return uc(e);if("prelu"===t)return oc(e,n);if("leakyrelu"===t)return ac(e,s);if("sigmoid"===t)return hc(e);throw new Error(`Unknown fused activation ${t}.`)}const yc=(e,t)=>!(e>0)||"linear"===t;var bc={};function xc(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}n(bc,"getImageCenter",(()=>xc));var wc={};function kc(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function vc(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Ic(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Sc(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Nc(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}n(wc,"getReshaped",(()=>kc)),n(wc,"getPermuted",(()=>vc)),n(wc,"getReshapedPermuted",(()=>Ic)),n(wc,"getSliceBeginCoords",(()=>Sc)),n(wc,"getSliceSize",(()=>Nc));var Tc={};n(Tc,"SELU_SCALEALPHA",(()=>Cc)),n(Tc,"SELU_SCALE",(()=>$c));const Cc=1.7580993408473768,$c=1.0507009873554805;var Ec={};n(Ec,"ERF_P",(()=>Ac)),n(Ec,"ERF_A1",(()=>Rc)),n(Ec,"ERF_A2",(()=>Fc)),n(Ec,"ERF_A3",(()=>Dc)),n(Ec,"ERF_A4",(()=>_c)),n(Ec,"ERF_A5",(()=>Oc));const Ac=.3275911,Rc=.254829592,Fc=-.284496736,Dc=1.421413741,_c=-1.453152027,Oc=1.061405429;var Mc={};function Lc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function zc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Bc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Pc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Wc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Uc(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Vc(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Gc(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}n(Mc,"mergeRealAndImagArrays",(()=>Lc)),n(Mc,"splitRealAndImagArrays",(()=>zc)),n(Mc,"complexWithEvenIndex",(()=>Bc)),n(Mc,"complexWithOddIndex",(()=>Pc)),n(Mc,"getComplexWithIndex",(()=>Wc)),n(Mc,"assignToTypedArray",(()=>Uc)),n(Mc,"exponents",(()=>Vc)),n(Mc,"exponent",(()=>Gc));var Hc={};n(Hc,"decodeEinsumEquation",(()=>Kc)),n(Hc,"getEinsumPermutation",(()=>Xc)),n(Hc,"checkEinsumDimSizes",(()=>Yc)),n(Hc,"getEinsumComputePath",(()=>Zc)),n(Hc,"isIdentityPermutation",(()=>Jc));const jc="->",qc=/->/g;function Kc(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(qc,"").length)/jc.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split(jc);x(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const l=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(o.indexOf(a[e][t]))}const u=o.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function Xc(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Yc(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:x(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function Zc(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=Qc(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Jc(e){return e.every(((e,t)=>e===t))}function Qc(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}var eh={};function th(e,t,n=0){let s=[];if("number"==typeof t)x(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{x(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}x(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}n(eh,"prepareSplitSize",(()=>th));var nh={};function sh(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function rh(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function ah(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}n(nh,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>sh)),n(nh,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>rh)),n(nh,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>ah));var ih={};function oh(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function lh(e,t){return`size ${e} must be non-negative, not ${t}`}function uh(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function ch(e,t){return`Input to reshape is a SparseTensor with ${I(e)}\n  dense values, but the requested shape requires a multiple of ${I(t)}. inputShape=${e} outputShape= ${t}`}function hh(e,t){return`Input to reshape is a tensor with ${I(e)} dense values, but the requested shape has ${I(t)}. inputShape=${e} outputShape=${t}`}n(ih,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>oh)),n(ih,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>lh)),n(ih,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>uh)),n(ih,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>ch)),n(ih,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>hh));var ph={};function dh(){return"segment ids must be >= 0"}function fh(){return"segment ids are not increasing"}function mh(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function gh(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function yh(e){try{return e.map((e=>Wr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function bh(e){return e.map((e=>Pr(e)))}n(ph,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>dh)),n(ph,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>fh)),n(ph,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>mh)),n(ph,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>gh)),e(vu,Au),e(vu,Il),e(vu,Bu),e(vu,Uu),e(vu,sc),e(vu,Su),e(vu,bc),e(vu,wc),e(vu,Ol),e(vu,Ll),e(vu,Tc),e(vu,Ec),e(vu,Ms),e(vu,Mc),e(vu,Hc),e(vu,eh),e(vu,nh),e(vu,ih),e(vu,ph);var xh={};function wh(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||kh)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function kh(e,t){return e>t?1:e<t?-1:0}function vh(e,t,n,s,r){return Nh(e,t,n,s,r,0)}function Ih(e,t,n,s,r,a){return Nh(e,t,n,s,r,0,!1,a,!0)}function Sh(e,t,n,s,r,a){return Nh(e,t,n,s,r,a,!0)}function Nh(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort($h);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Th(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Ch(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&wh(u,t,$h))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Th(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Ch(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function $h(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function Eh(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Ko(e,"int32"),r=Ko([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}n(xh,"nonMaxSuppressionV3Impl",(()=>vh)),n(xh,"nonMaxSuppressionV4Impl",(()=>Ih)),n(xh,"nonMaxSuppressionV5Impl",(()=>Sh)),n(xh,"whereImpl",(()=>Eh));var Ah={};function Rh(){le().set("PROD",!0)}function Fh(){le().set("DEBUG",!0)}function Dh(){le().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function _h(e){le().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Oh(){Na.disposeVariables()}function Mh(){return Na}function Lh(){return Na.memory()}function zh(e){return Na.profile(e)}function Bh(e,t){return Na.tidy(e,t)}function Ph(e){xa(e).forEach((e=>e.dispose()))}function Wh(e){return Na.keep(e)}function Uh(e){return Na.time(e)}function Vh(e){return Na.setBackend(e)}function Gh(){return Na.ready()}function Hh(){return Na.backendName}function jh(e){Na.removeBackend(e)}function qh(e){return Na.findBackend(e)}function Kh(e){return Na.findBackendFactory(e)}function Xh(e,t,n=1){return Na.registerBackend(e,t,n)}function Yh(){return Na.backend}function Zh(e,t){le().setPlatform(e,t)}n(Ah,"enableProdMode",(()=>Rh)),n(Ah,"enableDebugMode",(()=>Fh)),n(Ah,"disableDeprecationWarnings",(()=>Dh)),n(Ah,"deprecationWarn",(()=>_h)),n(Ah,"disposeVariables",(()=>Oh)),n(Ah,"engine",(()=>Mh)),n(Ah,"memory",(()=>Lh)),n(Ah,"profile",(()=>zh)),n(Ah,"tidy",(()=>Bh)),n(Ah,"dispose",(()=>Ph)),n(Ah,"keep",(()=>Wh)),n(Ah,"time",(()=>Uh)),n(Ah,"setBackend",(()=>Vh)),n(Ah,"ready",(()=>Gh)),n(Ah,"getBackend",(()=>Hh)),n(Ah,"removeBackend",(()=>jh)),n(Ah,"findBackend",(()=>qh)),n(Ah,"findBackendFactory",(()=>Kh)),n(Ah,"registerBackend",(()=>Xh)),n(Ah,"backend",(()=>Yh)),n(Ah,"setPlatform",(()=>Zh)),Qr=_h;const Jh=Ba({add_:function(e,t){let n=Ma(e,"a","add"),s=Ma(t,"b","add");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(Fe,r)}});const Qh=Ba({floorDiv_:function(e,t){let n=Ma(e,"a","floorDiv"),s=Ma(t,"b","floorDiv");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(Mt,r)}});const ep=Ba({div_:function(e,t){let n=Ma(e,"a","div"),s=Ma(t,"b","div");if([n,s]=ga(n,s),"int32"===n.dtype&&"int32"===s.dtype)return Qh(n,s);const r={a:n,b:s};return Na.runKernel(It,r,{})}});var tp={};n(tp,"spectral",(()=>Og)),n(tp,"signal",(()=>Mg)),n(tp,"image",(()=>Lg)),n(tp,"linalg",(()=>zg)),n(tp,"losses",(()=>Bg)),n(tp,"sparse",(()=>Pg)),n(tp,"string",(()=>Wg)),n(tp,"abs",(()=>bd)),n(tp,"acos",(()=>af)),n(tp,"acosh",(()=>of)),n(tp,"add",(()=>Jh)),n(tp,"addN",(()=>lf)),n(tp,"all",(()=>uf)),n(tp,"any",(()=>cf)),n(tp,"argMax",(()=>hf)),n(tp,"argMin",(()=>pf)),n(tp,"asin",(()=>df)),n(tp,"asinh",(()=>ff)),n(tp,"atan",(()=>mf)),n(tp,"atan2",(()=>gf)),n(tp,"atanh",(()=>yf)),n(tp,"avgPool",(()=>bf)),n(tp,"avgPool3d",(()=>xf)),n(tp,"basicLSTMCell",(()=>kf)),n(tp,"batchToSpaceND",(()=>vf)),n(tp,"batchNorm",(()=>If)),n(tp,"batchNorm2d",(()=>Sf)),n(tp,"batchNorm3d",(()=>Nf)),n(tp,"batchNorm4d",(()=>Tf)),n(tp,"bincount",(()=>nd)),n(tp,"broadcastArgs",(()=>Cf)),n(tp,"broadcastTo",(()=>od)),n(tp,"buffer",(()=>Ko)),n(tp,"cast",(()=>Xo)),n(tp,"ceil",(()=>$f)),n(tp,"clipByValue",(()=>Ef)),n(tp,"clone",(()=>Yo)),n(tp,"complex",(()=>Pa)),n(tp,"concat",(()=>np)),n(tp,"concat1d",(()=>Af)),n(tp,"concat2d",(()=>Rf)),n(tp,"concat3d",(()=>Ff)),n(tp,"concat4d",(()=>Df)),n(tp,"conv1d",(()=>_f)),n(tp,"conv2d",(()=>Ip)),n(tp,"conv2dTranspose",(()=>Of)),n(tp,"conv3d",(()=>Mf)),n(tp,"conv3dTranspose",(()=>zf)),n(tp,"cos",(()=>Bf)),n(tp,"cosh",(()=>Pf)),n(tp,"cumsum",(()=>Wf)),n(tp,"denseBincount",(()=>Uf)),n(tp,"depthToSpace",(()=>Vf)),n(tp,"depthwiseConv2d",(()=>Cp)),n(tp,"diag",(()=>Gf)),n(tp,"dilation2d",(()=>Hf)),n(tp,"div",(()=>ep)),n(tp,"divNoNan",(()=>qf)),n(tp,"dot",(()=>Kf)),n(tp,"einsum",(()=>Xf)),n(tp,"elu",(()=>rc)),n(tp,"equal",(()=>jf)),n(tp,"erf",(()=>Yf)),n(tp,"exp",(()=>qd)),n(tp,"expandDims",(()=>$d)),n(tp,"expm1",(()=>Zf)),n(tp,"eye",(()=>Ed)),n(tp,"fill",(()=>zp)),n(tp,"floor",(()=>Jf)),n(tp,"floorDiv",(()=>Qh)),n(tp,"gather",(()=>Qf)),n(tp,"greater",(()=>rd)),n(tp,"greaterEqual",(()=>pd)),n(tp,"imag",(()=>sp)),n(tp,"isFinite",(()=>em)),n(tp,"isInf",(()=>tm)),n(tp,"isNaN",(()=>nm)),n(tp,"leakyRelu",(()=>ac)),n(tp,"less",(()=>sm)),n(tp,"lessEqual",(()=>sd)),n(tp,"linspace",(()=>rm)),n(tp,"localResponseNormalization",(()=>am)),n(tp,"log",(()=>Vd)),n(tp,"log1p",(()=>Kd)),n(tp,"logSigmoid",(()=>om)),n(tp,"logSoftmax",(()=>lm)),n(tp,"logSumExp",(()=>Yd)),n(tp,"logicalAnd",(()=>dd)),n(tp,"logicalNot",(()=>um)),n(tp,"logicalOr",(()=>cm)),n(tp,"logicalXor",(()=>hm)),n(tp,"matMul",(()=>bl)),n(tp,"max",(()=>xd)),n(tp,"maxPool",(()=>pm)),n(tp,"maxPool3d",(()=>dm)),n(tp,"maxPoolWithArgmax",(()=>fm)),n(tp,"maximum",(()=>mm)),n(tp,"mean",(()=>_d)),n(tp,"meshgrid",(()=>gm)),n(tp,"min",(()=>wd)),n(tp,"minimum",(()=>Wd)),n(tp,"mirrorPad",(()=>ym)),n(tp,"mod",(()=>bm)),n(tp,"moments",(()=>xm)),n(tp,"mul",(()=>ic)),n(tp,"multiRNNCell",(()=>wm)),n(tp,"multinomial",(()=>km)),n(tp,"neg",(()=>Ad)),n(tp,"notEqual",(()=>Od)),n(tp,"oneHot",(()=>xl)),n(tp,"ones",(()=>Md)),n(tp,"onesLike",(()=>vm)),n(tp,"outerProduct",(()=>Im)),n(tp,"pad",(()=>Sm)),n(tp,"pad1d",(()=>Nm)),n(tp,"pad2d",(()=>Tm)),n(tp,"pad3d",(()=>Cm)),n(tp,"pad4d",(()=>$m)),n(tp,"pool",(()=>Am)),n(tp,"pow",(()=>kd)),n(tp,"prelu",(()=>oc)),n(tp,"print",(()=>Zo)),n(tp,"prod",(()=>Rm)),n(tp,"rand",(()=>Fm)),n(tp,"randomGamma",(()=>Gm)),n(tp,"randomNormal",(()=>Hm)),n(tp,"randomUniform",(()=>jm)),n(tp,"range",(()=>ud)),n(tp,"real",(()=>rp)),n(tp,"reciprocal",(()=>qm)),n(tp,"relu",(()=>lc)),n(tp,"relu6",(()=>uc)),n(tp,"reshape",(()=>cc)),n(tp,"reverse",(()=>pp)),n(tp,"reverse1d",(()=>Km)),n(tp,"reverse2d",(()=>Xm)),n(tp,"reverse3d",(()=>Ym)),n(tp,"reverse4d",(()=>Zm)),n(tp,"round",(()=>id)),n(tp,"rsqrt",(()=>Jm)),n(tp,"scalar",(()=>dp)),n(tp,"selu",(()=>Qm)),n(tp,"separableConv2d",(()=>eg)),n(tp,"setdiff1dAsync",(()=>tg)),n(tp,"sigmoid",(()=>hc)),n(tp,"sign",(()=>ng)),n(tp,"sin",(()=>sg)),n(tp,"sinh",(()=>rg)),n(tp,"slice",(()=>ap)),n(tp,"slice1d",(()=>ag)),n(tp,"slice2d",(()=>ig)),n(tp,"slice3d",(()=>og)),n(tp,"slice4d",(()=>lg)),n(tp,"softmax",(()=>ug)),n(tp,"softplus",(()=>im)),n(tp,"spaceToBatchND",(()=>Em)),n(tp,"fft",(()=>up)),n(tp,"ifft",(()=>hp)),n(tp,"irfft",(()=>fp)),n(tp,"rfft",(()=>cp)),n(tp,"split",(()=>ip)),n(tp,"sqrt",(()=>vd)),n(tp,"square",(()=>Id)),n(tp,"squaredDifference",(()=>Hd)),n(tp,"squeeze",(()=>Td)),n(tp,"stack",(()=>fd)),n(tp,"step",(()=>pc)),n(tp,"stridedSlice",(()=>cg)),n(tp,"sub",(()=>ad)),n(tp,"sum",(()=>dc)),n(tp,"tan",(()=>hg)),n(tp,"tanh",(()=>wf)),n(tp,"tensor",(()=>Ua)),n(tp,"tensor1d",(()=>Dp)),n(tp,"tensor2d",(()=>Bp)),n(tp,"tensor3d",(()=>$l)),n(tp,"tensor4d",(()=>pg)),n(tp,"tensor5d",(()=>dg)),n(tp,"tensor6d",(()=>fg)),n(tp,"tile",(()=>Gp)),n(tp,"topk",(()=>mg)),n(tp,"truncatedNormal",(()=>gg)),n(tp,"unique",(()=>yg)),n(tp,"unsortedSegmentSum",(()=>bg)),n(tp,"unstack",(()=>md)),n(tp,"variable",(()=>xg)),n(tp,"where",(()=>ld)),n(tp,"whereAsync",(()=>wg)),n(tp,"zeros",(()=>op)),n(tp,"zerosLike",(()=>lp)),n(tp,"op",(()=>Ba)),n(tp,"OP_SCOPE_SUFFIX",(()=>za)),n(tp,"fused",(()=>mp));const np=Ba({concat_:function(e,t=0){x(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=La(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Yo(n[0]);const s=n,r={axis:t};return Na.runKernel(st,s,r)}});const sp=Ba({imag_:function(e){const t={input:Ma(e,"input","imag")};return Na.runKernel(Gt,t)}});const rp=Ba({real_:function(e){const t={input:Ma(e,"input","real")};return Na.runKernel(On,t)}});const ap=Ba({slice_:function(e,t,n){const s=Ma(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Na.runKernel(Yn,r,a)}});const ip=Ba({split_:function(e,t,n=0){const s={x:Ma(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Na.runKernel(as,s,r)}});function op(e,t="float32"){if("complex64"===t){const t=op(e,"float32"),n=op(e,"float32");return Pa(t,n)}const n=Q(I(e),t);return Na.makeTensor(n,e,t)}const lp=Ba({zerosLike_:function(e){const t={x:Ma(e,"x","zerosLike")};return Na.runKernel($s,t)}});const up=Ba({fft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Na.runKernel(Ft,t)}});const cp=Ba({rfft_:function(e,t){x("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=ap(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=np([e,op(s)],e.shape.length-1),n=t}else r=e;const a=lp(r),i=cc(Pa(r,a),[s,n]),o=up(i),l=Math.floor(n/2)+1,u=rp(o),c=sp(o),h=ip(u,[l,n-l],u.shape.length-1),p=ip(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,cc(Pa(h[0],p[0]),d)}});const hp=Ba({ifft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Na.runKernel(Vt,t)}});const pp=Ba({reverse_:function(e,t){const n={x:Ma(e,"x","reverse")},s={dims:t};return Na.runKernel(Gn,n,s)}});function dp(e,t){if((P(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&P(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Wa(e,[],[],t)}const fp=Ba({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=cc(e,[n,t]);s=hp(r)}else{const r=[n,2*(t-1)],a=cc(rp(e),[n,t]),i=cc(sp(e),[n,t]),o=pp(ap(a,[0,1],[n,t-2]),1),l=ic(pp(ap(i,[0,1],[n,t-2]),1),dp(-1)),u=np([a,o],1),c=np([i,l],1),h=cc(Pa(u,c),[r[0],r[1]]);s=hp(h)}if(s=rp(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=cc(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});var mp={};function gp(e){return x(q(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Ma(t,"x","tf.grad","string_or_numeric"),r=null!=n?Ma(n,"dy","tf.grad"):null;return Na.tidy((()=>{const{value:t,grads:n}=Na.gradients((()=>e(s)),[s],r);return null!=r&&w(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),vp(n),n[0]}))}}function yp(e){return x(q(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{x(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=La(t,"args","tf.grads","string_or_numeric"),r=null!=n?Ma(n,"dy","tf.grads"):null;return Na.tidy((()=>{const{value:t,grads:n}=Na.gradients((()=>e(...s)),s,r);return null!=r&&w(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),vp(n),n}))}}function bp(e){return x(q(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{x(t instanceof ea,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),x(null==n||n instanceof ea,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Na.gradients((()=>e(t)),[t],n);return vp(s),{grad:s[0],value:r}}}function xp(e){return x(q(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{x(Array.isArray(t)&&t.every((e=>e instanceof ea)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),x(null==n||n instanceof ea,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Na.gradients((()=>e(...t)),t,n);return null!=n&&w(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),vp(s.grads),s}}function wp(e,t){x(q(e),(()=>"The f passed in variableGrads(f) must be a function")),x(null==t||Array.isArray(t)&&t.every((e=>e instanceof na)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Na.registeredVariables)t.push(Na.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;x((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Na.gradients(e,t,null,!0);x(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),x(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function kp(e){return Na.customGrad(e)}function vp(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}n(mp,"conv2d",(()=>Tp)),n(mp,"depthwiseConv2d",(()=>Ap)),n(mp,"matMul",(()=>Rp));const Ip=Ba({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Ma(e,"x","conv2d","float32"),l=Ma(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=cc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),nc("conv2d",s,i);const h="NHWC"===r?u.shape[3]:u.shape[1];x(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),x(ec(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Na.runKernel(rt,p,d);return c?cc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Sp=Ba({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=cc(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=cc(t,[1,t.shape[0],t.shape[1],t.shape[2]])),x(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),x(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),x(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];x(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),x(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),nc("conv2dDerFilter",r,i);const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Na.runKernel(at,h,p)}});const Np=Ba({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=cc(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),x(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),x(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),x(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];x(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),x(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),nc("conv2dDerInput",r,i);const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Na.runKernel(it,p,d);return u?cc(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Tp=Ba({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===yc(Na.state.gradientDepth,l)){let h=Ip(e,t,n,s,r,a,i);return null!=o&&(h=Jh(h,o)),gc(h,l,u,c)}const h=Ma(e,"x","conv2d","float32"),p=Ma(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=cc(h,[1,h.shape[0],h.shape[1],h.shape[2]])),x(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),nc("fused conv2d",s,i),x(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),x(ec(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const m=ju(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=Ma(o,"bias","fused conv2d"),[g]=ga(g,h),Tl(m.outShape,g.shape)),null!=u&&(y=Ma(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=fc(e,o,l);x(Qu(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Np(i.shape,c,r,n,s),Sp(i,c,r.shape,n,s)];if(null!=u){const e=mc(u,c);h.push(e)}return h},w={x:d,filter:p,bias:g,preluActivationWeights:y},k={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return kp(((e,t,n)=>{let s=Na.runKernel(Ds,w,k);return n([t,e,s]),f&&(s=cc(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p)}return kp(((e,t,n,s)=>{let r=Na.runKernel(Ds,w,k);return s([t,e,r,n]),f&&(r=cc(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}});const Cp=Ba({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Ma(e,"x","depthwiseConv2d","float32"),l=Ma(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=cc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),x(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),nc("depthwiseConv2d",s,i);const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=Na.runKernel(gt,h,p);return c?cc(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const $p=Ba({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=cc(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=cc(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Na.runKernel(yt,u,c)}});const Ep=Ba({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=cc(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Na.runKernel(bt,u,c);return l?cc(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Ap=Ba({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===yc(Na.state.gradientDepth,l)){let h=Cp(e,t,n,s,r,a,i);return null!=o&&(h=Jh(h,o)),gc(h,l,u,c)}const h=Ma(e,"x","depthwiseConv2d","float32"),p=Ma(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=cc(h,[1,h.shape[0],h.shape[1],h.shape[2]])),x(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),x(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),x(ec(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),nc("fused depthwiseConv2d",s,i);const m=ju(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Ma(o,"bias","fused conv2d"),[g]=ga(g,h),Tl(m.outShape,g.shape)),null!=u&&(y=Ma(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{x(Qu(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=fc(e,u,l),p=Ep(o.shape,h,r,n,s,a,i),d=$p(o,h,r.shape,n,s,a,i);if(null!=c){return[p,d,mc(g,h)]}return[p,d]},w={x:d,filter:p,bias:g,preluActivationWeights:y},k={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return kp(((e,t,n)=>{let s=Na.runKernel(_s,w,k);return n([t,e,s]),f&&(s=cc(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p)}return kp(((e,t,n,s)=>{let r=Na.runKernel(_s,w,k);return s([t,e,r,n]),f&&(r=cc(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}});const Rp=Ba({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===yc(Na.state.gradientDepth,a)){let l=bl(e,t,n,s);return null!=r&&(l=Jh(l,r)),gc(l,a,i,o)}let l=Ma(e,"a","fused matMul"),u=Ma(t,"b","fused matMul");[l,u]=ga(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=I(f),y=I(m);x(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=Tl(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,d]),w=cc(l,n?[g,c,p]:[g,p,c]),k=cc(u,s?[y,d,h]:[y,h,d]);let v,S;null!=r&&(v=Ma(r,"bias","fused matMul"),[v]=ga(v,l),Tl(b,v.shape)),null!=i&&(S=Ma(i,"prelu weights","fused matMul"));const N=(e,t)=>{const[i,o,l,u]=t,c=fc(cc(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=bl(c,o,!1,!1),p=bl(c,i,!0,!1)):n&&!s?(h=bl(o,c,!1,!0),p=bl(i,c,!1,!1)):(h=bl(o,c,!0,!0),p=bl(c,i,!0,!0)):(h=bl(c,o,!1,!0),p=bl(i,c,!0,!1)),null!=r){return[h,p,mc(u,c)]}return[h,p]},T={a:w,b:k,bias:v,preluActivationWeights:S},C={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){return kp(((e,t,n)=>{const s=Na.runKernel(Fs,T,C);return n([e,t,s]),{value:cc(s,b),gradFunc:N}}))(w,k)}return kp(((e,t,n,s)=>{const r=Na.runKernel(Fs,T,C);return s([e,t,r,n]),{value:cc(r,b),gradFunc:N}}))(w,k,v)}});var Fp={};function Dp(e,t){k(e);const n=Da(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Wa(e,null,n,t)}function _p(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Op(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Dp(r,"float32")}n(Fp,"enclosingPowerOfTwo",(()=>_p)),n(Fp,"cosineWindow",(()=>Op));const Mp=Ba({hammingWindow_:function(e){return Op(e,.54,.46)}});const Lp=Ba({hannWindow_:function(e){return Op(e,.5,.5)}});function zp(e,t,n){const s={shape:e,value:t,dtype:n};return Na.runKernel(Dt,{},s)}function Bp(e,t,n){if(k(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Da(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Wa(e,t,s,n)}const Pp=Ba({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(ap(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=np([ap(e,a,t-s),zp([s],r)]);i.push(o),a+=n}return 0===i.length?Bp([],[0,t]):cc(np(i),[i.length,t])}});const Wp=Ba({stft_:function(e,t,n,s,r=Lp){null==s&&(s=_p(t));const a=Pp(e,t,n),i=ic(a,r(t));return cp(i,s)}});const Up=Ba({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Ma(e,"image","cropAndResize"),o=Ma(t,"boxes","cropAndResize","float32"),l=Ma(n,"boxInd","cropAndResize","int32"),u=o.shape[0];x(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),x(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),x(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),x(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),x(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),x("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Na.runKernel(dt,c,h)}});const Vp=Ba({flipLeftRight_:function(e){const t=Ma(e,"image","flipLeftRight","float32");x(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Na.runKernel(_t,n,{})}});const Gp=Ba({tile_:function(e,t){const n=Ma(e,"x","tile","string_or_numeric");x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Na.runKernel(ks,s,r)}});const Hp=Ba({grayscaleToRGB_:function(e){const t=Ma(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];x(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),x(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,Gp(t,r)}});const jp=Ba({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Ma(e,"image","rotateWithOffset","float32");x(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Na.runKernel(Rs,a,i)}});function qp(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),x(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),x(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),x(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),x(1===t.rank,(()=>"scores must be a 1D tensor")),x(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),x(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Kp=Ba({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Ma(e,"boxes","nonMaxSuppression","float32"),i=Ma(t,"scores","nonMaxSuppression","float32"),o=qp(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Na.runKernel(In,{boxes:a,scores:i},l)}});const Xp=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Ma(e,"boxes","nonMaxSuppressionAsync"),i=Ma(t,"scores","nonMaxSuppressionAsync"),o=qp(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=vh(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Dp(h,"int32")};const Yp=Ba({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Ma(e,"boxes","nonMaxSuppression"),o=Ma(t,"scores","nonMaxSuppression"),l=qp(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Na.runKernel(Nn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Zp=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Ma(e,"boxes","nonMaxSuppressionAsync"),o=Ma(t,"scores","nonMaxSuppressionAsync"),l=qp(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=Sh(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Dp(p,"int32"),selectedScores:Dp(d)}};const Jp=Ba({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Ma(e,"boxes","nonMaxSuppression"),o=Ma(t,"scores","nonMaxSuppression"),l=qp(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Na.runKernel(Sn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Qp=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Ma(e,"boxes","nonMaxSuppressionAsync"),o=Ma(t,"scores","nonMaxSuppressionAsync"),l=qp(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Ih(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Dp(f,"int32"),validOutputs:dp(m,"int32")}};const ed=Ba({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Ma(e,"images","resizeBilinear");x(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),x(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),x(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=cc(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Na.runKernel(Wn,o,l);return i?cc(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const td=Ba({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Ma(e,"images","resizeNearestNeighbor");x(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),x(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),x("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),x(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=cc(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Na.runKernel(Bn,o,l);return i?cc(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const nd=Ba({bincount_:function(e,t,n){const s=Ma(e,"x","bincount"),r=Ma(t,"weights","bincount");x("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Na.runKernel(Xe,a,i)}});const sd=Ba({lessEqual_:function(e,t){let n=Ma(e,"a","lessEqual","string_or_numeric"),s=Ma(t,"b","lessEqual","string_or_numeric");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(Yt,r)}});const rd=Ba({greater_:function(e,t){let n=Ma(e,"a","greater","string_or_numeric"),s=Ma(t,"b","greater","string_or_numeric");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(Pt,r)}});const ad=Ba({sub_:function(e,t){let n=Ma(e,"a","sub"),s=Ma(t,"b","sub");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(bs,r)}});const id=Ba({round_:function(e){const t={x:Ma(e,"x","round")};return Na.runKernel(Hn,t)}});const od=Ba({broadcastTo_:function(e,t){let n=Ma(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=cc(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Yo(n);const i={x:n},o={reps:a};return Na.runKernel(ks,i,o)}});const ld=Ba({where_:function(e,t,n){const s=Ma(t,"a","where"),r=Ma(n,"b","where"),a=Ma(e,"condition","where","bool"),i=Tl(Tl(a.shape,s.shape),r.shape),o={condition:od(a,i),t:od(s,i),e:od(r,i)};return Na.runKernel(Kn,o)}});function ud(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Na.runKernel(_n,{},r)}const cd=Ba({threshold_:function(e,t="binary",n=!1,s=.5){const r=Ma(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=ic(Dp([s]),255);if(x(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),x(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),x("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),x("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,l]=ip(r,[1,1,1],-1);const e=ic(i,.2989),t=ic(o,.587),n=ic(l,.114);u=Jh(Jh(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,r,a,i,o,l=Dp([-1]),u=Dp([0]),c=Dp([0]);for(let h=0;h<e.size-1;h++){n=ap(e,0,h+1),s=ap(e,h+1),i=ep(dc(n),t),o=ep(dc(s),t);const p=dc(ic(n,ud(0,n.size)));r=ep(p,dc(n));const d=zp(s.shape,n.size),f=Jh(ud(0,s.size),d),m=ic(s,f);a=ep(dc(m),dc(s));const g=ad(r,a),y=ad(r,a),b=ic(i,o);c=ic(ic(b,g),y);const x=rd(c,u);u=ld(x,c,u),l=ld(x,Dp([h]),l)}return l}(nd(Xo(id(u),"int32"),Ua([]),256),a)}const h=n?sd(u,c):rd(u,c);return Xo(ic(h,255),"int32")}});const hd=Ba({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Ma(e,"image","transform","float32"),o=Ma(t,"transforms","transform","float32");x(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),x(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),x(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Na.runKernel(Is,l,u)}});const pd=Ba({greaterEqual_:function(e,t){let n=Ma(e,"a","greaterEqual","string_or_numeric"),s=Ma(t,"b","greaterEqual","string_or_numeric");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(Wt,r)}});const dd=Ba({logicalAnd_:function(e,t){const n=Ma(e,"a","logicalAnd","bool"),s=Ma(t,"b","logicalAnd","bool");Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(en,r)}});const fd=Ba({stack_:function(e,t=0){const n=La(e,"tensors","stack","string_or_numeric");x(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&x(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Na.runKernel($n,s,r)}});const md=Ba({unstack_:function(e,t=0){const n=Ma(e,"x","unstack","string_or_numeric");x(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Na.runKernel(Ts,s,r)}});const gd=Ba({bandPart_:function(e,t,n){x(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),x(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Ma(e,"a","bandPart");x(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=cc(ud(0,a,1,"int32"),[-1,1]),l=ud(0,i,1,"int32"),u=ad(o,l),c=dd(sd(u,dp(+t,"int32")),pd(u,dp(-n,"int32"))),h=op([a,i],s.dtype);return cc(fd(md(cc(s,[-1,a,i])).map((e=>ld(c,e,h)))),r)}});var yd={};n(yd,"norm",(()=>Nd));const bd=Ba({abs_:function(e){const t=Ma(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Na.runKernel(nt,e)}{const e={x:t};return Na.runKernel(Ee,e)}}});const xd=Ba({max_:function(e,t=null,n=!1){const s={x:Ma(e,"x","max")},r={reductionIndices:t,keepDims:n};return Na.runKernel(on,s,r)}});const wd=Ba({min_:function(e,t=null,n=!1){const s={x:Ma(e,"x","min")},r={axis:t,keepDims:n};return Na.runKernel(mn,s,r)}});const kd=Ba({pow_:function(e,t){let n=Ma(e,"base","pow"),s=Ma(t,"exp","pow");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(Rn,r)}});const vd=Ba({sqrt_:function(e){const t={x:Ma(e,"x","sqrt","float32")};return Na.runKernel(ns,t)}});const Id=Ba({square_:function(e){const t=Ma(e,"x","square");return Na.runKernel("Square",{x:t},{})}});function Sd(e,t,n=null){if(0===e.rank)return bd(e);if(1!==e.rank&&null===n)return Sd(cc(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return dc(bd(e),n);if(t===1/0)return xd(bd(e),n);if(t===-1/0)return wd(bd(e),n);if("euclidean"===t||2===t)return vd(dc(kd(bd(e),dp(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return xd(dc(bd(e),n[0]),n[1]-1);if(t===1/0)return xd(dc(bd(e),n[1]),n[0]);if(t===-1/0)return wd(dc(bd(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return vd(dc(Id(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Nd=Ba({norm_:function(e,t="euclidean",n=null,s=!1){const r=Sd(e=Ma(e,"x","norm"),t,n);let a=r.shape;if(s){const t=D(n,e.shape);a=_u(r.shape,t)}return cc(r,a)}});const Td=Ba({squeeze_:function(e,t){const n=Ma(e,"x","squeeze");return cc(n,_(n.shape,t).newShape)}});const Cd=Ba({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,x(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)x(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=ip(e,e.shape[0],0).map((e=>Td(e,[0])));x(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Na.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=ic(dc(ic(n[s],e)),n[s]);e=ad(e,t)}return ep(e,Nd(e,"euclidean"))})));return t?fd(n,0):n}});const $d=Ba({expandDims_:function(e,t=0){const n=Ma(e,"x","expandDims","string_or_numeric");x(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Na.runKernel(At,s,r)}});const Ed=Ba({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Ko([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=cc(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Gp($d(i,0),[n[0],1,1]);if(2===n.length)return Gp($d($d(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Gp($d($d($d(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Ad=Ba({neg_:function(e){const t={x:Ma(e,"x","neg")};return Na.runKernel(kn,t)}});function Rd(e,t=!1){return Na.tidy((()=>{x(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Ed(n),a=Yo(e);const i=Bp([[1]],[1,1]);let o=Yo(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Na.tidy((()=>{const t=ap(a,[e,e],[n-e,1]),l=Nd(t),u=ap(a,[e,e],[1,1]),c=ld(rd(u,0),Bp([[-1]]),Bp([[1]])),h=ad(u,ic(c,l)),p=ep(t,h);o=1===p.shape[0]?Yo(i):np([i,ap(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Ad(ep(bl(c,h),l)),f=ap(a,[e,0],[n-e,s]),m=ic(d,o),g=kl(o);if(0===e)a=ad(f,bl(m,bl(g,f)));else{const t=ad(f,bl(m,bl(g,f)));a=np([ap(a,[0,0],[e,s]),t],0)}const y=kl(m),b=ap(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=ad(b,bl(bl(b,o),y));else{const t=ad(b,bl(bl(b,o),y));r=np([ap(r,[0,0],[n,e]),t],1)}return[o,a,r]})),Ph([t,l,u])}return!t&&n>s&&(r=ap(r,[0,0],[n,s]),a=ap(a,[0,0],[s,s])),[r,a]}))}const Fd=Ba({qr_:function(e,t=!1){if(x(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Rd(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=md(cc(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=Rd(e,t);r.push(n),a.push(s)}));return[cc(fd(r,0),e.shape),cc(fd(a,0),e.shape)]}}});var Dd;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Dd||(Dd={}));const _d=Ba({mean_:function(e,t=null,n=!1){const s={x:Ma(e,"x","mean")},r={axis:t,keepDims:n};return Na.runKernel(fn,s,r)}});const Od=Ba({notEqual_:function(e,t){let n=Ma(e,"a","notEqual","string_or_numeric"),s=Ma(t,"b","notEqual","string_or_numeric");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(vn,r)}});function Md(e,t="float32"){if("complex64"===t){const t=Md(e,"float32"),n=op(e,"float32");return Pa(t,n)}const n=J(I(e),t);return Na.makeTensor(n,e,t)}const Ld=Ba({computeWeightedLoss_:function(e,t,n=Dd.SUM_BY_NONZERO_WEIGHTS){const s=Ma(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Ma(t,"weights","computeWeightedLoss"));const a=null==r?s:ic(s,r);if(n===Dd.NONE)return a;if(n===Dd.SUM)return dc(a);if(n===Dd.MEAN){if(null==r)return _d(a);{const e=s.size/r.size,t=ep(dc(a),dc(r));return e>1?ep(t,dp(e)):t}}if(n===Dd.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ep(dc(a),dp(s.size));{const e=ic(r,Md(s.shape)),t=Xo(dc(Od(e,dp(0))),"float32");return ep(dc(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const zd=Ba({absoluteDifference_:function(e,t,n,s=Dd.SUM_BY_NONZERO_WEIGHTS){const r=Ma(e,"labels","absoluteDifference"),a=Ma(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Ma(n,"weights","absoluteDifference")),w(r.shape,a.shape,"Error in absoluteDifference: ");const o=bd(ad(r,a));return Ld(o,i,s)}});const Bd=Ba({cosineDistance_:function(e,t,n,s,r=Dd.SUM_BY_NONZERO_WEIGHTS){const a=Ma(e,"labels","cosineDistance"),i=Ma(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Ma(s,"weights","cosineDistance")),w(a.shape,i.shape,"Error in cosineDistance: ");const l=dp(1),u=ad(l,dc(ic(a,i),n,!0));return Ld(u,o,r)}});const Pd=Ba({hingeLoss_:function(e,t,n,s=Dd.SUM_BY_NONZERO_WEIGHTS){let r=Ma(e,"labels","hingeLoss");const a=Ma(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Ma(n,"weights","hingeLoss")),w(r.shape,a.shape,"Error in hingeLoss: ");const o=dp(1);r=ad(ic(dp(2),r),o);const l=lc(ad(o,ic(r,a)));return Ld(l,i,s)}});const Wd=Ba({minimum_:function(e,t){let n=Ma(e,"a","minimum"),s=Ma(t,"b","minimum");[n,s]=ga(n,s),"bool"===n.dtype&&(n=Xo(n,"int32"),s=Xo(s,"int32")),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(gn,r)}});const Ud=Ba({huberLoss_:function(e,t,n,s=1,r=Dd.SUM_BY_NONZERO_WEIGHTS){const a=Ma(e,"labels","huberLoss"),i=Ma(t,"predictions","huberLoss");let o=null;null!=n&&(o=Ma(n,"weights","huberLoss")),w(a.shape,i.shape,"Error in huberLoss: ");const l=dp(s),u=bd(ad(i,a)),c=Wd(u,l),h=ad(u,c),p=Jh(ic(dp(.5),Id(c)),ic(l,h));return Ld(p,o,r)}});const Vd=Ba({log_:function(e){const t={x:Ma(e,"x","log","float32")};return Na.runKernel(Jt,t)}});const Gd=Ba({logLoss_:function(e,t,n,s=1e-7,r=Dd.SUM_BY_NONZERO_WEIGHTS){const a=Ma(e,"labels","logLoss"),i=Ma(t,"predictions","logLoss");let o=null;null!=n&&(o=Ma(n,"weights","logLoss")),w(a.shape,i.shape,"Error in logLoss: ");const l=dp(1),u=dp(s),c=Ad(ic(a,Vd(Jh(i,u)))),h=ic(ad(l,a),Vd(Jh(ad(l,i),u))),p=ad(c,h);return Ld(p,o,r)}});const Hd=Ba({squaredDifference_:function(e,t){let n=Ma(e,"a","squaredDifference"),s=Ma(t,"b","squaredDifference");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(ps,r,{})}});const jd=Ba({meanSquaredError_:function(e,t,n,s=Dd.SUM_BY_NONZERO_WEIGHTS){const r=Ma(e,"labels","meanSquaredError"),a=Ma(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Ma(n,"weights","meanSquaredError")),w(r.shape,a.shape,"Error in meanSquaredError: ");const o=Hd(r,a);return Ld(o,i,s)}});const qd=Ba({exp_:function(e){const t={x:Ma(e,"x","exp")};return Na.runKernel(Et,t)}});const Kd=Ba({log1p_:function(e){const t={x:Ma(e,"x","log1p")};return Na.runKernel(Qt,t)}});const Xd=Ba({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Dd.SUM_BY_NONZERO_WEIGHTS){let a=Ma(e,"multiClassLabels","sigmoidCrossEntropy");const i=Ma(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Ma(n,"weights","sigmoidCrossEntropy")),w(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=dp(s),t=dp(1),n=dp(.5);a=Jh(ic(a,ad(t,e)),ic(n,e))}const l=function(e,t){const n=Ma(e,"labels","sigmoidCrossEntropyWithLogits"),s=Ma(t,"logits","sigmoidCrossEntropyWithLogits");w(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=lc(s),a=ic(s,n),i=Kd(qd(Ad(bd(s))));return Jh(ad(r,a),i)}(a,i);return Ld(l,o,r)}});const Yd=Ba({logSumExp_:function(e,t=null,n=!1){const s=Ma(e,"x","logSumExp"),r=D(t,s.shape),a=xd(s,r,!0),i=ad(s,a),o=qd(i),l=dc(o,r),u=Vd(l),c=Jh(cc(a,u.shape),u);if(n){const e=_u(c.shape,r);return cc(c,e)}return c}});const Zd=Ba({softmaxCrossEntropy_:function(e,t,n,s=0,r=Dd.SUM_BY_NONZERO_WEIGHTS){let a=Ma(e,"onehotLabels","softmaxCrossEntropy");const i=Ma(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Ma(n,"weights","softmaxCrossEntropy")),w(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=dp(s),t=dp(1),n=dp(a.shape[1]);a=Jh(ic(a,ad(t,e)),ep(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return kp(((e,t,s)=>{const r=Yd(t,[n],!0),a=ad(Xo(t,"float32"),r);s([e,a]);const i=Ad(ic(a,e));return{value:dc(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=_u(e.shape,[n]);return[ic(cc(e,a),ad(Xo(s,"float32"),qd(r))),ic(cc(e,a),ad(qd(r),Xo(s,"float32")))]}}}))(e,t)}(a,i);return Ld(l,o,r)}});const Jd=Ba({sparseFillEmptyRows_:function(e,t,n,s){const r=Ma(e,"indices","sparseFillEmptyRows","int32"),a=Ma(t,"values","sparseFillEmptyRows"),i=Ma(n,"denseShape","sparseFillEmptyRows","int32"),o=Ma(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=Na.runKernel(os,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Qd=Ba({sparseReshape_:function(e,t,n){const s=Ma(e,"inputIndices","sparseReshape","int32"),r=Ma(t,"inputShape","sparseReshape","int32"),a=Ma(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=Na.runKernel(ls,i);return{outputIndices:o[0],outputShape:o[1]}}});const ef=Ba({sparseSegmentMean_:function(e,t,n){const s=Ma(e,"data","sparseSegmentMean"),r=Ma(t,"indices","sparseSegmentMean","int32"),a=Ma(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Na.runKernel(us,i)}});const tf=Ba({sparseSegmentSum_:function(e,t,n){const s=Ma(e,"data","sparseSegmentSum"),r=Ma(t,"indices","sparseSegmentSum","int32"),a=Ma(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Na.runKernel(cs,i)}});const nf=Ba({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=Ma(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Ma(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},p=Na.runKernel(ms,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const sf=Ba({stringSplit_:function(e,t,n=!0){const s=Ma(e,"input","stringSplit","string"),r=Ma(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=Na.runKernel(gs,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const rf=Ba({stringToHashBucketFast_:function(e,t){const n=Ma(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Na.runKernel(ys,r,s)}});const af=Ba({acos_:function(e){const t={x:Ma(e,"x","acos")};return Na.runKernel(Ae,t)}});const of=Ba({acosh_:function(e){const t={x:Ma(e,"x","acosh")};return Na.runKernel(Re,t)}});const lf=Ba({addN_:function(e){x(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),x(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Ma(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!N(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Na.runKernel(De,s)}});const uf=Ba({all_:function(e,t=null,n=!1){const s={x:Ma(e,"x","all","bool")},r={axis:t,keepDims:n};return Na.runKernel(_e,s,r)}});const cf=Ba({any_:function(e,t=null,n=!1){const s={x:Ma(e,"x","any","bool")},r={axis:t,keepDims:n};return Na.runKernel(Oe,s,r)}});const hf=Ba({argMax_:function(e,t=0){const n={x:Ma(e,"x","argMax")},s={axis:t};return Na.runKernel(Me,n,s)}});const pf=Ba({argMin_:function(e,t=0){const n={x:Ma(e,"x","argMin")},s={axis:t};return Na.runKernel(Le,n,s)}});const df=Ba({asin_:function(e){const t={x:Ma(e,"x","asin")};return Na.runKernel(ze,t)}});const ff=Ba({asinh_:function(e){const t={x:Ma(e,"x","asinh")};return Na.runKernel(Be,t)}});const mf=Ba({atan_:function(e){const t={x:Ma(e,"x","atan")};return Na.runKernel(Pe,t)}});const gf=Ba({atan2_:function(e,t){let n=Ma(e,"a","atan2"),s=Ma(t,"b","atan2");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(Ue,r)}});const yf=Ba({atanh_:function(e){const t={x:Ma(e,"x","atanh")};return Na.runKernel(We,t)}});const bf=Ba({avgPool_:function(e,t,n,s,r){const a=Ma(e,"x","avgPool","float32");x(ec(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=cc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),nc("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Na.runKernel(Ve,l,u);return c=Xo(c,a.dtype),o?cc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const xf=Ba({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Ma(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=cc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),x("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),nc("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=Na.runKernel(He,u,c);return h=Xo(h,o.dtype),l?cc(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const wf=Ba({tanh_:function(e){const t={x:Ma(e,"x","tanh","float32")};return Na.runKernel(ws,t)}});const kf=Ba({basicLSTMCell_:function(e,t,n,s,r,a){const i=Ma(e,"forgetBias","basicLSTMCell"),o=Ma(t,"lstmKernel","basicLSTMCell"),l=Ma(n,"lstmBias","basicLSTMCell"),u=Ma(s,"data","basicLSTMCell"),c=Ma(r,"c","basicLSTMCell"),h=Ma(a,"h","basicLSTMCell"),p=np([u,h],1),d=bl(p,o),f=Jh(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=ap(f,[0,0],y),x=ap(f,[0,g],y),w=ap(f,[0,2*g],y),k=ap(f,[0,3*g],y),v=Jh(ic(hc(b),wf(x)),ic(c,hc(Jh(i,w))));return[v,ic(wf(v),hc(k))]}});const vf=Ba({batchToSpaceND_:function(e,t,n){const s=Ma(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));x(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),x(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),x(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Na.runKernel(Ke,a,i)}});const If=Ba({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;null!=r&&(u=Ma(r,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),x(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),x(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),x(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(e){let t;return t=0===e.rank||1===e.rank?cc(e,[1,1,1,e.size]):2===e.rank?cc(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?cc(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Na.runKernel(Lt,p,d);return cc(f,i.shape)}});const Sf=Ba({batchNorm2d_:function(e,t,n,s,r,a){const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;return null!=r&&(u=Ma(r,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),x(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),x(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),x(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),If(i,o,l,c,u,a)}});const Nf=Ba({batchNorm3d_:function(e,t,n,s,r,a){const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;return null!=r&&(u=Ma(r,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),x(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),x(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),x(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),If(i,o,l,c,u,a)}});const Tf=Ba({batchNorm4d_:function(e,t,n,s,r,a){const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;return null!=r&&(u=Ma(r,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),x(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),x(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),x(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),If(i,o,l,c,u,a)}});const Cf=Ba({broadcastArgs_:function(e,t){const n=Ma(e,"s0","broadcastArgs","int32"),s=Ma(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return Na.runKernel(Ze,r)}});const $f=Ba({ceil_:function(e){const t={x:Ma(e,"x","ceil","float32")};return Na.runKernel(Qe,t)}});const Ef=Ba({clipByValue_:function(e,t,n){const s=Ma(e,"x","clipByValue");x(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Na.runKernel(et,r,a)}});const Af=Ba({concat1d_:function(e){return np(e,0)}});const Rf=Ba({concat2d_:function(e,t){return np(e,t)}});const Ff=Ba({concat3d_:function(e,t){return np(e,t)}});const Df=Ba({concat4d_:function(e,t){return np(e,t)}});const _f=Ba({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Ma(e,"x","conv1d"),l=Ma(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=cc(o,[1,o.shape[0],o.shape[1]])),x(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),x(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),nc("conv1d",s,i),x(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),x(ec(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),x("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=cc(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=cc(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Ip(p,h,[1,n],s,"NHWC",[1,a],i);return cc(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Of=Ba({conv2dTranspose_:function(e,t,n,s,r,a){const i=Ma(e,"x","conv2dTranspose"),o=Ma(t,"filter","conv2dTranspose");return Np(n,i,o,s,r,"NHWC",a)}});const Mf=Ba({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Ma(e,"x","conv3d"),o=Ma(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=cc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),x(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),x(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),x(ec(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Na.runKernel(ot,c,h);return u?cc(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Lf=Ba({conv3DBackpropInput_:function(e,t,n,s,r){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=cc(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];x(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),x(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),x(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),x(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),x(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Na.runKernel(ut,c,h);return o?cc(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const zf=Ba({conv3dTranspose_:function(e,t,n,s,r){const a=Ma(e,"x","conv3dTranspose"),i=Ma(t,"filter","conv3dTranspose");return Lf(n,a,i,s,r)}});const Bf=Ba({cos_:function(e){const t={x:Ma(e,"x","cos","float32")};return Na.runKernel(ct,t)}});const Pf=Ba({cosh_:function(e){const t={x:Ma(e,"x","cosh","float32")};return Na.runKernel(ht,t)}});const Wf=Ba({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Ma(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Na.runKernel(pt,r,a)}});const Uf=Ba({denseBincount_:function(e,t,n,s=!1){const r=Ma(e,"x","denseBincount"),a=Ma(t,"weights","denseBincount");x("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),x(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Na.runKernel(ft,i,o)}});const Vf=Ba({depthToSpace_:function(e,t,n="NHWC"){const s=Ma(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];x(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),x(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),x(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),x(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Na.runKernel(mt,o,l)}});const Gf=Ba({diag_:function(e){const t={x:Ma(e,"x","diag")};return Na.runKernel(xt,t)}});const Hf=Ba({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Ma(e,"x","dilation2d"),o=Ma(t,"filter","dilation2d");x(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),x(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),x("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=cc(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Na.runKernel(wt,c,h);return u?cc(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const jf=Ba({equal_:function(e,t){let n=Ma(e,"a","equal","string_or_numeric"),s=Ma(t,"b","equal","string_or_numeric");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel($t,r)}});const qf=Ba({divNoNan_:function(e,t){let n=Ma(e,"a","div"),s=Ma(t,"b","div");[n,s]=ga(n,s);const r=ep(n,s),a=lp(r),i=jf(s,a);return ld(i,a,r)}});const Kf=Ba({dot_:function(e,t){const n=Ma(e,"t1","dot"),s=Ma(t,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(x(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=cc(n,[1,-1]),t=cc(s,[-1,1]),r=bl(e,t);return cc(r,[])}if(1===n.rank&&2===s.rank){const e=cc(n,[1,-1]),t=cc(s,[s.shape[0],s.shape[1]]),r=bl(e,t);return cc(r,[r.size])}if(2===n.rank&&1===s.rank){const e=cc(s,[-1,1]),t=bl(n,e);return cc(t,[t.size])}{const e=cc(s,[s.shape[0],s.shape[1]]);return bl(n,e)}}});const Xf=Ba({einsum_:function(e,...t){const n=t.map(((e,t)=>Ma(e,`tensors${t}`,"einsum"))),s={equation:e};return Na.runKernel(St,n,s)}});const Yf=Ba({erf_:function(e){let t=Ma(e,"x","erf");x("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Xo(t,"float32"));const n={x:t};return Na.runKernel(Ct,n)}});const Zf=Ba({expm1_:function(e){const t={x:Ma(e,"x","expm1")};return Na.runKernel(Rt,t)}});const Jf=Ba({floor_:function(e){const t={x:Ma(e,"x","floor","float32")};return Na.runKernel(Ot,t)}});const Qf=Ba({gather_:function(e,t,n=0,s=0){const r={x:Ma(e,"x","gather"),indices:Ma(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Na.runKernel(zt,r,a)}});const em=Ba({isFinite_:function(e){const t={x:Ma(e,"x","isFinite")};return Na.runKernel(Ht,t)}});const tm=Ba({isInf_:function(e){const t={x:Ma(e,"x","isInf")};return Na.runKernel(jt,t)}});const nm=Ba({isNaN_:function(e){const t={x:Ma(e,"x","isNaN")};return Na.runKernel(qt,t)}});const sm=Ba({less_:function(e,t){let n=Ma(e,"a","less","string_or_numeric"),s=Ma(t,"b","less","string_or_numeric");[n,s]=ga(n,s),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(Xt,r)}});function rm(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Na.runKernel(Zt,{},s)}const am=Ba({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Ma(e,"x","localResponseNormalization");x(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),x(T(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=cc(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Na.runKernel(rn,l,u);return o?cc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const im=Ba({softplus_:function(e){const t={x:Ma(e,"x","softplus")};return Na.runKernel(ts,t)}});const om=Ba({logSigmoid_:function(e){const t=Ma(e,"x","logSigmoid");return kp((e=>({value:Ad(im(Ad(e))),gradFunc:t=>ic(t,hc(Ad(e)))})))(t)}});const lm=Ba({logSoftmax_:function(e,t=-1){const n=Ma(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return kp(((e,n)=>{const s=xd(e,t,!0),r=ad(e,s),a=ad(Xo(r,"float32"),Vd(dc(qd(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=qd(s);return ad(e,ic(dc(e,t,!0),r))}}}))(n)}});const um=Ba({logicalNot_:function(e){const t={x:Ma(e,"x","logicalNot","bool")};return Na.runKernel(tn,t)}});const cm=Ba({logicalOr_:function(e,t){const n=Ma(e,"a","logicalOr","bool"),s=Ma(t,"b","logicalOr","bool");Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(nn,r)}});const hm=Ba({logicalXor_:function(e,t){const n=Ma(e,"a","logicalXor","bool"),s=Ma(t,"b","logicalXor","bool");return Tl(n.shape,s.shape),dd(cm(e,t),um(dd(e,t)))}});const pm=Ba({maxPool_:function(e,t,n,s,r){const a=Ma(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=cc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),x(ec(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),nc("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Na.runKernel(un,l,u);return o?cc(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const dm=Ba({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Ma(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=cc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),x("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),nc("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=Na.runKernel(hn,u,c);return l?cc(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const fm=Ba({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Ma(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Na.runKernel(dn,a,i);return{result:o[0],indexes:o[1]}}});const mm=Ba({maximum_:function(e,t){let n=Ma(e,"a","maximum"),s=Ma(t,"b","maximum");[n,s]=ga(n,s),"bool"===n.dtype&&(n=Xo(n,"int32"),s=Xo(s,"int32")),Tl(n.shape,s.shape);const r={a:n,b:s};return Na.runKernel(ln,r)}});function gm(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=Ma(e,"x","meshgrid",e instanceof ea?e.dtype:"float32");if(void 0===t)return[s];let r=Ma(t,"y","meshgrid",t instanceof ea?t.dtype:"float32");const a=I(s.shape),i=I(r.shape);return"xy"===n?(s=cc(s,[1,-1]),r=cc(r,[-1,1]),[bl(Md([i,1],s.dtype),s),bl(r,Md([1,a],r.dtype))]):(s=cc(s,[-1,1]),r=cc(r,[1,-1]),[bl(s,Md([1,i],s.dtype)),bl(Md([a,1],r.dtype),r)])}const ym=Ba({mirrorPad_:function(e,t,n){x("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Ma(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");x(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)x(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),x(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Na.runKernel(yn,i,a)}});const bm=Ba({mod_:function(e,t){let n=Ma(e,"a","mod"),s=Ma(t,"b","mod");[n,s]=ga(n,s);const r={a:n,b:s};return Na.runKernel(bn,r)}});const xm=Ba({moments_:function(e,t=null,n=!1){const s=D(t,(e=Ma(e,"x","moments")).shape),r=_d(e,s,n);let a=r.shape;n||(a=_u(r.shape,s));const i=Id(ad(Xo(e,"float32"),cc(r,a)));return{mean:r,variance:_d(i,s,n)}}});const wm=Ba({multiRNNCell_:function(e,t,n,s){const r=Ma(t,"data","multiRNNCell"),a=La(n,"c","multiRNNCell"),i=La(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const km=Ba({multinomial_:function(e,t,n,s=!1){const r=Ma(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?cc(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Na.runKernel(xn,o,l);return 1===i?cc(u,[u.size]):u}});const vm=Ba({onesLike_:function(e){const t={x:Ma(e,"x","onesLike")};return Na.runKernel(Tn,t)}});const Im=Ba({outerProduct_:function(e,t){const n=Ma(e,"v1","outerProduct"),s=Ma(t,"v2","outerProduct");x(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=cc(n,[-1,1]),a=cc(s,[1,-1]);return bl(r,a)}});const Sm=Ba({pad_:function(e,t,n=0){const s=Ma(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Na.runKernel(En,a,r)}});const Nm=Ba({pad1d_:function(e,t,n=0){return x(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Sm(e,[t],n)}});const Tm=Ba({pad2d_:function(e,t,n=0){return x(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Sm(e,t,n)}});const Cm=Ba({pad3d_:function(e,t,n=0){return x(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Sm(e,t,n)}});const $m=Ba({pad4d_:function(e,t,n=0){return x(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Sm(e,t,n)}});const Em=Ba({spaceToBatchND_:function(e,t,n){const s=Ma(e,"x","spaceToBatchND");x(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),x(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),x(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Na.runKernel(rs,r,a)}});const Am=Ba({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=Ma(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=cc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(ec(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=Gu(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:Em(l,h,f),b=("avg"===n?()=>bf(y,t,a,g,i):()=>pm(y,t,a,g,i))(),w=d?b:vf(b,h,m);return u?cc(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const Rm=Ba({prod_:function(e,t=null,n=!1){let s=Ma(e,"x","prod");"bool"===s.dtype&&(s=Xo(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Na.runKernel(Dn,r,a)}});const Fm=Ba({rand_:function(e,t,n){const s=I(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Na.makeTensor(r,e,n)}});var Dm={},_m=a("gj6Et"),Om=a("4gDjz"),Mm=a("HLBv4"),Lm=a("ktaoY"),zm=a("gBs5C"),Bm=a("ktLSh"),Pm={};!function(e,t){var n,s=this,r=256,i=t.pow(r,6),o=t.pow(2,52),l=2*o,u=255;function c(a,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[a,m(e)]:null==a?function(){try{var t;return n&&(t=n.randomBytes)?t=t(r):(t=new Uint8Array(r),(s.crypto||s.msCrypto).getRandomValues(t)),m(t)}catch(t){var a=s.navigator,i=a&&a.plugins;return[+new Date,s,i,s.screen,m(e)]}}():a,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*r,t*=r,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),e),(u.pass||c||function(e,n,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(t.random=e,n):e})(x,y,"global"in u?u.global:this==t,u.state)}function h(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=u&a+1],n=n*r+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(t.seedrandom=c,f(t.random(),e),Pm){Pm=c;try{n=a("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd&&define((function(){return c}))}([],Math),Pm.alea=_m,Pm.xor128=Om,Pm.xorwow=Mm,Pm.xorshift7=Lm,Pm.xor4096=zm,Pm.tychei=Bm,Dm=Pm;class Wm{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Dm.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Um{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=Dm.alea(r.toString()),this.randn=new Wm(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Vm{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Dm.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Gm=Ba({randomGamma_:function(e,t,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new Um(t,n,s,r),i=Ko(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Hm=Ba({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Wm(t,n,s,!1,r),i=Ko(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const jm=Ba({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Ko(e,s),i=new Vm(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});const qm=Ba({reciprocal_:function(e){const t={x:Ma(e,"x","reciprocal")};return Na.runKernel(Mn,t)}});const Km=Ba({reverse1d_:function(e){const t=Ma(e,"x","reverse");return x(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),pp(t,0)}});const Xm=Ba({reverse2d_:function(e,t){const n=Ma(e,"x","reverse");return x(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),pp(n,t)}});const Ym=Ba({reverse3d_:function(e,t){const n=Ma(e,"x","reverse");return x(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),pp(n,t)}});const Zm=Ba({reverse4d_:function(e,t){const n=Ma(e,"x","reverse");return x(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),pp(n,t)}});const Jm=Ba({rsqrt_:function(e){const t={x:Ma(e,"x","rsqrt","float32")};return Na.runKernel(jn,t)}});const Qm=Ba({selu_:function(e){const t={x:Ma(e,"x","selu")};return Na.runKernel(Xn,t)}});const eg=Ba({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Ma(e,"x","separableConv2d"),l=Ma(t,"depthwiseFilter","separableConv2d"),u=Ma(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=cc(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),x(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),x(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),x(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];x(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=Cp(c,l,s,r,i,a),m=Ip(f,u,1,"valid",i);return h?cc(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const tg=async function(e,t){const n=Ma(e,"x","setdiff1d"),s=Ma(t,"y","setdiff1d");x(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),x(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),x(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new Yr([o],n.dtype),u=new Yr([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const ng=Ba({sign_:function(e){const t={x:Ma(e,"x","sign")};return Na.runKernel(Qn,t)}});const sg=Ba({sin_:function(e){const t={x:Ma(e,"x","sin","float32")};return Na.runKernel(Zn,t)}});const rg=Ba({sinh_:function(e){const t={x:Ma(e,"x","sinh")};return Na.runKernel(Jn,t)}});const ag=Ba({slice1d_:function(e,t,n){const s=Ma(e,"x","slice1d");return x(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),ap(s,[t],[n])}});const ig=Ba({slice2d_:function(e,t,n){const s=Ma(e,"x","slice2d");return x(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),ap(s,t,n)}});const og=Ba({slice3d_:function(e,t,n){const s=Ma(e,"x","slice3d");return x(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),ap(s,t,n)}});const lg=Ba({slice4d_:function(e,t,n){const s=Ma(e,"x","slice4d");return x(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),ap(s,t,n)}});const ug=Ba({softmax_:function(e,t=-1){const n=Ma(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Na.runKernel(is,s,r)}});const cg=Ba({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Ma(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Na.runKernel(fs,u,c)}});const hg=Ba({tan_:function(e){const t={x:Ma(e,"x","tan","float32")};return Na.runKernel(xs,t)}});function pg(e,t,n){if(k(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Da(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Wa(e,t,s,n)}function dg(e,t,n){if(k(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Da(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Wa(e,t,s,n)}function fg(e,t,n){if(k(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Da(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Wa(e,t=t||s,s,n)}const mg=Ba({topk_:function(e,t=1,n=!0){const s=Ma(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Na.runKernel(vs,a,i);return{values:o,indices:l}}});const gg=Ba({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Wm(t,n,s,!0,r),i=Ko(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const yg=Ba({unique_:function(e,t=0){const n=Ma(e,"x","unique","string_or_numeric");x(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Na.runKernel(Ns,s,r);return{values:a,indices:i}}});const bg=Ba({unsortedSegmentSum_:function(e,t,n){const s=Ma(e,"x","unsortedSegmentSum"),r=Ma(t,"segmentIds","unsortedSegmentSum","int32");x(T(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Na.runKernel(Cs,a,i)}});function xg(e,t=!0,n,s){return Na.makeVariable(e,t,n,s)}const wg=async function(e){const t=Ma(e,"condition","whereAsync","bool"),n=await t.data(),s=Eh(t.shape,n);return e!==t&&t.dispose(),s};var kg={};n(kg,"booleanMaskAsync",(()=>vg));const vg=async function(e,t,n){const s=Ma(e,"tensor","boolMask"),r=Ma(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;x(i>0,(()=>"mask cannot be scalar")),w(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=cc(s,u),h=cc(r,[-1]),p=await wg(h),d=Td(p,[1]),f=Qf(c,d,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};var Ig={};n(Ig,"movingAverage",(()=>Sg));const Sg=Ba({movingAverage_:function(e,t,n,s,r=!0){const a=Ma(e,"v","movingAverage"),i=Ma(t,"x","movingAverage"),o=Ma(n,"decay","movingAverage");ya(a,i),x(N(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=dp(1),u=ad(l,o);let c=ic(ad(i,a),u);if(r){x(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Ma(s,"step","movingAverage");c=ep(c,ad(l,kd(o,e)))}return Jh(a,c)}});var Ng={};n(Ng,"scatterND",(()=>Tg));const Tg=Ba({scatterND_:function(e,t,n){const s=Ma(e,"indices","scatterND","int32"),r=Ma(t,"updates","scatterND");Bl(r,s,n);const a={indices:s,updates:r},i={shape:n};return Na.runKernel(qn,a,i)}});var Cg={};n(Cg,"sparseToDense",(()=>$g));const $g=Ba({sparseToDense_:function(e,t,n,s=0){const r=Ma(e,"sparseIndices","sparseToDense","int32"),a=Ma(t,"sparseValues","sparseToDense"),i=Ma(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Na.runKernel(hs,o,l)}});var Eg={};n(Eg,"gatherND",(()=>Ag));const Ag=Ba({gatherND_:function(e,t){const n=Ma(t,"indices","gatherND","int32"),s={params:Ma(e,"x","gatherND","string_or_numeric"),indices:n};return Na.runKernel(Bt,s)}});var Rg={};n(Rg,"dropout",(()=>Fg));const Fg=Ba({dropout_:function(e,t,n,s){const r=Ma(e,"x","dropout");if(x("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),x(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ea?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(N(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=ep(Jf(Jh(jm(a,0,1,"float32",s),i)),i);return ic(r,o)}});var Dg={};n(Dg,"inTopKAsync",(()=>_g));const _g=async function(e,t,n=1){const s=Ma(e,"predictions","inTopK"),r=Ma(t,"targets","inTopK");x(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),x(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),w(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];x(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=O("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),Ua(c,r.shape,"bool")},Og={fft:up,ifft:hp,rfft:cp,irfft:fp},Mg={hammingWindow:Mp,hannWindow:Lp,frame:Pp,stft:Wp},Lg={flipLeftRight:Vp,grayscaleToRGB:Hp,resizeNearestNeighbor:td,resizeBilinear:ed,rotateWithOffset:jp,cropAndResize:Up,nonMaxSuppression:Kp,nonMaxSuppressionAsync:Xp,nonMaxSuppressionWithScore:Yp,nonMaxSuppressionWithScoreAsync:Zp,nonMaxSuppressionPadded:Jp,nonMaxSuppressionPaddedAsync:Qp,threshold:cd,transform:hd},zg={bandPart:gd,gramSchmidt:Cd,qr:Fd},Bg={absoluteDifference:zd,computeWeightedLoss:Ld,cosineDistance:Bd,hingeLoss:Pd,huberLoss:Ud,logLoss:Gd,meanSquaredError:jd,sigmoidCrossEntropy:Xd,softmaxCrossEntropy:Zd},Pg={sparseFillEmptyRows:Jd,sparseReshape:Qd,sparseSegmentMean:ef,sparseSegmentSum:tf},Wg={stringNGrams:nf,stringSplit:sf,stringToHashBucketFast:rf};e(tp,kg),e(tp,wl),e(tp,yd),e(tp,Ig),e(tp,Ng),e(tp,Cg),e(tp,Eg),e(tp,Rg),e(tp,Fp),e(tp,Dg);class Ug extends iu{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return Ph(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return wp(e,t)}dispose(){null!=this.iterations_&&Ph(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:dp(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ug,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Vg extends Ug{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Na.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Na.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Bh((()=>lp(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Bh((()=>lp(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Bh((()=>{const e=Jh(ic(a,this.rho),ic(Id(r),1-this.rho)),t=ic(ep(vd(Jh(i,this.epsilon)),vd(Jh(a,this.epsilon))),r),n=Jh(ic(i,this.rho),ic(Id(t),1-this.rho));a.assign(e),i.assign(n);const o=Jh(ic(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ph(this.accumulatedGrads.map((e=>e.variable))),Ph(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Vg.className="Adadelta",lu(Vg);class Gg extends Ug{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Na.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Bh((()=>zp(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;Bh((()=>{const e=Jh(a,Id(r));a.assign(e);const t=Jh(ic(ep(r,vd(Jh(e,Na.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ph(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Gg.className="Adagrad",lu(Gg);class Hg extends Ug{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Bh((()=>{this.accBeta1=dp(t).variable(),this.accBeta2=dp(n).variable()})),null==s&&(this.epsilon=Na.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Bh((()=>{const n=ad(1,this.accBeta1),s=ad(1,this.accBeta2);t.forEach(((t,r)=>{const a=Na.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Bh((()=>lp(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:Bh((()=>lp(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=Jh(ic(o,this.beta1),ic(i,1-this.beta1)),c=Jh(ic(l,this.beta2),ic(Id(i),1-this.beta2)),h=ep(u,n),p=ep(c,s);o.assign(u),l.assign(c);const d=Jh(ic(ep(h,Jh(vd(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(ic(this.accBeta1,this.beta1)),this.accBeta2.assign(ic(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ph(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Ph(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Bh((()=>{this.accBeta1.assign(kd(this.beta1,this.iterations_+1)),this.accBeta2.assign(kd(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Hg.className="Adam",lu(Hg);class jg extends Ug{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Bh((()=>{this.iteration=dp(0).variable(),this.accBeta1=dp(t).variable()})),null==s&&(this.epsilon=Na.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Bh((()=>{const n=ad(1,this.accBeta1),s=ep(-this.learningRate,Jh(ic(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Na.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:lp(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:lp(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=Jh(ic(o,this.beta1),ic(i,1-this.beta1)),c=ic(l,this.beta2),h=bd(i),p=mm(c,h);o.assign(u),l.assign(p);const d=Jh(ic(ep(s,n),ep(u,Jh(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(Jh(this.iteration,1)),this.accBeta1.assign(ic(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ph(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Ph(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}jg.className="Adamax",lu(jg);class qg extends Ug{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Na.registeredVariables[t];Bh((()=>{const e=Jh(ic(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Wh(dp(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}qg.className="SGD",lu(qg);class Kg extends qg{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=dp(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Na.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Bh((()=>lp(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Bh((()=>{let e;const t=Jh(ic(this.m,r),a);e=this.useNesterov?Jh(ic(this.c,Jh(a,ic(t,this.m))),s):Jh(ic(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ph(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Kg.className="Momentum",lu(Kg);class Xg extends Ug{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Na.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Na.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Bh((()=>lp(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Bh((()=>lp(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Bh((()=>lp(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Bh((()=>{const e=Jh(ic(i,this.decay),ic(Id(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Jh(ic(t,this.decay),ic(a,1-this.decay)),l=ep(ic(a,this.learningRate),vd(ad(e,Jh(Id(r),this.epsilon)))),u=Jh(ic(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=ad(s,u);s.assign(c)}else{const e=Jh(ic(i,this.decay),ic(Id(a),1-this.decay)),t=Jh(ic(o,this.momentum),ep(ic(a,this.learningRate),vd(Jh(e,this.epsilon))));i.assign(e),o.assign(t);const n=ad(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ph(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Ph(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Ph(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Xg.className="RMSProp",lu(Xg);class Yg{static sgd(e){return new qg(e)}static momentum(e,t,n=!1){return new Kg(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Xg(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Hg(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Vg(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new jg(e,t,n,s,r)}static adagrad(e,t=.1){return new Gg(e,t)}}var Zg={};n(Zg,"train",(()=>Jg));const Jg={sgd:Yg.sgd,momentum:Yg.momentum,adadelta:Yg.adadelta,adagrad:Yg.adagrad,rmsprop:Yg.rmsprop,adamax:Yg.adamax,adam:Yg.adam},Qg="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function ey(){return new Promise((e=>Qg((()=>e()))))}e(Jo,tp),e(Jo,Zg),e(Jo,Ah),e(Jo,Os),e(Jo,$e),e(i,Jo);const ty={kernelName:Ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,pc(Xo(n,"float32"),-1))}}},ny={kernelName:Ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Id(Xo(n,"float32")),s=vd(ad(dp(1),t));return Ad(ep(e,s))}}}},sy={kernelName:Re,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=vd(ad(Id(Xo(n,"float32")),1));return ep(e,t)}}}},ry={kernelName:Fe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{let t=e;const s=Nl(n.shape,r);return s.length>0&&(t=dc(t,s)),cc(t,n.shape)},b:()=>{let t=e;const n=Nl(s.shape,r);return n.length>0&&(t=dc(t,n)),cc(t,s.shape)}}}},ay={kernelName:De,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},iy={kernelName:Me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>lp(n)}}},oy={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>lp(n)}}},ly={kernelName:ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,vd(ad(dp(1),Id(Xo(n,"float32")))))}}},uy={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=vd(Jh(dp(1),Id(Xo(n,"float32"))));return ep(e,t)}}}},cy={kernelName:Ue,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{const t=Jh(Id(n),Id(s));let a=ic(e,ep(s,t));const i=Nl(n.shape,r);return i.length>0&&(a=dc(a,i)),cc(a,n.shape)},b:()=>{const t=Jh(Id(n),Id(s));let a=Ad(ic(e,ep(n,t)));const i=Nl(s.shape,r);return i.length>0&&(a=dc(a,i)),cc(a,s.shape)}}}},hy={kernelName:Pe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,Jh(Id(Xo(n,"float32")),1))}}},py={kernelName:We,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,ad(dp(1),Id(Xo(n,"float32"))))}}};const dy=Ba({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Ma(e,"dy","avgPool3dGrad"),o=Ma(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=cc(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=cc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),x(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),nc("avgPool3dGrad",r,a);const h={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},d=Na.runKernel(je,h,p);return c?cc(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),fy={kernelName:He,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>dy(e,s,r,a,i,o)}}};const my=Ba({avgPoolGrad_:function(e,t,n,s,r){const a=Ma(e,"dy","avgPoolGrad"),i=Ma(t,"input","avgPoolGrad");x(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=cc(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=cc(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),x(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Na.runKernel(Ge,c,h);return u?cc(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),gy={kernelName:Ve,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>my(e,s,r,a,i)}}},yy={kernelName:qe,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>bl(e,r,!1,!1),b:()=>bl(e,s,!0,!1)}:a&&!i?{a:()=>bl(r,e,!1,!0),b:()=>bl(s,e,!1,!1)}:{a:()=>bl(r,e,!0,!0),b:()=>bl(e,s,!0,!0)}:{a:()=>bl(e,r,!1,!0),b:()=>bl(s,e,!0,!1)}}},by={kernelName:Ke,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>Em(e,s,r)}}},xy={kernelName:Ye,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>dc(e,o,!0)}}},wy={kernelName:Je,gradFunc:e=>({x:()=>e.clone()})},ky={kernelName:Qe,gradFunc:e=>({x:()=>lp(e)})},vy={kernelName:et,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>ld(dd(pd(s,r),sd(s,a)),e,lp(e))}}},Iy={kernelName:nt,inputsToSave:["x"],gradFunc:ty.gradFunc},Sy={kernelName:st,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=D(r,t[0].shape)[0],i=s.map((e=>e[a]));return ip(e,i,a).map((e=>()=>e))}},Ny={kernelName:rt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return x(Qu(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Np(s.shape,e,r,i,o,l),filter:()=>Sp(s,e,r.shape,i,o,l)}}},Ty={kernelName:it,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Ip(e,r,a,i,o,1,l),filter:()=>Sp(e,s,r.shape,a,i,o,l)}}};const Cy=Ba({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=cc(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=cc(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),x(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),x(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),x(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),x(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),x(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Na.runKernel(lt,o,l)}}),$y={kernelName:ot,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;x(Qu(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Lf(i.shape,e,o,r,a),filter:()=>Cy(i,e,o.shape,r,a)}}},Ey={kernelName:ct,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(Ad(sg(Xo(n,"float32"))),e)}}},Ay={kernelName:ht,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(rg(Xo(n,"float32")),e)}}},Ry={kernelName:pt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Mu([r],s.rank);let n=Wf(e,r,a,!i);return null!=t&&(n=kl(n,t)),n}}}},Fy={kernelName:gt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;x(Qu(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return x(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),x(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),x(ec(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),nc("depthwiseConv2d",a,i),{x:()=>Ep(l.shape,e,u,r,a,o,i),filter:()=>$p(l,e,u.shape,r,a,o,i)}}},Dy={kernelName:wt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Na.runKernel(kt,a,n),filter:()=>Na.runKernel(vt,i,n)}}},_y={kernelName:Nt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Na.runKernel(Tt,s)}}},Oy={kernelName:Ct,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=ic(qd(Ad(Id(n))),2/Math.sqrt(Math.PI));return{x:()=>ic(e,s)}}},My={kernelName:Et,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,n)}}},Ly={kernelName:At,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>cc(e,n.shape)}}},zy={kernelName:Rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,qd(n))}}},By={kernelName:Ot,gradFunc:e=>({x:()=>lp(e)})},Py={kernelName:Mt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{const t=ep(e,Xo(s,"float32")),a=Nl(n.shape,r);return a.length>0?cc(dc(t,a),n.shape):t},b:()=>{let t=ic(e,Xo(n,"float32"));const a=Nl(s.shape,r);a.length>0&&(t=cc(dc(t,a),s.shape));const i=Id(s);return Ad(ep(t,Xo(i,"float32")))}}}},Wy={kernelName:Lt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?dp(1):o,u=Nl(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=ad(r,a),p=ic(e,l),d=Jm(Jh(i,dp(s))),f=ic(ic(ic(d,d),d),dp(-.5));return{x:()=>1===a.rank?cc(ic(ic(e,Gp(cc(d,[1,1,1,a.shape[0]]),c)),l),r.shape):cc(ic(ic(e,d),l),r.shape),mean:()=>{let e=ic(ic(d,dp(-1)),p);return 1===a.rank&&(e=dc(e,u)),cc(e,a.shape)},variance:()=>{let e=ic(ic(f,h),p);return 1===a.rank&&(e=dc(e,u)),cc(e,a.shape)},scale:()=>{const t=ic(h,d);let n=ic(e,t);return 1===a.rank&&(n=dc(n,u)),cc(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=dc(t,u)),cc(t,a.shape)}}}},Uy={kernelName:zt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=D(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Vy(0,l),p=Vy(l+1,l+1+c),d=Gy([o,[n],u]),f=cc(e,d),m=cc(r,[n]),g=Gy([[l],h,p]),y=kl(f,g);let b=bg(y,m,s.shape[i]);const x=Lu(g);return b=kl(b,x),b},indices:()=>r}}};function Vy(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Gy(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Hy={kernelName:Wt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>lp(n),b:()=>lp(s)}}},jy={kernelName:Ut,gradFunc:e=>({x:()=>Xo(e,"float32")})},qy={kernelName:Ht,gradFunc:e=>({x:()=>lp(e)})},Ky={kernelName:jt,gradFunc:e=>({x:()=>lp(e)})},Xy={kernelName:qt,gradFunc:e=>({x:()=>lp(e)})},Yy={kernelName:Kt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=rd(s,0);return{x:()=>ld(a,e,ic(e,r))}}},Zy={kernelName:Qt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,Jh(n,1))}}},Jy={kernelName:Jt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,Xo(n,"float32"))}}},Qy={kernelName:sn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=qd(s);return ad(e,ic(dc(e,r,!0),t))}}}};const eb=Ba({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Na.runKernel(an,o,l)}}),tb={kernelName:rn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>eb(s,r,e,a,i,o,l)}}};function nb(e,t,n,s){return t.rank<n.rank&&(t=cc(t,_u(t.shape,s))),e.rank<n.rank&&(e=cc(e,_u(e.shape,s))),{x:()=>ic(e,Xo(jf(n,t),e.dtype))}}const sb={kernelName:on,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=nb(e,t[1],a,D(r,a.shape));return{x:()=>i.x()}}},rb={kernelName:ln,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>ic(e,Xo(pd(n,s),"float32")),b:()=>ic(e,Xo(sm(n,s),"float32"))}}};const ab=Ba({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Ma(e,"dy","maxPool3dGrad"),l=Ma(t,"input","maxPool3dGrad"),u=Ma(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=cc(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=cc(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=cc(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),x(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),x(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),x(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),nc("maxPool3dGrad",a,i);const f={dy:c,input:h,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=Na.runKernel(pn,f,m);return d?cc(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),ib={kernelName:hn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>ab(e,s,r,a,i,o,l)}}};const ob=Ba({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Ma(e,"dy","maxPoolGrad"),l=Ma(t,"input","maxPoolGrad"),u=Ma(n,"output","maxPoolGrad");x(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),x(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),x(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),nc("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Na.runKernel(cn,c,h)}}),lb={kernelName:En,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>ap(e,a,s.shape)}}},ub={kernelName:rs,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>vf(e,s,r)}}},cb={kernelName:as,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>np(e,s)}}};const hb=[ty,ny,sy,ry,ay,iy,oy,ly,uy,cy,hy,py,fy,gy,yy,by,xy,wy,ky,vy,Iy,Sy,Ty,Ny,$y,Ey,Ay,Ry,Fy,Dy,{kernelName:It,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{const t=ep(e,Xo(s,"float32")),a=Nl(n.shape,r);return a.length>0?cc(dc(t,a),n.shape):t},b:()=>{let t=ic(e,Xo(n,"float32"));const a=Nl(s.shape,r);a.length>0&&(t=cc(dc(t,a),s.shape));const i=Id(s);return Ad(ep(t,Xo(i,"float32")))}}}},_y,Oy,My,Ly,zy,Py,By,Wy,Uy,Hy,jy,qy,Ky,Xy,Yy,Zy,Jy,Qy,tb,sb,sb,rb,ib,{kernelName:un,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>ob(e,s,r,a,i,o)}}},{kernelName:fn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=D(r,s.shape),i=I(Du(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=cc(e,t);return ep(ic(n,Md(s.shape,"float32")),i)}}}},{kernelName:mn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=nb(e,i,a,D(r,a.shape));return{x:()=>o.x()}}},{kernelName:gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>ic(e,Xo(sd(n,s),"float32")),b:()=>ic(e,Xo(rd(n,s),"float32"))}}},{kernelName:yn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>ap(e,a,s.shape)}}},{kernelName:bn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{const t=Nl(n.shape,r);return t.length>0?cc(dc(e,t),n.shape):e},b:()=>{const t=ic(e,Ad(Jf(ep(n,s)))),a=Nl(s.shape,r);return a.length>0?cc(dc(t,a),s.shape):t}}}},{kernelName:wn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{const t=ic(e,Xo(s,"float32")),a=Nl(n.shape,r);return a.length>0?cc(dc(t,a),n.shape):t},b:()=>{const t=ic(e,Xo(n,"float32")),a=Nl(s.shape,r);return a.length>0?cc(dc(t,a),s.shape):t}}}},{kernelName:kn,gradFunc:e=>({x:()=>Ad(e)})},{kernelName:Cn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>op(n.shape,"float32")}}},{kernelName:Tn,gradFunc:e=>({x:()=>lp(e)})},{kernelName:$n,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return md(e,s).map((e=>()=>e))}},lb,lb,{kernelName:Rn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Tl(a.shape,i.shape);return{a:()=>{const t=Xo(i,"float32");let n=ic(e,ic(t,kd(a,ad(t,dp(1)))));const s=Nl(a.shape,o);return s.length>0&&(n=dc(n,s)),cc(n,a.shape)},b:()=>{const t=rd(a,0),n=ld(t,Vd(a),lp(a));let s=ic(e,ic(r,n));const l=Nl(i.shape,o);return l.length>0&&(s=dc(s,l)),cc(s,i.shape)}}}},{kernelName:Fn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=rd(n,0);return{x:()=>ld(r,e,ic(e,s)),alpha:()=>{let t=ld(r,lp(e),ic(e,n));const a=Nl(s.shape,e.shape);return a.length>0&&(t=dc(t,a)),cc(t,s.shape)}}}},{kernelName:Mn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,Ad(Id(n)))}}},{kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=ic(sd(n,6),pc(n));return{x:()=>ic(e,Xo(s,"float32"))}}},{kernelName:Ln,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,Xo(pc(n),"float32"))}}},{kernelName:zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>cc(e,n.shape)}}},{kernelName:Wn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Na.runKernel(Un,r,n)}}},{kernelName:Bn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Na.runKernel(Pn,r,n)}}},{kernelName:Gn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=D(s,e.shape);return{x:()=>pp(e,r)}}},{kernelName:Hn,gradFunc:e=>({x:()=>lp(e)})},{kernelName:jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ad(ep(e,ic(kd(n,1.5),2)))}}},{kernelName:Kn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Xo(lp(n),"float32"),t:()=>ic(e,Xo(n,e.dtype)),e:()=>ic(e,Xo(um(n),e.dtype))}}},{kernelName:Xn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=rd(n,dp(0)),s=dp(Cc),r=dp($c),a=ic(e,r),i=ic(ic(e,s),qd(Xo(n,"float32")));return ld(t,a,i)}}}},{kernelName:es,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,ic(n,ad(dp(1),n)))}}},{kernelName:Qn,gradFunc:e=>({x:()=>lp(e)})},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(Bf(Xo(n,"float32")),e)}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(Pf(Xo(n,"float32")),e)}}},{kernelName:Yn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=nu(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>Sm(e,u)}}},{kernelName:is,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=ic(e,s);return{logits:()=>ad(a,ic(dc(a,[r],true),s))}}},{kernelName:ts,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,hc(n))}}},ub,ub,cb,cb,{kernelName:ns,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,ic(vd(Xo(n,"float32")),2))}}},{kernelName:ps,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=dp(2);return{a:()=>ic(e,ic(r,ad(n,s))),b:()=>ic(e,ic(r,ad(s,n)))}}},{kernelName:ds,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(e,ic(Xo(n,"float32"),2))}}},{kernelName:Es,gradFunc:e=>({x:()=>lp(e)})},{kernelName:bs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Tl(n.shape,s.shape);return{a:()=>{let t=e;const s=Nl(n.shape,r);return s.length>0&&(t=dc(t,s)),cc(t,n.shape)},b:()=>{let t=e;const n=Nl(s.shape,r);return n.length>0&&(t=dc(t,n)),cc(Ad(t),s.shape)}}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;D(a,s.shape).forEach((e=>{r[e]=1}));const i=cc(e,r),o=ic(i,Md(s.shape,"float32"));return{x:()=>o}}},{kernelName:xs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ep(e,Id(Bf(n)))}}},{kernelName:ws,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ic(ad(dp(1),Id(n)),e)}}},{kernelName:ks,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=lp(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=Jh(t,ap(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=Jh(t,ap(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=Jh(t,ap(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=Jh(t,ap(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Ss,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Lu(r);return{x:()=>kl(e,a)}}},{kernelName:Ts,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>fd(e,r)}}},{kernelName:Cs,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=mm(t,lp(t)),s=Qf(e,n);let r=pd(t,dp(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=$d(r,e+1);r=dd(r,Md(s.shape,"bool"));const i=lp(s);return ld(r,s,i)}(e,n)}}},{kernelName:$s,gradFunc:e=>({x:()=>lp(e)})}];for(const e of hb)Hs(e);function pb(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(gb(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=pb(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function db(e,t=mb){return fb(e,t)}function fb(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(gb(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=fb(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function mb(e){return null===e?null:gb(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function gb(e){let t=!1;if(le().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ea)&&!(e instanceof Promise)&&!t)}function yb(e){return pb(e,bb)}function bb(e){return e instanceof ea?{value:e.clone(),recurse:!1}:gb(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}ta().prototype.abs=function(){return this.throwIfDisposed(),bd(this)},ta().prototype.acos=function(){return this.throwIfDisposed(),af(this)},ta().prototype.acosh=function(){return this.throwIfDisposed(),of(this)},ta().prototype.add=function(e){return this.throwIfDisposed(),Jh(this,e)},ta().prototype.all=function(e,t){return this.throwIfDisposed(),uf(this,e,t)},ta().prototype.any=function(e,t){return this.throwIfDisposed(),cf(this,e,t)},ta().prototype.argMax=function(e){return this.throwIfDisposed(),hf(this,e)},ta().prototype.argMin=function(e){return this.throwIfDisposed(),pf(this,e)},ta().prototype.asScalar=function(){return this.throwIfDisposed(),x(1===this.size,(()=>"The array must have only 1 element.")),cc(this,[])},ta().prototype.asType=function(e){return this.throwIfDisposed(),Xo(this,e)},ta().prototype.as1D=function(){return this.throwIfDisposed(),cc(this,[this.size])},ta().prototype.as2D=function(e,t){return this.throwIfDisposed(),cc(this,[e,t])},ta().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),cc(this,[e,t,n])},ta().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),cc(this,[e,t,n,s])},ta().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),cc(this,[e,t,n,s,r])},ta().prototype.asin=function(){return this.throwIfDisposed(),df(this)},ta().prototype.asinh=function(){return this.throwIfDisposed(),ff(this)},ta().prototype.atan=function(){return this.throwIfDisposed(),mf(this)},ta().prototype.atan2=function(e){return this.throwIfDisposed(),gf(this,e)},ta().prototype.atanh=function(){return this.throwIfDisposed(),yf(this)},ta().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),bf(this,e,t,n,s)},ta().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),vf(this,e,t)},ta().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),If(this,e,t,n,s,r)},ta().prototype.broadcastTo=function(e){return this.throwIfDisposed(),od(this,e)},ta().prototype.cast=function(e){return this.throwIfDisposed(),Xo(this,e)},ta().prototype.ceil=function(){return this.throwIfDisposed(),$f(this)},ta().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Ef(this,e,t)},ta().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ea&&(e=[e]),np([this,...e],t)},ta().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),_f(this,e,t,n,s,r,a)},ta().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Of(this,e,t,n,s,r)},ta().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Ip(this,e,t,n,s,r,a)},ta().prototype.cos=function(){return this.throwIfDisposed(),Bf(this)},ta().prototype.cosh=function(){return this.throwIfDisposed(),Pf(this)},ta().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Wf(this,e,t,n)},ta().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Vf(this,e,t)},ta().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Cp(this,e,t,n,s,r,a)},ta().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),Hf(this,e,t,n,s,r)},ta().prototype.divNoNan=function(e){return this.throwIfDisposed(),qf(this,e)},ta().prototype.div=function(e){return this.throwIfDisposed(),ep(this,e)},ta().prototype.dot=function(e){return this.throwIfDisposed(),Kf(this,e)},ta().prototype.elu=function(){return this.throwIfDisposed(),rc(this)},ta().prototype.equal=function(e){return this.throwIfDisposed(),jf(this,e)},ta().prototype.erf=function(){return this.throwIfDisposed(),Yf(this)},ta().prototype.exp=function(){return this.throwIfDisposed(),qd(this)},ta().prototype.expandDims=function(e){return this.throwIfDisposed(),$d(this,e)},ta().prototype.expm1=function(){return this.throwIfDisposed(),Zf(this)},ta().prototype.fft=function(){return this.throwIfDisposed(),up(this)},ta().prototype.flatten=function(){return this.throwIfDisposed(),cc(this,[this.size])},ta().prototype.floor=function(){return this.throwIfDisposed(),Jf(this)},ta().prototype.floorDiv=function(e){return this.throwIfDisposed(),Qh(this,e)},ta().prototype.gather=function(e,t){return this.throwIfDisposed(),Qf(this,e,t)},ta().prototype.greaterEqual=function(e){return this.throwIfDisposed(),pd(this,e)},ta().prototype.greater=function(e){return this.throwIfDisposed(),rd(this,e)},ta().prototype.ifft=function(){return this.throwIfDisposed(),hp(this)},ta().prototype.irfft=function(){return this.throwIfDisposed(),fp(this)},ta().prototype.isFinite=function(){return this.throwIfDisposed(),em(this)},ta().prototype.isInf=function(){return this.throwIfDisposed(),tm(this)},ta().prototype.isNaN=function(){return this.throwIfDisposed(),nm(this)},ta().prototype.leakyRelu=function(e){return this.throwIfDisposed(),ac(this,e)},ta().prototype.lessEqual=function(e){return this.throwIfDisposed(),sd(this,e)},ta().prototype.less=function(e){return this.throwIfDisposed(),sm(this,e)},ta().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),am(this,e,t,n,s)},ta().prototype.logSigmoid=function(){return this.throwIfDisposed(),om(this)},ta().prototype.logSoftmax=function(e){return this.throwIfDisposed(),lm(this,e)},ta().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Yd(this,e,t)},ta().prototype.log=function(){return this.throwIfDisposed(),Vd(this)},ta().prototype.log1p=function(){return this.throwIfDisposed(),Kd(this)},ta().prototype.logicalAnd=function(e){return this.throwIfDisposed(),dd(this,e)},ta().prototype.logicalNot=function(){return this.throwIfDisposed(),um(this)},ta().prototype.logicalOr=function(e){return this.throwIfDisposed(),cm(this,e)},ta().prototype.logicalXor=function(e){return this.throwIfDisposed(),hm(this,e)},ta().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),bl(this,e,t,n)},ta().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),pm(this,e,t,n,s)},ta().prototype.max=function(e,t){return this.throwIfDisposed(),xd(this,e,t)},ta().prototype.maximum=function(e){return this.throwIfDisposed(),mm(this,e)},ta().prototype.mean=function(e,t){return this.throwIfDisposed(),_d(this,e,t)},ta().prototype.min=function(e,t){return this.throwIfDisposed(),wd(this,e,t)},ta().prototype.minimum=function(e){return this.throwIfDisposed(),Wd(this,e)},ta().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),ym(this,e,t)},ta().prototype.mod=function(e){return this.throwIfDisposed(),bm(this,e)},ta().prototype.mul=function(e){return this.throwIfDisposed(),ic(this,e)},ta().prototype.neg=function(){return this.throwIfDisposed(),Ad(this)},ta().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Nd(this,e,t,n)},ta().prototype.notEqual=function(e){return this.throwIfDisposed(),Od(this,e)},ta().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),xl(this,e,t,n)},ta().prototype.onesLike=function(){return this.throwIfDisposed(),vm(this)},ta().prototype.pad=function(e,t){return this.throwIfDisposed(),Sm(this,e,t)},ta().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),Am(this,e,t,n,s,r,a)},ta().prototype.pow=function(e){return this.throwIfDisposed(),kd(this,e)},ta().prototype.prelu=function(e){return this.throwIfDisposed(),oc(this,e)},ta().prototype.prod=function(e,t){return this.throwIfDisposed(),Rm(this,e,t)},ta().prototype.reciprocal=function(){return this.throwIfDisposed(),qm(this)},ta().prototype.relu=function(){return this.throwIfDisposed(),lc(this)},ta().prototype.relu6=function(){return this.throwIfDisposed(),uc(this)},ta().prototype.reshapeAs=function(e){return this.throwIfDisposed(),cc(this,e.shape)},ta().prototype.reshape=function(e){return this.throwIfDisposed(),cc(this,e)},ta().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),ed(this,e,t,n)},ta().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),td(this,e,t,n)},ta().prototype.reverse=function(e){return this.throwIfDisposed(),pp(this,e)},ta().prototype.rfft=function(){return this.throwIfDisposed(),cp(this)},ta().prototype.round=function(){return this.throwIfDisposed(),id(this)},ta().prototype.rsqrt=function(){return this.throwIfDisposed(),Jm(this)},ta().prototype.selu=function(){return this.throwIfDisposed(),Qm(this)},ta().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),eg(this,e,t,n,s,r,a)},ta().prototype.sigmoid=function(){return this.throwIfDisposed(),hc(this)},ta().prototype.sign=function(){return this.throwIfDisposed(),ng(this)},ta().prototype.sin=function(){return this.throwIfDisposed(),sg(this)},ta().prototype.sinh=function(){return this.throwIfDisposed(),rg(this)},ta().prototype.slice=function(e,t){return this.throwIfDisposed(),ap(this,e,t)},ta().prototype.softmax=function(e){return this.throwIfDisposed(),ug(this,e)},ta().prototype.softplus=function(){return this.throwIfDisposed(),im(this)},ta().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Em(this,e,t)},ta().prototype.split=function(e,t){return this.throwIfDisposed(),ip(this,e,t)},ta().prototype.sqrt=function(){return this.throwIfDisposed(),vd(this)},ta().prototype.square=function(){return this.throwIfDisposed(),Id(this)},ta().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Hd(this,e)},ta().prototype.squeeze=function(e){return this.throwIfDisposed(),Td(this,e)},ta().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ea?[this,e]:[this,...e];return fd(n,t)},ta().prototype.step=function(e){return this.throwIfDisposed(),pc(this,e)},ta().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),cg(this,e,t,n,s,r,a,i,o)},ta().prototype.sub=function(e){return this.throwIfDisposed(),ad(this,e)},ta().prototype.sum=function(e,t){return this.throwIfDisposed(),dc(this,e,t)},ta().prototype.tan=function(){return this.throwIfDisposed(),hg(this)},ta().prototype.tanh=function(){return this.throwIfDisposed(),wf(this)},ta().prototype.tile=function(e){return this.throwIfDisposed(),Gp(this,e)},ta().prototype.toBool=function(){return this.throwIfDisposed(),Xo(this,"bool")},ta().prototype.toFloat=function(){return this.throwIfDisposed(),Xo(this,"float32")},ta().prototype.toInt=function(){return this.throwIfDisposed(),Xo(this,"int32")},ta().prototype.topk=function(e,t){return this.throwIfDisposed(),mg(this,e,t)},ta().prototype.transpose=function(e){return this.throwIfDisposed(),kl(this,e)},ta().prototype.unique=function(e){return this.throwIfDisposed(),yg(this,e)},ta().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),bg(this,e,t)},ta().prototype.unstack=function(e){return this.throwIfDisposed(),md(this,e)},ta().prototype.where=function(e,t){return this.throwIfDisposed(),ld(e,this,t)},ta().prototype.zerosLike=function(){return this.throwIfDisposed(),lp(this)};class xb{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class wb extends xb{constructor(){super(wb.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function kb(e){return new Nb(e)}function vb(e){return new Tb(e)}function Ib(e,t){return new Lb(e,t)}wb.INITIAL_CAPACITY=32;class Sb{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Db(this,e)}filter(e){return new Rb(this,e)}map(e){return new Fb(this,e)}mapAsync(e){return new _b(this,e)}serialMapAsync(e){return new _b(this,e).serial()}flatmap(e){return new Mb(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Ab(this,e,t)}columnMajorBatch(e,t=!0,n=mb){return this.rowMajorBatch(e,t).map((e=>db(e,n)))}concatenate(e,t){return new Lb(kb([this,e]),t)}take(e){return e<0||null==e?this:new Eb(this,e)}skip(e){return e<0||null==e?this:new $b(this,e)}prefetch(e){return new Bb(this,e)}shuffle(e,t){return new Pb(this,e,t)}serial(){return new Cb(this)}}class Nb extends Sb{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:yb(e),done:!1}}}class Tb extends Sb{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Cb extends Sb{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class $b extends Sb{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Ph(e.value)}return this.upstream.next()}}class Eb extends Sb{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Ab extends Sb{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Rb extends Sb{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Ph(e.value)}}}class Fb extends Sb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=pa.getTensorsInContainer(e.value),n=this.transform(e.value),s=pa.getTensorsInContainer(n);for(const e of t)pa.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Db extends Sb{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class _b extends Sb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=pa.getTensorsInContainer(e.value),n=await this.transform(e.value),s=pa.getTensorsInContainer(n);for(const e of t)pa.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Ob extends Sb{constructor(){super(),this.outputQueue=new wb,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Mb extends Ob{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=pa.getTensorsInContainer(e.value),n=this.transform(e.value),s=pa.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)pa.isTensorInList(e,s)||e.dispose();return!0}}class Lb extends Sb{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var zb;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(zb||(zb={}));class Bb extends Sb{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new xb(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Pb extends Bb{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Dm.alea(n||Ys.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Wb{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return Ys.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Ub((async()=>(await n.iterator()).columnMajorBatch(e,t,Vb)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Ub((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Ub((async()=>(await t.iterator()).filter((t=>Bh((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Ub((async()=>(await t.iterator()).map((t=>Bh((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Ub((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Ub((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Ub((async()=>Ib(vb((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Ub((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=Dm.alea(t||Ys.now().toString());return Ub((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Ub((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Ub(e,t=null){return new class extends Wb{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Vb(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof ea||Ys.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ea?fd(e):Ua(e)}(e),recurse:!1}}var n,s;return{value:null,recurse:!0}}Wb.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function Gb(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Ys.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Hb(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(Gb(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=Ys.sizeFromShape(i.shape),c=n||i.dtype,h=Ys.getArrayFromDType(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function jb(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(Gb(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}const qb=Hb(Nt,(e=>e>=0?e:Math.exp(e)-1)),Kb={kernelName:Nt,backendName:"cpu",kernelFunc:qb};function Xb(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Yb={kernelName:Ut,backendName:"cpu",kernelFunc:Xb};function Zb(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;Gb([r],"leakyRelu");const i=Ys.sizeFromShape(r.shape),o=n.data.get(r.dataId).values,l=Ys.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const Jb={kernelName:Kt,backendName:"cpu",kernelFunc:Zb};function Qb(e){return(t,n,s,r,a)=>{const i=vu.assertAndGetBroadcastShape(t,n),o=i.length,l=Ys.computeStrides(i),u=Ys.sizeFromShape(i),c=Ys.getTypedArrayFromDType(a,u),h=t.length,p=n.length,d=Ys.computeStrides(t),f=Ys.computeStrides(n),m=vu.getBroadcastDims(t,i),g=vu.getBroadcastDims(n,i);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<c.length;++t){const n=Ys.indexToLoc(t,o,l),a=n.slice(-h);m.forEach((e=>a[e]=0));const i=Ys.locToIndex(a,h,d),u=n.slice(-p);g.forEach((e=>u[e]=0));const y=Ys.locToIndex(u,p,f);c[t]=e(s[i],r[y])}return[c,i]}}const ex=Qb(((e,t)=>e<0?t*e:e));function tx(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;Gb([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=ex(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const nx={kernelName:Fn,backendName:"cpu",kernelFunc:tx},sx=Hb(Ln,(e=>Math.max(0,e))),rx={kernelName:Ln,backendName:"cpu",kernelFunc:sx},ax=Hb(Vn,(e=>Math.min(Math.max(0,e),6))),ix={kernelName:Vn,backendName:"cpu",kernelFunc:ax};function ox(e){return(t,n,s)=>{const r=Ys.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const lx=ox((e=>1/(1+Math.exp(-e)))),ux=Hb(es,(e=>1/(1+Math.exp(-e)))),cx={kernelName:es,backendName:"cpu",kernelFunc:ux};function hx(e,t,n,s,r){if("linear"===n)return Xb({inputs:{x:t},backend:e});if("relu"===n)return sx({inputs:{x:t},backend:e});if("elu"===n)return qb({inputs:{x:t},backend:e});if("relu6"===n)return ax({inputs:{x:t},backend:e});if("prelu"===n)return tx({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Zb({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return ux({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function px(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const dx={kernelName:tt,backendName:"cpu",kernelFunc:px};function fx(e,t,n="float32"){if("complex64"===n){return px({inputs:{real:fx(e,t,"float32"),imag:fx(e,t,"float32")},backend:e})}const s=Ys.makeZerosTypedArray(Ys.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function mx(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const gx={kernelName:On,backendName:"cpu",kernelFunc:mx};function yx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return Xb({inputs:{x:r},backend:n});const e=fx(n,r.shape,r.dtype),t=yx({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=px({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=mx({inputs:{input:r},backend:n}),t=yx({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Ys.hasEncodingLoss(r.dtype,a)){const e=Xb({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=Ys.toTypedArray([0],r.dtype),[s,a]=Qb(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const bx={kernelName:Je,backendName:"cpu",kernelFunc:yx};function xx(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;Gb([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?vu.fromUint8ToStringArray(l):l,h="string"===a.dtype?vu.fromUint8ToStringArray(u):u,p=s||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=yx({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=yx({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=px({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function wx(e){return(t,n,s,r,a,i)=>{const o=vu.assertAndGetBroadcastShape(t,n),l=Ys.sizeFromShape(o),u=o.length,c=Ys.computeStrides(o),h=Ys.getTypedArrayFromDType("float32",l),p=Ys.getTypedArrayFromDType("float32",l),d=vu.getBroadcastDims(t,o),f=vu.getBroadcastDims(n,o),m=vu.mergeRealAndImagArrays(s,r),g=vu.mergeRealAndImagArrays(a,i),y=t.length,b=Ys.computeStrides(t),x=n.length,w=Ys.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=Ys.indexToLoc(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=Ys.locToIndex(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Ys.locToIndex(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const kx=Qb(((e,t)=>e+t)),vx=wx(((e,t,n,s)=>({real:e+n,imag:t+s}))),Ix=xx(Fe,kx,vx),Sx={kernelName:Fe,backendName:"cpu",kernelFunc:Ix};function Nx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=Ys.sizeFromShape(r.shape),o=Ys.inferFromImplicitShape(a,i),l=Ys.sizeFromShape(o);Ys.assert(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Tx={kernelName:zn,backendName:"cpu",kernelFunc:Nx};function Cx(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;Gb([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Ys.sizeFromShape(f),y=Ys.sizeFromShape(m),b=Il.assertAndGetBroadcastShape(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([p,d]);Ys.assert(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=Nx({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=Nx({inputs:{x:a},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],S=o?k.shape[1]:k.shape[2],N=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(k.dataId).values,$=Ys.computeStrides(w.shape),E=Ys.computeStrides(k.shape),[A,R,F]=i?[$[0],1,$[1]]:[$[0],$[1],1],[D,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*S,L=Ko([N,I,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<N;e++)for(let t=0;t<I;t+=B)for(let n=0;n<S;n+=B)for(let s=0;s<v;s+=B){const r=Math.min(t+B,I),a=Math.min(n+B,S),i=Math.min(s+B,v);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[s+o*R+r*F]*C[r*D+t*_+a]}z[e*M+(o*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const $x={kernelName:qe,backendName:"cpu",kernelFunc:Cx};const Ex={kernelName:Fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Cx({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=Ix({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=hx(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Ax(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Rx={kernelName:Ee,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Gb(t,"abs");let s=new Float32Array(Ys.sizeFromShape(t.shape));return s=Ax(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},Fx=Hb(Ae,(e=>Math.acos(e))),Dx={kernelName:Ae,backendName:"cpu",kernelFunc:Fx},_x=Hb(Re,(e=>Math.acosh(e))),Ox={kernelName:Re,backendName:"cpu",kernelFunc:_x};const Mx={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;Gb(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Ko(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function Lx(e,t,n,s,r){const a=t.length,i=Ys.sizeFromShape(t),o=Ys.computeStrides(t),l=Ys.computeStrides(r),u=Ys.getTypedArrayFromDType(n,Ys.sizeFromShape(r));for(let t=0;t<i;++t){const n=Ys.indexToLoc(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[Ys.locToIndex(r,a,l)]=e[t]}return u}function zx(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;Gb(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=Lx(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const Bx={kernelName:Ss,backendName:"cpu",kernelFunc:zx};const Px={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Gb(r,"all");const o=Ys.parseAxisParam(a,r.shape);let l=o;const u=vu.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=zx({inputs:{x:r},backend:n,attrs:{perm:u}}),l=vu.getInnerMostAxes(l.length,r.shape.length)),vu.assertAxesAreInnerMostDims("all",l,c.shape.length);const[h,p]=vu.computeOutAndReduceShapes(c.shape,l),d=Ys.sizeFromShape(p),f=Ys.makeZerosTypedArray(Ys.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Nx({inputs:{x:g},backend:n,attrs:{shape:vu.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Wx={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Gb(r,"any");const o=Ys.parseAxisParam(a,r.shape);let l=o;const u=vu.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=zx({inputs:{x:r},backend:n,attrs:{perm:u}}),l=vu.getInnerMostAxes(l.length,r.shape.length)),vu.assertAxesAreInnerMostDims("any",l,c.shape.length);const[h,p]=vu.computeOutAndReduceShapes(c.shape,l),d=Ys.sizeFromShape(p),f=Ys.makeZerosTypedArray(Ys.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Nx({inputs:{x:g},backend:n,attrs:{shape:vu.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Ux={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Gb(r,"argMax");let i=Ys.parseAxisParam(a,r.shape);const o=vu.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=zx({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=vu.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],vu.assertAxesAreInnerMostDims("argMax",i,l.shape.length);const[c,h]=vu.computeOutAndReduceShapes(l.shape,i),p=Ys.sizeFromShape(c),d=Ys.makeZerosTypedArray(p,"int32"),f=Ys.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const Vx={kernelName:Le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Gb(r,"argMin");let i=Ys.parseAxisParam(a,r.shape);const o=vu.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=zx({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=vu.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],vu.assertAxesAreInnerMostDims("argMin",i,l.shape.length);const[c,h]=vu.computeOutAndReduceShapes(l.shape,i),p=Ys.sizeFromShape(c),d=Ys.makeZerosTypedArray(p,"int32"),f=Ys.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},Gx=Hb(ze,(e=>Math.asin(e))),Hx={kernelName:ze,backendName:"cpu",kernelFunc:Gx},jx=Hb(Be,(e=>Math.asinh(e))),qx={kernelName:Be,backendName:"cpu",kernelFunc:jx},Kx=Hb(Pe,(e=>Math.atan(e))),Xx={kernelName:Pe,backendName:"cpu",kernelFunc:Kx},Yx=Qb(((e,t)=>Math.atan2(e,t))),Zx=xx(Ue,Yx),Jx={kernelName:Ue,backendName:"cpu",kernelFunc:Zx},Qx=Hb(We,(e=>Math.atanh(e))),ew={kernelName:We,backendName:"cpu",kernelFunc:Qx};function tw(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ko(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function nw(e,t,n,s,r=!1,a=!1){const i=Ko(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Ko(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function sw(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ko(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],S=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const N=k*i-m;let T=N;for(;T<0;)T+=u;const C=Math.min(r.inDepth,p+N),$=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=$+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*S;let v=b,I=0,N=0;for(let n=T;n<C;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,N++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?I/N:v}}}}return x}const rw={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Gb(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Ys.assert(vu.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=vu.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Ys.arraysEqual(u.inShape,u.outShape))c=Xb({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Ys.computeStrides(r.shape),s=tw(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const aw={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Gb(r,"avgPool3d");const c=vu.computePool3DInfo(r.shape,a,i,1,o,l,u),h=sw(n.data.get(r.dataId).values,r.shape,r.dtype,Ys.computeStrides(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const iw={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Gb([r,a],"avgPool3DGrad");const c=vu.computePool3DInfo(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=w-1-c.padInfo.front,S=v-1-c.padInfo.left,N=k-1-c.padInfo.top,T=Ko(a.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,i=s-N,o=r-S;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=$.get(e,s,r,a,t)}}}T.set(l*C,e,n,s,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const ow={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;Gb([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=vu.computePool2DInfo(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Ko(i.shape,"float32"),v=1/(d*f),I=n.data.get(r.dataId).values,S=Ko(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=S.get(e,s,r,t)}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const lw={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;Ys.assert(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Ys.assert(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Ys.assert(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Gb([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function uw(e,t,n,s,r){const a=Wl.isSliceContinous(s,t,n),i=Ys.sizeFromShape(n),o=Ys.computeStrides(s);if(a){const n=Wl.computeFlatOffset(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Ko(s,r,"string"===r?vu.fromUint8ToStringArray(e):e),u=Ko(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?vu.fromStringArrayToUint8(u.values):u.values}function cw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;Gb(r,"slice");const[o,l]=Wl.parseSliceParams(r,a,i);Wl.assertParamsValid(r,o,l);const u=uw(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const hw={kernelName:Yn,backendName:"cpu",kernelFunc:cw};const pw={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Gb([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=vu.getReshaped(r.shape,a,o),u=vu.getPermuted(l.length,a.length),c=vu.getReshapedPermuted(r.shape,a,o),h=vu.getSliceBeginCoords(i,a.length),p=vu.getSliceSize(c,i,a.length),d=Nx({inputs:{x:r},backend:n,attrs:{shape:l}}),f=zx({inputs:{x:d},backend:n,attrs:{perm:u}}),m=Nx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=cw({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function dw(e,t,n,s,r){const a=Ys.sizeFromShape(s),i=Ys.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function fw(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Ko([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const mw={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=dw(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};const gw={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=vu.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},yw=ox((e=>Math.ceil(e))),bw=jb(Qe,yw),xw={kernelName:Qe,backendName:"cpu",kernelFunc:bw},ww=Hb(et,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),kw={kernelName:et,backendName:"cpu",kernelFunc:ww},vw={kernelName:nt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(Ys.sizeFromShape(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function Iw(e,t,n,s){const r=Ys.getArrayFromDType(n,Ys.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=Ys.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?vu.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function Sw(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Nw={kernelName:Gt,backendName:"cpu",kernelFunc:Sw};function Tw(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Ys.parseAxisParam(r,t[0].shape)[0];let i=vu.computeOutShape(t.map((e=>e.shape)),a);if(0===Ys.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>Ys.sizeFromShape(e.shape)>0));if(1===o.length)return Xb({inputs:{x:o[0]},backend:n});const l=o.map((e=>e.shape));if(vu.assertParamsConsistent(l,a),"complex64"===o[0].dtype){const e=o.map((e=>mx({inputs:{input:e},backend:n}))),t=o.map((e=>Sw({inputs:{input:e},backend:n}))),s=Tw({inputs:e,backend:n,attrs:{axis:a}}),r=Tw({inputs:t,backend:n,attrs:{axis:a}}),i=px({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const u=o.map((e=>{const t=Ys.sizeFromShape(e.shape.slice(a));return Nx({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=vu.computeOutShape(u.map((e=>e.shape)),1);const h=1===u[0].shape[0],p=Iw(c,i,t[0].dtype,h),d=vu.computeOutShape(o.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,p);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Cw={kernelName:st,backendName:"cpu",kernelFunc:Tw};function $w(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Gb([r,a],"conv2d");const h=vu.convertConv2DDataFormat(l),p=vu.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Yr(p.outShape,r.dtype),k=Ys.computeStrides(r.shape),v=Ys.computeStrides(a.shape),I=k[0],S=x?k[1]:k[2],N=x?k[2]:1,T=x?1:k[1],C=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<p.outHeight;++e){const s=n+e*$,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*S;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*N;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*T];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const Ew={kernelName:rt,backendName:"cpu",kernelFunc:$w};const Aw={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Gb([r,a],"conv2dBackpropFilter");const h=vu.convertConv2DDataFormat(l),p=vu.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Yr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=new Yr(r.shape,r.dtype,k),S=new Yr(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*S.get(u,c,e,o):I.get(u,i,t,n)*S.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Rw={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;Gb([r,a],"conv2dBackpropInput");const h=Ys.computeStrides(a.shape),p=Ys.computeStrides(r.shape);let d=vu.convertConv2DDataFormat(u);const f=vu.computeConv2DInfo(i,a.shape,o,1,l,c,!1,d),m=new Yr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:I,filterWidth:S,inChannels:N,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=I-1-f.padInfo.top,_=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],U=O?p[2]:1,V=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<N;++t)for(let n=0;n<T;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<C;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(S+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=P*e+W*n+U*s,i=x*(I-1-r)+w*(S-1-(s*F-o))+k*t;for(let e=0;e<$;++e){c+=y[a+V*e]*b[i+e]}}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const Fw={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;Gb([r,a],"conv3d");const u=vu.computeConv3DInfo(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Yr(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=w.values,S=Ys.computeStrides(r.shape),N=Ys.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*N[0],i=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*N[1],o=i+s*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*N[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Dw={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;Gb([r,a],"conv3dBackpropFilterV2");const u=Ys.computeStrides(r.shape),c=Ys.computeStrides(a.shape),h=vu.computeConv3DInfo(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Yr(h.filterShape,"float32"),x=b.values,[w,k,v,I]=b.strides,S=n.data.get(a.dataId).values,[N,T,C,$]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*N;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*T+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*F+t,i=e*C+n;for(let e=l;e<u;++e){const t=e*$+i;g+=E[(s+e*f-O)*D+a+o]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const _w={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;Gb([r],"conv3dBackpropInputV2");const u=Ys.computeStrides(r.shape),c=Ys.computeStrides(a.shape),h=vu.computeConv3DInfo(l,a.shape,o,1,i),p=new Yr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,I=n.data.get(a.dataId).values,[S,N,T,C]=c,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:U}=h,V=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-V,r=Math.max(0,Math.ceil(s/P)),a=Math.min(L,(E+s)/P);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/U)),$=Math.min(B,(R+h)/U);let F=0;for(let n=r;n<a;++n){const r=n*P-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<$;++i){const o=x*e+w*n+k*s+v*i,l=S*(E-1-r)+N*(A-1-a)+T*(R-1-(i*U-h))+C*t;for(let e=0;e<M;++e){F+=b[o+e]*I[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Ow=Hb(ct,(e=>Math.cos(e))),Mw={kernelName:ct,backendName:"cpu",kernelFunc:Ow},Lw=Hb(ht,(e=>Math.cosh(e))),zw={kernelName:ht,backendName:"cpu",kernelFunc:Lw};const Bw={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=Ko([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=Ys.computeStrides(r.shape),v=Ys.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Pw={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;Gb(r,"cumsum");const l=vu.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=zx({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=vu.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=fa(u.dtype,"int32"),p=Ys.makeZerosTypedArray(Ys.sizeFromShape(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=zx({inputs:{x:g},backend:n,attrs:{perm:vu.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const Ww={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=dw(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=fw(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const Uw={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Ys.assert("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function Vw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;Gb([r,a],"depthwiseConv2DNative");const c=Ys.computeStrides(r.shape),h=Ys.computeStrides(a.shape);let p=l;null==p&&(p=[1,1]),Ys.assert(vu.eitherStridesOrDilationsAreOne(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=vu.computeConv2DInfo(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new Yr(d.outShape,r.dtype),I=n.data.get(r.dataId).values,S=n.data.get(a.dataId).values,N=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*v.strides[1],r=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<k;++e)N[l+e]+=t*S[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const Gw={kernelName:gt,backendName:"cpu",kernelFunc:Vw};const Hw={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;Gb([r,a],"depthwiseConv2dNativeBackpropFilter");const h=vu.computeConv2DInfo(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Yr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new Yr(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,I=new Yr(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const jw={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;Gb([r,a],"depthwiseConv2DNativeBackpropInput");const h=Ys.computeStrides(r.shape),p=Ys.computeStrides(a.shape),d=vu.computeConv2DInfo(c,a.shape,i,o,l,u,!0),f=new Yr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,I=n.data.get(a.dataId).values,[S,N,T]=p,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=E-1-d.padInfo.left,P=D/A;for(let e=0;e<C;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,($+s)/M);for(let i=0;i<F;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=S*($-1-r)+N*(E-1-(s*L-o))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*I[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const qw={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=Ys.sizeFromShape(s.shape),a=n.data.get(s.dataId).values,i=Ko([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Kw={kernelName:wt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=vu.computeDilation2DInfo(s.shape,r.shape,a,i,"NHWC",o),C=Ys.sizeFromShape(T),$=T.length,E=Ys.getArrayFromDType(s.dtype,C);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*k-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*N;if(d>=0&&d<m){const i=Ys.locToIndex([e,a,d,o],c,Ys.computeStrides(s.shape)),f=Ys.locToIndex([t,n,o],p,Ys.computeStrides(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[Ys.locToIndex([e,t,a,o],$,Ys.computeStrides(T))]=l}}}return{dataId:l.write(Ys.toTypedArray(E,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},Xw={kernelName:vt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ys.toNestedArray(s.shape,u.data.get(s.dataId).values),h=Ys.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:S,outShape:N}=vu.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);Ys.assert(a.rank===N.length,(()=>`Error in ${vt}, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=Ys.toNestedArray(N,u.data.get(a.dataId).values),C=Ys.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}C[o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(Ys.toTypedArray(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Yw={kernelName:kt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ys.toNestedArray(s.shape,u.data.get(s.dataId).values),h=Ys.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:S,outShape:N}=vu.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);Ys.assert(a.rank===N.length,(()=>`Error in ${kt}, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=Ys.toNestedArray(N,u.data.get(a.dataId).values),C=Ys.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}C[e][o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(Ys.toTypedArray(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Zw=Qb(((e,t)=>e*t)),Jw=wx(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),Qw=xx(wn,Zw,Jw),ek={kernelName:wn,backendName:"cpu",kernelFunc:Qw};function tk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;Gb(r,"sum"),o="bool"===r.dtype?yx({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):Xb({inputs:{x:r},backend:n});const l=o.shape.length,u=Ys.parseAxisParam(a,o.shape),c=vu.getAxesPermutation(u,l);let h=u,p=o;null!=c&&(p=zx({inputs:{x:o},backend:n,attrs:{perm:c}}),h=vu.getInnerMostAxes(h.length,l)),vu.assertAxesAreInnerMostDims("sum",h,p.shape.length);const[d,f]=vu.computeOutAndReduceShapes(p.shape,h);let m=fx(n,d,vu.upcastType(p.dtype,"int32"));const g=Ys.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=Nx({inputs:{x:m},backend:n,attrs:{shape:vu.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const nk={kernelName:ss,backendName:"cpu",kernelFunc:tk};const sk={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=vu.decodeEinsumEquation(r,a.length);vu.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=vu.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=vu.getEinsumPermutation(d,l[t]);let r;vu.isIdentityPermutation(e)?r=a[t]:(r=zx({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);Ys.arraysEqual(r.shape,i)||(r=Nx({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=Qw({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=tk({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const rk={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;Gb([s,r],"eluGrad");const a=new Float32Array(Ys.sizeFromShape(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},ak=Qb(((e,t)=>e===t?1:0)),ik=xx($t,ak,null,"bool"),ok={kernelName:$t,backendName:"cpu",kernelFunc:ik},lk=vu.ERF_P,uk=vu.ERF_A1,ck=vu.ERF_A2,hk=vu.ERF_A3,pk=vu.ERF_A4,dk=vu.ERF_A5,fk=Hb(Ct,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+lk*n);return t*(1-((((dk*s+pk)*s+hk)*s+ck)*s+uk)*s*Math.exp(-n*n))})),mk={kernelName:Ct,backendName:"cpu",kernelFunc:fk},gk=ox((e=>Math.exp(e))),yk=jb(Et,gk,"float32"),bk={kernelName:Et,backendName:"cpu",kernelFunc:yk};function xk(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(Ys.assert(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),Nx({inputs:{x:r},backend:n,attrs:{shape:o}})}const wk={kernelName:At,backendName:"cpu",kernelFunc:xk},kk=ox((e=>Math.expm1(e))),vk=jb(Rt,kk),Ik={kernelName:Rt,backendName:"cpu",kernelFunc:vk},Sk=Qb(((e,t)=>e/t)),Nk=xx(It,Sk),Tk={kernelName:It,backendName:"cpu",kernelFunc:Nk},Ck=Qb(((e,t)=>e-t)),$k=wx(((e,t,n,s)=>({real:e-n,imag:t-s}))),Ek=xx(bs,Ck,$k),Ak={kernelName:bs,backendName:"cpu",kernelFunc:Ek};function Rk(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=Ys.sizeFromShape(u),h=Ys.getTypedArrayFromDType("float32",c),p=Ys.getTypedArrayFromDType("float32",c);for(let e=0;e<r;e++){const s=cw({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=cw({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=px({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Fk(i,t,n),d=vu.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=vu.getComplexWithIndex(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=px({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function Fk(e,t,n){const s=Ys.sizeFromShape(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=Dk(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Ys.createScalarValue(s,"float32")),i=Xb({inputs:{x:a},backend:n}),l=Tk.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Tk.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=vu.exponent(r*s,t,n),l=vu.getComplexWithIndex(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),vu.assignToTypedArray(s,a,i,r)}return s}(vu.mergeRealAndImagArrays(a,i),s,t);return vu.splitRealAndImagArrays(e)}var o}function Dk(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=vu.mergeRealAndImagArrays(e,t),i=n/2,o=vu.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=px({inputs:{real:h,imag:p},backend:r}),f=vu.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=px({inputs:{real:b,imag:x},backend:r}),k=Dk(l,u,i,s,r),v=k.real,I=k.imag,S=[v.length],N=r.makeTensorInfo(S,"float32",v),T=r.makeTensorInfo(S,"float32",I),C=px({inputs:{real:N,imag:T},backend:r}),$=Dk(m,g,i,s,r),E=$.real,A=$.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=px({inputs:{real:F,imag:D},backend:r}),O=vu.exponents(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=px({inputs:{real:L,imag:z},backend:r}),P=Qw({inputs:{a:B,b:_},backend:r}),W=Ix({inputs:{a:C,b:P},backend:r}),U=Ek({inputs:{a:C,b:P},backend:r}),V=mx({inputs:{input:W},backend:r}),G=mx({inputs:{input:U},backend:r}),H=Sw({inputs:{input:W},backend:r}),j=Sw({inputs:{input:U},backend:r}),q=Tw({inputs:[V,G],backend:r,attrs:{axis:0}}),K=Tw({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const _k={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=Ys.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=Nx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Rk(i,!1,n),l=Nx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function Ok(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Ys.inferDtype(r),o=Ys.getArrayFromDType(i,Ys.sizeFromShape(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const Mk={kernelName:Dt,backendName:"cpu",kernelFunc:Ok};const Lk={kernelName:_t,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=Ys.getTypedArrayFromDType(s.dtype,Ys.sizeFromShape(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const i=Math.round(l-e-1),o=t+n+s+r;let h=c[o];if(i>=0&&i<l){h=c[t+n+i*u+r]}a[o]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},zk=ox((e=>Math.floor(e))),Bk=jb(Ot,zk),Pk={kernelName:Ot,backendName:"cpu",kernelFunc:Bk},Wk=Qb(((e,t)=>Math.floor(e/t))),Uk=xx(Mt,Wk,null,"int32"),Vk={kernelName:Mt,backendName:"cpu",kernelFunc:Uk};const Gk={kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=$w({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Ix({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=hx(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const Hk={kernelName:_s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Vw({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Ix({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=hx(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function jk(e,t,n,s,r,a,i,o,l){const u=Ko([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*i[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const qk={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=Ys.sizeFromShape(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=vu.prepareAndValidate(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=jk(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}};function Kk(e,t,n){const s=Ko(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const Xk={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;Gb([r,a],"gatherV2");const l=Ys.parseAxisParam(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];Ys.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const p=Ys.sizeFromShape(a.shape),d=vu.segment_util.collectGatherOpShapeInfo(r,a,l,h),f=Nx({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=Nx({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}}),g=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=Kk(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},Yk=Qb(((e,t)=>e>t?1:0)),Zk=xx(Pt,Yk,null,"bool"),Jk={kernelName:Pt,backendName:"cpu",kernelFunc:Zk},Qk=Qb(((e,t)=>e>=t?1:0)),ev=xx(Wt,Qk,null,"bool"),tv={kernelName:Wt,backendName:"cpu",kernelFunc:ev};const nv={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=Ys.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=Nx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Rk(i,!0,n),l=Nx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},sv=Hb(Ht,(e=>Number.isFinite(e)?1:0),"bool"),rv={kernelName:Ht,backendName:"cpu",kernelFunc:sv},av=Hb(jt,(e=>Math.abs(e)===1/0?1:0),"bool"),iv={kernelName:jt,backendName:"cpu",kernelFunc:av},ov=Hb(qt,(e=>Number.isNaN(e)?1:0),"bool"),lv={kernelName:qt,backendName:"cpu",kernelFunc:ov},uv=Qb(((e,t)=>e<t?1:0)),cv=xx(Xt,uv,null,"bool"),hv={kernelName:Xt,backendName:"cpu",kernelFunc:cv},pv=Qb(((e,t)=>e<=t?1:0)),dv=xx(Yt,pv,null,"bool"),fv={kernelName:Yt,backendName:"cpu",kernelFunc:dv};function mv(e,t,n){const s=(t-e)/(n-1),r=Ys.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const gv={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=mv(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},yv=ox((e=>Math.log(e))),bv=jb(Jt,yv),xv={kernelName:Jt,backendName:"cpu",kernelFunc:bv},wv=Hb(Qt,(e=>Math.log1p(e))),kv={kernelName:Qt,backendName:"cpu",kernelFunc:wv},vv=Qb(((e,t)=>e&&t)),Iv=xx(en,vv,null,"bool"),Sv={kernelName:en,backendName:"cpu",kernelFunc:Iv},Nv=Hb(tn,(e=>e?0:1),"bool"),Tv={kernelName:tn,backendName:"cpu",kernelFunc:Nv},Cv=Qb(((e,t)=>e||t)),$v=xx(nn,Cv,null,"bool"),Ev={kernelName:nn,backendName:"cpu",kernelFunc:$v};const Av={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;Gb(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=Ys.sizeFromShape(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}};const Rv={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;Gb(i,"LRNGrad");const h=Ys.sizeFromShape(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function Fv(e,t,n,s){const r=Ys.getTypedArrayFromDType(s,Ys.sizeFromShape(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}function Dv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=Ys.parseAxisParam(a,l);let h=c;const p=vu.getAxesPermutation(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=Lx(d,l,r.dtype,p,e),h=vu.getInnerMostAxes(h.length,u),l=e}Gb(r,"max"),vu.assertAxesAreInnerMostDims("max",h,u);const[f,m]=vu.computeOutAndReduceShapes(l,h),g=Fv(d,Ys.sizeFromShape(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;if(i){b=vu.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:r.dtype}}const _v={kernelName:on,backendName:"cpu",kernelFunc:Dv},Ov=Qb(((e,t)=>Math.max(e,t))),Mv=xx(ln,Ov),Lv={kernelName:ln,backendName:"cpu",kernelFunc:Mv};const zv={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Gb(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Ys.assert(vu.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=vu.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Ys.arraysEqual(u.inShape,u.outShape))c=Xb({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Ys.computeStrides(r.shape),s=tw(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Bv={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Gb(r,"maxPool3d");const c=vu.computePool3DInfo(r.shape,a,i,1,o,l,u),h=sw(n.data.get(r.dataId).values,r.shape,r.dtype,Ys.computeStrides(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Pv={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Gb([r,a],"maxPool3DGrad");const c=vu.computePool3DInfo(a.shape,i,o,1,l,u),h=function(e,t){const n=Ko(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=S&&(S=o,N=n*c*h+r*c+i)}}}n.set(N,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,I=x-1-c.padInfo.top,S=Ko(a.shape,"float32"),N=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,i=s-I,o=r-v;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;if(0===p)continue;l+=N.get(e,s,a,u,t)*p}}}S.set(l,e,n,s,r,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Wv={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;Gb([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=vu.computePool2DInfo(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Ko(p.outShape,o.dtype,nw(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,I=Ko(o.shape,"float32"),S=n.data.get(r.dataId).values,N=Ko(r.shape,"float32",S);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;if(0===l)continue;i+=N.get(e,s,o,t)*l}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const Uv={kernelName:dn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Gb(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=vu.computePool2DInfo(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=tw(e,0,n,Ys.computeStrides(t),r,"max"),i=nw(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const Vv={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=Ys.parseAxisParam(a,r.shape),l=vu.computeOutAndReduceShapes(r.shape,o)[1],u=Ys.sizeFromShape(l),c=[],h=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(h);const p=yx({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});c.push(p);const d=Nk({inputs:{a:p,b:h},backend:n});c.push(d);const f=tk({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Gv={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Gb(r,"min");const o=Ys.parseAxisParam(a,r.shape);let l=o;const u=vu.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=zx({inputs:{x:r},backend:n,attrs:{perm:u}}),l=vu.getInnerMostAxes(l.length,r.shape.length)),vu.assertAxesAreInnerMostDims("min",l,c.shape.length);const[h,p]=vu.computeOutAndReduceShapes(c.shape,l),d=Ys.sizeFromShape(p),f=Ys.makeZerosTypedArray(Ys.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Nx({inputs:{x:g},backend:n,attrs:{shape:vu.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},Hv=Qb(((e,t)=>Math.min(e,t))),jv=xx(gn,Hv),qv={kernelName:gn,backendName:"cpu",kernelFunc:jv};const Kv={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;Gb(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Ys.computeStrides(r.shape),f=Ys.sizeFromShape(o),m=o.length,g=Ys.computeStrides(o),y=Ys.getTypedArrayFromDType(r.dtype,f);for(let e=0;e<f;e++){let t=Ys.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Ys.locToIndex(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},Xv=Qb(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Yv=xx(bn,Xv),Zv={kernelName:bn,backendName:"cpu",kernelFunc:Yv};function Jv(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=Ys.parseAxisParam([o],r.shape),u=Dv({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=vu.expandShapeToKeepDim(u.shape,l),h=Nx({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Ek({inputs:{a:r,b:h},backend:n}),d=yk({inputs:{x:p},backend:n}),f=tk({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=Nx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Nk({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Qv={kernelName:is,backendName:"cpu",kernelFunc:Jv};const eI={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;Gb(r,"multinomial");const l=o?r:Jv({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=Ys.makeZerosTypedArray(Ys.sizeFromShape(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=Dm.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function tI(e,t,n){const s=Ys.createScalarValue(-1,n);return Zw([],t,s,e,n)}const nI={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Gb(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=tI(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},sI=xh.nonMaxSuppressionV3Impl;const rI={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;Gb(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=sI(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},aI=xh.nonMaxSuppressionV4Impl;const iI={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;Gb(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=aI(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},oI=xh.nonMaxSuppressionV5Impl;const lI={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;Gb(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=oI(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},uI=Qb(((e,t)=>e!==t?1:0)),cI=xx(vn,uI,null,"bool"),hI={kernelName:vn,backendName:"cpu",kernelFunc:cI};const pI={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;Gb(r,"oneHot");const l=Ys.sizeFromShape(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function dI(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=mx({inputs:{input:s},backend:n}),t=dI({inputs:{x:e},backend:n}),r=Sw({inputs:{input:s},backend:n}),a=dI({inputs:{x:r},backend:n}),i=px({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Ok({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const fI={kernelName:$s,backendName:"cpu",kernelFunc:dI};const mI={kernelName:Tn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=mx({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Sw({inputs:{input:r},backend:s}),i=dI({inputs:{x:a},backend:s}),o=px({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Ok({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function gI(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return xk({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Ys.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Ys.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=Tw({inputs:t.map((e=>{const t=xk({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const yI={kernelName:$n,backendName:"cpu",kernelFunc:gI};const bI={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;Gb(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=Ys.sizeFromShape(r.shape),h=r.shape.length,p=Ys.computeStrides(r.shape),d=Ys.sizeFromShape(o),f=o.length,m=Ys.computeStrides(o),g=Ys.getTypedArrayFromDType(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++){const t=Ys.indexToLoc(e,h,p).map(((e,t)=>e+l[t]));g[Ys.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},xI=Qb(((e,t)=>Math.pow(e,t))),wI=xx(Rn,xI),kI={kernelName:Rn,backendName:"cpu",kernelFunc:wI};function vI(e,t,n,s){const[r,a]=vu.computeOutAndReduceShapes(e,s),i=fa(t,"int32"),o=Ys.makeZerosTypedArray(Ys.sizeFromShape(r),i),l=Ys.sizeFromShape(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const II={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Gb(r,"prod");const o=r.shape.length,l=Ys.parseAxisParam(a,r.shape),u=vu.getAxesPermutation(l,o);let c=l,h=r;const p=[];null!=u&&(h=zx({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=vu.getInnerMostAxes(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=vI(h.shape,h.dtype,d,c);let y=m;return i&&(y=vu.expandShapeToKeepDim(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function SI(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return Ys.makeZerosTypedArray(0,s);const r=Math.abs(Math.ceil((t-e)/n)),a=Ys.makeZerosTypedArray(r,s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const NI={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=SI(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},TI=Hb(Mn,(e=>1/e)),CI={kernelName:Mn,backendName:"cpu",kernelFunc:TI};const $I={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Gb(r,"resizeBilinear");const l=Ys.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(Ys.sizeFromShape([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}};const EI={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Gb([a,r],"resizeBilinearGrad");const o=Ys.computeStrides(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,I=l*u,S=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*I,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const AI={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Gb(r,"resizeNearestNeighbor");const l=Ys.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const RI={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Gb([a,r],"resizeNearestNeighborGrad");const o=Ys.computeStrides(r.shape),l=Ys.computeStrides(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,I=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-S/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const FI={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;Gb(r,"reverse");const i=r.shape.length,o=Ys.parseAxisParam(a,r.shape);if(0===i)return Xb({inputs:{x:r},backend:n});const l=new Yr(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},DI={kernelName:Rs,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=Ys.getTypedArrayFromDType(s.dtype,Ys.sizeFromShape(s.shape)),[u,c,h,p]=s.shape,[d,f]=vu.getImageCenter(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;if("number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<h&&k>=0&&k<c){v=y[t+k*(h*p)+w*p+i]}l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},_I=Hb(Hn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),OI={kernelName:Hn,backendName:"cpu",kernelFunc:_I},MI=ox((e=>1/Math.sqrt(e))),LI=jb(jn,MI),zI={kernelName:jn,backendName:"cpu",kernelFunc:LI};function BI(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return Ko(n,t.dtype);const d=Ko(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const PI={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=vu.calculateShapes(a,r,i),p=BI(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const WI={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;Gb([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=fa(r.dtype,a.dtype),h=Ys.makeZerosTypedArray(Ys.sizeFromShape(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:Ys.sizeFromShape(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},UI=vu.SELU_SCALEALPHA,VI=vu.SELU_SCALE,GI=Hb(Xn,(e=>e>=0?VI*e:UI*(Math.exp(e)-1))),HI={kernelName:Xn,backendName:"cpu",kernelFunc:GI},jI=Hb(Qn,(e=>e<0?-1:e>0?1:0)),qI={kernelName:Qn,backendName:"cpu",kernelFunc:jI},KI=Hb(Zn,(e=>Math.sin(e))),XI={kernelName:Zn,backendName:"cpu",kernelFunc:KI},YI=Hb(Jn,(e=>Math.sinh(e))),ZI={kernelName:Jn,backendName:"cpu",kernelFunc:YI},JI=Math.log(1.1920928955078125e-7)+2,QI=Hb(ts,(e=>{const t=e>-JI,n=e<JI,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),eS={kernelName:ts,backendName:"cpu",kernelFunc:QI};const tS={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Gb([r],"spaceToBatchND");const o=Ys.sizeFromShape(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=bI.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=vu.getReshaped(u.shape,a,o,!1),h=vu.getPermuted(c.length,a.length,!1),p=vu.getReshapedPermuted(u.shape,a,o,!1),d=Nx({inputs:{x:u},backend:n,attrs:{shape:c}}),f=zx({inputs:{x:d},backend:n,attrs:{perm:h}}),m=Nx({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function nS(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(vu.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[Ys.getArrayFromDType(n,0),[0,h],Ys.getArrayFromDType(r,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(vu.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(vu.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=Ys.getArrayFromDType(n,t*h),p=Ys.getArrayFromDType(r,t),d=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=d[n],i=(0===n?0:f[n-1])+r;d[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[t,h],p,u,c]}}const sS={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=nS(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function rS(e,t,n,s,r){const a=Ys.sizeFromShape(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(vu.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(vu.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(vu.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(vu.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[c]=e}if(Ys.sizeFromShape(l)!==a)throw new Error(vu.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const h=s.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Ys.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*p[s];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[i,o],l]}const aS={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=rS(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function iS(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error(vu.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=c;const p=h.reduce(((e,t)=>e*t),1),d=Ys.getArrayFromDType(n,p);if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error(vu.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=r[f];for(;;){let t=0;if(m<o){if(t=r[m],y===t){++m;continue}if(y>=t)throw new Error(vu.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(vu.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(i,g*u,y*u);for(let t=f;t<m;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(vu.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<c&&d.fill(i,g*u,c*u),[d,h]}const oS={kernelName:us,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=iS(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const lS={kernelName:cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=iS(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const uS={kernelName:hs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=vu.calculateShapes(a,r,o),d=BI(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const cS={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Ys.parseAxisParam(i,r.shape)[0],l=vu.prepareSplitSize(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=cw({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},hS=ox((e=>Math.sqrt(e))),pS=Hb(ns,(e=>Math.sqrt(e))),dS={kernelName:ns,backendName:"cpu",kernelFunc:pS},fS={kernelName:ds,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Gb(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},mS=Qb(((e,t)=>{const n=e-t;return n*n})),gS=xx(ps,mS),yS={kernelName:ps,backendName:"cpu",kernelFunc:gS},bS=Hb(Es,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),xS={kernelName:Es,backendName:"cpu",kernelFunc:bS};function wS(e,t,n,s){const r=Ko(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const kS={kernelName:fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;Gb(r,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Wl.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let k;if(m)k=Nx({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){Ys.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Wl.computeOutShape(b,x,w),t=cw({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=Nx({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=wS(d,n.bufferSync(r),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class vS{constructor(e,t,n,s,r,a){this.separator=Ys.encodeString(e),this.nGramWidths=t,this.leftPad=Ys.encodeString(n),this.rightPad=Ys.encodeString(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length;p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=Ys.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const i=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach((a=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,a);this.createNGrams(e,s,i,r,l,a),r+=l})),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,l=1;this.createNGrams(e,s,i,r,l,o)}}return[i,a]}}function IS(e,t,n,s,r,a,i,o){return new vS(n,s,r,a,i,o).compute(e,t)}const SS={kernelName:ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=IS(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function NS(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function TS(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=r.length;NS(e[l],t,n,r);const u=r.length-s;o[l]=u,a+=u,i=Math.max(i,u)}const l=Ys.getArrayFromDType("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}const CS={kernelName:gs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=TS(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function $S(e,t){const n=Ys.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Ys.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const ES={kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=$S(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},AS=Hb(xs,(e=>Math.tan(e))),RS={kernelName:xs,backendName:"cpu",kernelFunc:AS},FS=Hb(ws,(e=>Math.tanh(e)));function DS(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Ko(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const _S=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function OS(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);OS(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(Ys.swap(e,n,t),_S(e[s],r)>0&&Ys.swap(e,n,s);a<i;){for(Ys.swap(e,a,i),a++,i--;_S(e[a],r)<0;)a+=1;for(;_S(e[i],r)>0;)i-=1}0===_S(e[n],r)?Ys.swap(e,n,i):(i+=1,Ys.swap(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function MS(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=Ys.getTypedArrayFromDType(n,i*s),u=Ys.getTypedArrayFromDType("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach(((e,t)=>i[t]={value:e,index:t})),s<i.length&&(OS(i,s),i=i.slice(0,s)),r&&i.sort(_S);const c=t*s,h=l.subarray(c,c+s),p=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[Ko(c,n,l),Ko(c,"int32",u)]}const LS={kernelName:Is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=[c,f,m,d],y=Ys.computeStrides(r.shape),b=y[0],x=y[1],w=y[2],k=Ys.getTypedArrayFromDType(r.dtype,Ys.sizeFromShape(g));k.fill(l);const v=s.data.get(r.dataId).values,I=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?I:I.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<d;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,d=(t[3]*s+t[4]*n+t[5])/u,f=zS(c,p,o),m=zS(d,h,o);switch(i){case"nearest":a=PS(v,h,p,b,x,w,e,m,f,r,l);break;case"bilinear":a=WS(v,h,p,b,x,w,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}k[e*b+n*x+s*w+r]=a}return s.makeTensorInfo(g,r.dtype,k)}return{dataId:s.write(k,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function zS(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Ys.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Ys.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Ys.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function BS(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function PS(e,t,n,s,r,a,i,o,l,u,c){return BS(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function WS(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*BS(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*BS(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*BS(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*BS(e,t,n,s,r,a,i,d,f,u,c))}function US(e,t,n,s){const r=Ys.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new Yr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Yr(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const VS=[Ex,Rx,Dx,Ox,Sx,Mx,Px,Wx,Ux,Vx,Hx,qx,Xx,Jx,ew,rw,aw,iw,ow,$x,lw,pw,mw,gw,bx,xw,kw,dx,vw,Cw,Ew,Aw,Rw,Fw,Dw,_w,Mw,zw,Bw,Pw,Ww,Uw,Gw,Hw,jw,qw,Kw,Xw,Yw,sk,Kb,rk,ok,mk,bk,wk,Ik,_k,Mk,Lk,Pk,Vk,Gk,Hk,qk,Xk,Jk,tv,Yb,nv,Nw,rv,iv,lv,Jb,hv,fv,gv,xv,kv,Sv,Tv,Ev,Av,Rv,_v,Lv,zv,Bv,Pv,Wv,Uv,Vv,Gv,qv,Kv,Zv,eI,ek,nI,rI,iI,lI,hI,pI,mI,yI,bI,kI,nx,II,NI,gx,Tk,CI,rx,ix,Tx,$I,EI,AI,RI,FI,DI,OI,zI,PI,WI,HI,cx,qI,XI,ZI,hw,Qv,eS,tS,sS,aS,oS,lS,uS,cS,dS,fS,yS,xS,kS,SS,CS,ES,Ak,nk,RS,{kernelName:ws,backendName:"cpu",kernelFunc:FS},{kernelName:ks,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;Gb(r,"tile");const i=DS(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:vs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;Gb(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=MS(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},LS,Bx,{kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;Gb(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=US(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=cw({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=Nx({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:Cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;Gb(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=xk({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=Ys.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=ik({inputs:{a:s,b:c},backend:n}),i=yx({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=Qw({inputs:{a:i,b:r},backend:n}),h=tk({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=gI({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},fI];for(const e of VS)Gs(e);const GS=xh.whereImpl;class HS extends l{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new o(this,Mh())}nextDataId(){return HS.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,le().get("IS_NODE")&&vu.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Ys.isString(n[0])){const r=n.map((e=>Ys.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return vu.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Ys.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ko(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return Mh().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Ys.now();e();return{kernelMs:Ys.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Gb([e],"where");const t=this.readSync(e.dataId);return GS(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}HS.nextDataId=0;function jS(){let e,t,n,s,r,a,i,o,l,u;return 2===le().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function qS(e,t,n="index"){const s=Ys.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function KS(e,t,n="index"){const s=Ys.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function XS(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${s[r]}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}function YS(e){const t=Ys.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Xh("cpu",(()=>new HS),1);const ZS="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:JS}=vu;function QS(e,t,n){const s=[];if(e.forEach((e=>{const t=Ys.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=cN(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?tN(e,s):eN(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=JS(e.shapeInfo.logicalShape,t.logicalShape),l=uN(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===Ys.sizeFromShape(e.shapeInfo.logicalShape),m=1===Ys.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&Ys.arraysEqual(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=uN(l),c=JS(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=jS(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${nN}\n    ${sN}\n    ${rN}\n  `}(o);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return iN();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Ys.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return iN();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Ys.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${KS(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=qS(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${KS(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=qS(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=qS(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=qS(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=aN);return[h,l,c,r,u,a,n.userCode].join("\n")}function eN(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=oN(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${lN(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=oN(n);if(1===i)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&Ys.arraysEqual(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=Ys.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${eN(hN(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${pN(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${lN(e)}\n      }\n    `;const u=a[0],c=a[1],h=oN(s);if(1===c)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;return t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=Ys.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${eN(hN(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${pN(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${lN(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=oN(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${a} + col * ${i} + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=Ys.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${eN(hN(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${pN(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${lN(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=oN(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=Ys.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${eN(hN(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${pN(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${lN(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=oN(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=Ys.squeezeShape(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${eN(hN(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${pN(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${lN(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=oN(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function tN(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=jS();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=jS();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=jS();if(null!=a&&Ys.arraysEqual(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${tN(hN(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${pN(a,s)});\n        }\n      `}const o=jS();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=jS();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=a[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const nN="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",sN="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",rN="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",aN="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function iN(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function oN(e){return`offset${e}`}function lN(e){const t=e.name,n=Ys.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function uN(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function cN(e,t,n){const{newShape:s,keptDims:r}=Ys.squeezeShape(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!Ys.arraysEqual(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function hN(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function pN(e,t){return t.map((t=>e[t])).join(", ")}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const dN={},fN={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function mN(e,t){if(!(e in dN)){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete dN[e]}),!1),1===e?n.getContext("webgl",fN)||n.getContext("experimental-webgl",fN):n.getContext("webgl2",fN)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;dN[e]=n}const n=dN[e];return null==n||n.isContextLost()?(delete dN[e],mN(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),dN[e])}var gN,yN,bN;function xN(e,t){return[t,e]}function wN(e){const t=Ys.sizeFromShape(e),n=Math.ceil(t/4);return Ys.sizeToSquarishShape(n)}function kN(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function vN(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===le().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function IN(e,t){const n=t();return le().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(gN||(gN={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(yN||(yN={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(bN||(bN={}));function SN(e){return!!(le().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function NN(e,t){return _N(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function TN(e,t){const n=_N(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(IN(e,(()=>e.shaderSource(n,t))),IN(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=CN.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>Ys.rightPad((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Ys.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const CN=/ERROR: [0-9]+:([0-9]+):/g;function $N(e,t){if(IN(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function EN(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(IN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),IN(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),IN(e,(()=>e.enableVertexAttribArray(o))),!0)}function AN(e,t,n,s){IN(e,(()=>function(e,t,n){ON(e,n),IN(e,(()=>e.activeTexture(e.TEXTURE0+n))),IN(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),IN(e,(()=>e.uniform1i(n,s)))}function RN(e,t,n){IN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),IN(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function FN(e,t){IN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),IN(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function DN(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function _N(e,t,n){const s=IN(e,(()=>t()));if(null==s)throw new Error(n);return s}function ON(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function MN(e,t=2){return Ys.sizeFromShape(e.slice(0,e.length-t))}function LN(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function zN(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[MN(e),...LN(e)]),t}function BN(e){return e%2==0}function PN(e,t){if(e=e.slice(-2),t=t.slice(-2),Ys.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(BN(n)&&BN(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&BN(e[0])&&BN(t[0])}let WN,UN;function VN(e,t){return null!=e.getExtension(t)}function GN(e){try{if(null!=mN(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function HN(e){if(0===e)return!1;const t=mN(e);if(1!==e){if(VN(t,"EXT_color_buffer_float"))return jN(t);const e="EXT_color_buffer_half_float";if(VN(t,e)){const n=t.getExtension(e);return function(e,t){const n=vN(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!VN(t,"OES_texture_float"))return!1;if(!VN(t,"WEBGL_color_buffer_float"))return!1;return jN(t)}function jN(e){const t=vN(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function qN(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Ys.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function KN(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!Ys.arraysEqual(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!Ys.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function XN(e){return le().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class YN{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=vu.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=XN(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function ZN(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function JN(e,t){return 1===t?[e]:ZN(e,t)}class QN{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=vu.assertAndGetBroadcastShape(t,n);const r=this.outputShape.length;this.enableShapeUniforms=XN(r);let a="";if(s)if(0===r||1===Ys.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${uN(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=JN("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function eT(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const tT={kernelName:Ut,backendName:"webgl",kernelFunc:eT};function nT(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=eT({inputs:{x:s},backend:n}),l=eT({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const sT={kernelName:tt,backendName:"webgl",kernelFunc:nT},rT="return (a < 0.) ? b * a : a;",aT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const iT={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",Ys.createScalarValue(a,"float32")),o=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new QN(aT,r.shape,i.shape):new YN(rT,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},oT="return (a < 0.) ? b * a : a;",lT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const uT={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new QN(lT,s.shape,r.shape):new YN(oT,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}};class cT{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const hT="return abs(x);";const pT="return x;";class dT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function fT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new dT(i.shape,t):new cT(i.shape,e),o.runWebGLProgram(u,[i],l)}}function mT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new YN(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],fa(n.dtype,s.dtype))})),a=nT({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||fa(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?vu.fromUint8ToStringArray(e):e,s="string"===l.dtype?vu.fromUint8ToStringArray(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new QN(t,l.shape,u.shape,n):new YN(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function gT(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?lT:oT;if("leakyrelu"===e)return t?aT:rT;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class yT{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=XN(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const bT="return areal * breal - aimag * bimag;",xT="return areal * bimag + aimag * breal;";class wT{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=vu.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var kT={};n(kT,"simpleAbsImpl",(()=>Ax)),n(kT,"addImpl",(()=>kx)),n(kT,"bincountImpl",(()=>dw)),n(kT,"bincountReduceImpl",(()=>fw)),n(kT,"ceilImpl",(()=>yw)),n(kT,"concatImpl",(()=>Iw)),n(kT,"equalImpl",(()=>ak)),n(kT,"expImpl",(()=>gk)),n(kT,"expm1Impl",(()=>kk)),n(kT,"floorImpl",(()=>zk)),n(kT,"gatherNdImpl",(()=>jk)),n(kT,"gatherV2Impl",(()=>Kk)),n(kT,"greaterImpl",(()=>Yk)),n(kT,"greaterEqualImpl",(()=>Qk)),n(kT,"lessImpl",(()=>uv)),n(kT,"lessEqualImpl",(()=>pv)),n(kT,"linSpaceImpl",(()=>mv)),n(kT,"logImpl",(()=>yv)),n(kT,"maxImpl",(()=>Fv)),n(kT,"maximumImpl",(()=>Ov)),n(kT,"minimumImpl",(()=>Hv)),n(kT,"multiplyImpl",(()=>Zw)),n(kT,"negImpl",(()=>tI)),n(kT,"notEqualImpl",(()=>uI)),n(kT,"prodImpl",(()=>vI)),n(kT,"rangeImpl",(()=>SI)),n(kT,"rsqrtImpl",(()=>MI)),n(kT,"sigmoidImpl",(()=>lx)),n(kT,"sliceImpl",(()=>uw)),n(kT,"sparseFillEmptyRowsImpl",(()=>nS)),n(kT,"sparseReshapeImpl",(()=>rS)),n(kT,"sparseSegmentReductionImpl",(()=>iS)),n(kT,"sqrtImpl",(()=>hS)),n(kT,"squaredDifferenceImpl",(()=>mS)),n(kT,"stridedSliceImpl",(()=>wS)),n(kT,"stringNGramsImpl",(()=>IS)),n(kT,"stringSplitImpl",(()=>TS)),n(kT,"stringToHashBucketFastImpl",(()=>$S)),n(kT,"subImpl",(()=>Ck)),n(kT,"tileImpl",(()=>DS)),n(kT,"topKImpl",(()=>MS)),n(kT,"transposeImpl",(()=>Lx)),n(kT,"uniqueImpl",(()=>US));const{addImpl:vT,bincountImpl:IT,bincountReduceImpl:ST,ceilImpl:NT,concatImpl:TT,equalImpl:CT,expImpl:$T,expm1Impl:ET,floorImpl:AT,gatherNdImpl:RT,gatherV2Impl:FT,greaterImpl:DT,greaterEqualImpl:_T,lessImpl:OT,lessEqualImpl:MT,linSpaceImpl:LT,logImpl:zT,maxImpl:BT,maximumImpl:PT,minimumImpl:WT,multiplyImpl:UT,negImpl:VT,notEqualImpl:GT,prodImpl:HT,rangeImpl:jT,rsqrtImpl:qT,sigmoidImpl:KT,simpleAbsImpl:XT,sliceImpl:YT,sparseFillEmptyRowsImpl:ZT,sparseReshapeImpl:JT,sparseSegmentReductionImpl:QT,sqrtImpl:eC,stridedSliceImpl:tC,stringNGramsImpl:nC,stringSplitImpl:sC,stringToHashBucketFastImpl:rC,subImpl:aC,tileImpl:iC,topKImpl:oC,transposeImpl:lC,uniqueImpl:uC}=kT,cC="return a * b;";function hC(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=vu.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new wT(bT,s.shape,r.shape),i=new wT(xT,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=nT({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=UT(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new QN(cC,s.shape,r.shape):new YN(cC,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const pC={kernelName:wn,backendName:"webgl",kernelFunc:hC};class dC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?XS(["r","c","d"],"inputShape"):qS(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":YS(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function fC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=Ys.sizeFromShape(r.shape),l=Ys.inferFromImplicitShape(a,o),u=Ys.sizeFromShape(l);Ys.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||PN(r.shape,l)||null!==c.texture&&PN(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[MN(e.shape),...LN(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[MN(t),...LN(t)],i=new dC(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const mC={kernelName:zn,backendName:"webgl",kernelFunc:fC};class gC{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${Ys.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class yC{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function bC(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=vu.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new gC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new gC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new yC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class xC{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=uN(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class wC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=uN(this.rank),r=ZN("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function kC(e,t,n){const s=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wC(e.shape,t):new xC(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function vC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=Ys.parseAxisParam(r,e.shape);let o=i;const l=vu.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=kC(e,l,s),o=vu.getInnerMostAxes(o.length,a)),vu.assertAxesAreInnerMostDims("sum",o,a);const[h,p]=vu.computeOutAndReduceShapes(c.shape,o);let d=h;n&&(d=vu.expandShapeToKeepDim(h,i));const f=Ys.sizeFromShape(p),m=fC({inputs:{x:c},attrs:{shape:[Ys.sizeFromShape(e.shape)/f,f]},backend:s}),g=bC(m,ma(e.dtype),"sum",s),y=fC({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const IC={kernelName:ss,backendName:"webgl",kernelFunc:vC};function SC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=lC(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=kC(r,a,i);return u}const NC={kernelName:Ss,backendName:"webgl",kernelFunc:SC};function TC({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Ys.sizeFromShape(m),b=Ys.sizeFromShape(g),x=Il.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Ys.assert(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],k=s?[b,f,p]:[b,p,f],v=fC({inputs:{x:e},backend:r,attrs:{shape:w}}),I=fC({inputs:{x:t},backend:r,attrs:{shape:k}}),S=[v,I],N=Math.max(y,b),T=n?v.shape[1]:v.shape[2],C=null!=a,$=null!=i,E="leakyrelu"===l,A=null!=l?gT(l,!0):null;let R;if((1===d||1===f)&&T>1e3&&!1===(C||$||E||null!=A)){let e=v,t=I;n&&(e=SC({inputs:{x:v},backend:r,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=SC({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let i=e;1!==f&&(i=fC({inputs:{x:e},backend:r,attrs:{shape:[N,T,1]}}),S.push(i));const o=1===f?2:1;let l=t;a&&(l=fC({inputs:{x:t},backend:r,attrs:{shape:[N,1,T]}}),S.push(l));const u=hC({inputs:{a:i,b:l},backend:r});R=vC({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const l=fa(e.dtype,t.dtype),u=new yT(w,k,[N,d,f],n,s,C,A,$,E),c=[v,I];if(null!=a&&c.push(a),$&&c.push(i),E){const e=r.makeTensorInfo([],"float32",Ys.createScalarValue(o,"float32"));c.push(e),S.push(e)}R=r.runWebGLProgram(u,c,l)}const F=fC({inputs:{x:R},backend:r,attrs:{shape:x}});S.push(R);for(const e of S)r.disposeIntermediateTensorInfo(e);return F}const CC={kernelName:Fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return TC({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},$C="return abs(x);";const EC={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=XT(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new dT(s.shape,$C):new cT(s.shape,$C),n.runWebGLProgram(r,[s],s.dtype)}},AC=fT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),RC={kernelName:Ae,backendName:"webgl",kernelFunc:AC},FC=fT({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),DC={kernelName:Re,backendName:"webgl",kernelFunc:FC},_C="return a + b;",OC=mT({opSnippet:_C,packedOpSnippet:_C,supportsComplex:!0,cpuKernelImpl:vT}),MC={kernelName:Fe,backendName:"webgl",kernelFunc:OC};class LC{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class zC{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const BC={kernelName:De,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return eT({inputs:{x:r[0]},backend:s});if(r.length>le().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>fa(e,t))),i=r.map((e=>e.shape)),o=le().getBool("WEBGL_PACK")?new zC(r[0].shape,i):new LC(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const PC={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Ys.parseAxisParam(a,r.shape);let u=l;const c=vu.getAxesPermutation(u,o);let h=r;null!=c&&(h=SC({inputs:{x:r},backend:n,attrs:{perm:c}}),u=vu.getInnerMostAxes(u.length,o)),vu.assertAxesAreInnerMostDims("all",u,o);const[p,d]=vu.computeOutAndReduceShapes(h.shape,u),f=fC({inputs:{x:h},backend:n,attrs:{shape:[-1,Ys.sizeFromShape(d)]}}),m=bC(f,f.dtype,"all",n);let g;if(i){g=fC({inputs:{x:m},backend:n,attrs:{shape:vu.expandShapeToKeepDim(p,l)}})}else g=fC({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const WC={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Ys.parseAxisParam(a,r.shape);let u=l;const c=vu.getAxesPermutation(u,o);let h=r;null!=c&&(h=SC({inputs:{x:r},backend:n,attrs:{perm:c}}),u=vu.getInnerMostAxes(u.length,o)),vu.assertAxesAreInnerMostDims("any",u,o);const[p,d]=vu.computeOutAndReduceShapes(h.shape,u),f=fC({inputs:{x:h},backend:n,attrs:{shape:[-1,Ys.sizeFromShape(d)]}}),m=bC(f,f.dtype,"any",n);let g;if(i){g=fC({inputs:{x:m},backend:n,attrs:{shape:vu.expandShapeToKeepDim(p,l)}})}else g=fC({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class UC{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class VC{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Ys.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=uN(o),u=JN("coords",o);let c,h;if(1===a){h=o+1;const e=uN(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=JN("sourceLocR",h-1).concat("inIdx.r"),g=JN("sourceLocG",h-1).concat("inIdx.g"),y=JN("sourceLocB",h-1).concat("inIdx.b"),b=JN("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function GC(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=vu.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new UC(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=GC(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function HC(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=r[r.length-1],i=vu.computeOptimalWindowSize(a),o=new VC(r,i,n,null==s),l=null==s?[t]:[t,s],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){const s=HC(e,t,n,u);return e.disposeIntermediateTensorInfo(u),s}return u}function jC(e,t,n,s){const r=[n];if(vu.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!le().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=vu.computeOutAndReduceShapes(i.shape,r),u=Ys.sizeFromShape(l),c=fC({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=GC(e,c,s);n.push(h);const p=fC({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return HC(e,t,s)}const qC={kernelName:Me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Ys.parseAxisParam(a,r.shape);const o=vu.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=SC({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=vu.getInnerMostAxes(i.length,l.shape.length)),vu.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const c=jC(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const KC={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Ys.parseAxisParam(a,r.shape);const o=vu.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=SC({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=vu.getInnerMostAxes(i.length,l.shape.length)),vu.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const c=jC(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},XC=fT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),YC={kernelName:ze,backendName:"webgl",kernelFunc:XC},ZC=fT({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),JC={kernelName:Be,backendName:"webgl",kernelFunc:ZC},QC=fT({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),e$={kernelName:Pe,backendName:"webgl",kernelFunc:QC},t$=mT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),n$={kernelName:Ue,backendName:"webgl",kernelFunc:t$},s$=fT({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),r$={kernelName:We,backendName:"webgl",kernelFunc:s$};class a${constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class i${constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const o$={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;qN(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Ys.assert(vu.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=vu.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Ys.arraysEqual(u.inShape,u.outShape))return eT({inputs:{x:r},backend:n});const c=new a$(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const l$={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=vu.computePool3DInfo(r.shape,a,i,[1,1,1],o,l,u),h=new i$(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class u${constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class c${constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const h$={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=vu.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new c$(h);return n.runWebGLProgram(p,[r],i.dtype)}};const p$={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;qN([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=vu.computePool2DInfo(i.shape,o,l,1,u),h=new u$(c);return n.runWebGLProgram(h,[r],i.dtype)}};const d$={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return TC({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class f${constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],vu.assertAndGetBroadcastShape(e,t),vu.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(vu.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(vu.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class m${constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],vu.assertAndGetBroadcastShape(e,t),vu.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(vu.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(vu.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const g$={kernelName:Lt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;Ys.assert(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Ys.assert(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Ys.assert(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=le().getBool("WEBGL_PACK_NORMALIZATION")?new m$(s.shape,r.shape,a.shape,c,h,l):new f$(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class y${constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=uN(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return b$.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${b$[t]} = start[${t}] + coords.${b$[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const b$=["x","y","z","w","u","v"];class x${constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=uN(this.rank),n=JN("coords",this.rank),s=JN("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function w$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Wl.parseSliceParams(r,a,i);if(Wl.assertParamsValid(r,o,l),0===Ys.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=YT(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Wl.isSliceContinous(r.shape,o,l);if(u||!c){const e=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new x$(l):new y$(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Wl.computeFlatOffset(t,Ys.computeStrides(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const k$={kernelName:Yn,backendName:"webgl",kernelFunc:w$},v$={kernelName:Ke,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Ys.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=vu.getReshaped(r.shape,a,o),u=vu.getPermuted(l.length,a.length),c=vu.getReshapedPermuted(r.shape,a,o),h=vu.getSliceBeginCoords(i,a.length),p=vu.getSliceSize(c,i,a.length),d=[],f=fC({inputs:{x:r},backend:n,attrs:{shape:l}}),m=SC({inputs:{x:f},backend:n,attrs:{perm:u}}),g=fC({inputs:{x:m},backend:n,attrs:{shape:c}}),y=w$({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const I$={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=IT(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}};const S$={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=vu.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},N$=mT({opSnippet:"return float(a != b);",cpuKernelImpl:GT,dtype:"bool"}),T$={kernelName:vn,backendName:"webgl",kernelFunc:N$};function C$(e){const{inputs:t,backend:n}=e,{input:s}=t;return eT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const $$={kernelName:On,backendName:"webgl",kernelFunc:C$};const E$={kernelName:Je,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return eT({inputs:{x:a},backend:s});const t=op(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=nT({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=C$({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!Ys.hasEncodingLoss(a.dtype,i)){const e=eT({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new cT(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",Ys.getTypedArrayFromDType("bool",1)),t=N$({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},A$="return ceil(x);",R$=fT({opSnippet:A$,packedOpSnippet:A$,cpuKernelImpl:NT}),F$={kernelName:Qe,backendName:"webgl",kernelFunc:R$};class D${constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class _${constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const O$={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=le().getBool("WEBGL_PACK_CLIP")?new _$(r.shape):new D$(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class M${constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function L$(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const z$={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new M$(s.shape),i=[L$(s,r.complexTensorInfos.real),L$(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class B${constructor(e){this.outputShape=[],this.outputShape=vu.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class P${constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=vu.computeOutShape(e,t);const n=this.outputShape,s=n.length,r=uN(s),a=JN("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${W$(i,l,t)}),\n            vec2(${W$(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${W$(i,l,d)}),\n          vec2(${W$(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function W$(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function U$(e){const{inputs:t,backend:n}=e,{input:s}=t;return eT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const V$={kernelName:Gt,backendName:"webgl",kernelFunc:U$};function G$(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>C$({inputs:{input:e},backend:n}))),r=e.map((e=>U$({inputs:{input:e},backend:n}))),a=G$(s,t,n),i=G$(r,t,n),o=nT({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=Ys.sizeFromShape(e.shape.slice(t));return fC({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=vu.computeOutShape(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=TT(a,i,s,o),u=vu.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>le().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=G$(e.slice(0,s),t,n),a=G$(e.slice(s),t,n),i=G$([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new P$(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:a,outShape:i}=function(e,t,n){const s=vu.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>fC({inputs:{x:e},attrs:{shape:[-1,Ys.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),o=new B$(a.map((e=>e.shape))),l=n.runWebGLProgram(o,a,s);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=fC({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function H$(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Ys.parseAxisParam(r,t[0].shape)[0],i=vu.computeOutShape(t.map((e=>e.shape)),a);if(0===Ys.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>Ys.sizeFromShape(e.shape)>0));if(1===o.length)return eT({inputs:{x:o[0]},backend:n});const l=o.map((e=>e.shape));return vu.assertParamsConsistent(l,a),G$(o,a,n)}const j$={kernelName:st,backendName:"webgl",kernelFunc:H$};class q${constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class K${constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class X${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length);const{dataFormat:n}=t,s=jS(),r="channelsLast"===n,a=r?0:1,i=r?1:2,o=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function Y$({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(!((1===h||1===p)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&Ys.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Ys.assert(PN(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const d=fC({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=TC({a:h,b:d,backend:s,transposeA:false,transposeB:false,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),y=s.texData.get(g.dataId);Ys.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,y.shape=n.outShape,f=eT({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const u=fC({inputs:{x:e},backend:s,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=fC({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=TC({a:u,b:c,transposeA:false,transposeB:false,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=fC({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function Z$({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[],x=fC({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=fC({inputs:{x:t},backend:s,attrs:{shape:[1,m,Ys.sizeFromShape(t.shape)/m]}});b.push(x),b.push(w);const k=new X$(y,n),v=[x.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],I=s.runWebGLProgram(k,[x],"float32",v),S=fC({inputs:{x:I},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(I),b.push(S);const N=null!=r,T=null!=a,C="leakyrelu"===o,$=o?gT(o,!0):null,E=new yT(S.shape,w.shape,[1,g,n.outChannels],!0,!1,N,$,T,C),A=[S,w];if(r&&A.push(r),T&&A.push(a),C){const e=s.makeTensorInfo([],"float32",Ys.createScalarValue(i,"float32"));A.push(e),b.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=fC({inputs:{x:R},backend:s,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(R);for(const e of b)s.disposeIntermediateTensorInfo(e);return F}const J$={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=vu.convertConv2DDataFormat(l),p=vu.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(le().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=Z$({x:r,filter:a,convInfo:p,backend:n});else{const e=new q$(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=Y$({x:r,filter:a,convInfo:p,backend:n});const f=fC({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class Q${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class eE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const sE={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=vu.convertConv2DDataFormat(l),p=vu.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),d=new Q$(p);return n.runWebGLProgram(d,[r,a],"float32")}};const rE={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=vu.convertConv2DDataFormat(u),p=vu.computeConv2DInfo(i,a.shape,o,1,l,c,!1,h),d=new eE(p);return n.runWebGLProgram(d,[r,a],"float32")}};const aE={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=vu.computeConv3DInfo(r.shape,a.shape,i,l,o),c=new K$(u);return n.runWebGLProgram(c,[r,a],"float32")}};const iE={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=vu.computeConv3DInfo(r.shape,l,i,1,o),c=new tE(u);return n.runWebGLProgram(c,[r,a],"float32")}};const oE={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=vu.computeConv3DInfo(l,a.shape,o,1,i),c=new nE(u);return n.runWebGLProgram(c,[r,a],"float32")}},lE=fT({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),uE={kernelName:ct,backendName:"webgl",kernelFunc:lE},cE=fT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),hE={kernelName:ht,backendName:"webgl",kernelFunc:cE};class pE{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const dE={kernelName:dt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new pE(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class fE{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${mE(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${uN(s)} coords = getOutputCoords();\n        int end = ${gE(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${gE(s,"coords")} = idx;\n          val += getX(${mE(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function mE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function gE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const yE={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=vu.getAxesPermutation([a],l);let c=r;null!=u&&(c=SC({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=vu.getInnerMostAxes(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=eT({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new fE(c.shape,!1,o),s=[[e]],r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new fE(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=SC({inputs:{x:d},backend:n,attrs:{perm:vu.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const bE={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=IT(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=ST(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class xE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const wE={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new xE("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class kE{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=XN(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class vE{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=XN(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?Ys.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,l>1&&(p+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const IE={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),Ys.assert(vu.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=vu.computeConv2DInfo(r.shape,a.shape,i,c,o,u,!0);let p;p=le().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new vE(h):new kE(h);const d=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(p,[r,a],"float32",d)}};class SE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const TE={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=vu.computeConv2DInfo(r.shape,c,i,o,l,u,!0),p=new SE(h);return n.runWebGLProgram(p,[r,a],"float32")}};const CE={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=vu.computeConv2DInfo(c,a.shape,i,o,l,u,!0),p=new NE(h);return n.runWebGLProgram(p,[r,a],"float32")}};class $E{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const EE={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=Ys.sizeFromShape(s.shape),i=fC({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new $E(a),l=n.runWebGLProgram(o,[i],i.dtype),u=fC({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class AE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const RE={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=vu.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new AE(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=fC({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const FE={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=vu.decodeEinsumEquation(r,a.length);vu.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=vu.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=vu.getEinsumPermutation(d,l[t]);let r;vu.isIdentityPermutation(e)?r=a[t]:(r=SC({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);Ys.arraysEqual(r.shape,i)||(r=fC({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=hC({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=vC({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},DE=fT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),_E={kernelName:Nt,backendName:"webgl",kernelFunc:DE},OE={kernelName:Tt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new QN("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new YN("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},ME=mT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:CT}),LE={kernelName:$t,backendName:"webgl",kernelFunc:ME},zE=fT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${vu.ERF_P};\n  float a1 = ${vu.ERF_A1};\n  float a2 = ${vu.ERF_A2};\n  float a3 = ${vu.ERF_A3};\n  float a4 = ${vu.ERF_A4};\n  float a5 = ${vu.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),BE={kernelName:Ct,backendName:"webgl",kernelFunc:zE},PE=fT({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:$T,dtype:"float32"}),WE={kernelName:Et,backendName:"webgl",kernelFunc:PE};function UE(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(Ys.assert(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),fC({inputs:{x:a},backend:s,attrs:{shape:o}})}const VE={kernelName:At,backendName:"webgl",kernelFunc:UE},GE="return exp(x) - 1.0;",HE=fT({opSnippet:GE,packedOpSnippet:GE,cpuKernelImpl:ET}),jE={kernelName:Rt,backendName:"webgl",kernelFunc:HE};class qE{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function KE(e,t,n){const s=n.texData.get(e.dataId),r=Ys.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],i=fC({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new qE("real",o,t),u=new qE("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=nT({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=fC({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const XE={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return KE(s,!1,n)}};class YE{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function ZE(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Ys.inferDtype(r),"string"===a){const e=Ys.getArrayFromDType(a,Ys.sizeFromShape(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new YE(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const JE={kernelName:Dt,backendName:"webgl",kernelFunc:ZE};class QE{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const eA={kernelName:_t,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new QE(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},tA="return floor(x);",nA=fT({opSnippet:tA,packedOpSnippet:tA,cpuKernelImpl:AT}),sA={kernelName:Ot,backendName:"webgl",kernelFunc:nA},rA=mT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),aA={kernelName:Mt,backendName:"webgl",kernelFunc:rA};class iA{constructor(e){this.variableNames=["A"];const t=jS(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class oA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=jS(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const lA={kernelName:As,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==uA&&(uA=document.createElement("canvas").getContext("2d")),uA.canvas.width=l,uA.canvas.height=u,uA.drawImage(r,0,0,l,u),r=uA.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=yN.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=le().getBool("WEBGL_PACK")?new oA(h):new iA(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let uA;const cA={kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=vu.convertConv2DDataFormat(c),g=vu.computeConv2DInfo(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(le().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=Z$({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?gT(d,!1):null,u=new q$(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",Ys.createScalarValue(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=Y$({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=fC({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const hA={kernelName:_s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),Ys.assert(vu.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=vu.computeConv2DInfo(r.shape,a.shape,l,m,u,h,!0),y=le().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?gT(p,y):null,x=[r,a],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",Ys.createScalarValue(d,"float32"));x.push(e),f.push(e)}let I;I=y?new vE(g,w,b,k,v):new kE(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],N=n.runWebGLProgram(I,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class pA{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=uN(t.length),r=uN(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const dA={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=Ys.sizeFromShape(s.shape),[l,u,c,h]=vu.prepareAndValidate(s,r),p=fC({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),d=fC({inputs:{x:s},backend:n,attrs:{shape:[Ys.sizeFromShape(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=RT(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new pA(i,h,[u,c]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=fC({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class fA{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=uN(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function mA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Ys.parseAxisParam(i,r.shape)[0];if(le().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];Ys.assert(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=vu.segment_util.collectGatherOpShapeInfo(r,a,l,o),c=Ys.sizeFromShape(a.shape),h=[],p=fC({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=fC({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(p),h.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=FT(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new fA(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const y=fC({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const gA={kernelName:zt,backendName:"webgl",kernelFunc:mA},yA=mT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:DT,dtype:"bool"}),bA={kernelName:Pt,backendName:"webgl",kernelFunc:yA},xA=mT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:_T}),wA={kernelName:Wt,backendName:"webgl",kernelFunc:xA};const kA={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return KE(s,!0,n)}},vA=fT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),IA={kernelName:Ht,backendName:"webgl",kernelFunc:vA},SA=fT({opSnippet:"return float(isinf(x));",dtype:"bool"}),NA={kernelName:jt,backendName:"webgl",kernelFunc:SA},TA=fT({opSnippet:"return float(isnan(x));",dtype:"bool"}),CA={kernelName:qt,backendName:"webgl",kernelFunc:TA},$A=mT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:OT,dtype:"bool"}),EA={kernelName:Xt,backendName:"webgl",kernelFunc:$A},AA=mT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:MT,dtype:"bool"}),RA={kernelName:Yt,backendName:"webgl",kernelFunc:AA};const FA={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=LT(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},DA=fT({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:zT}),_A={kernelName:Jt,backendName:"webgl",kernelFunc:DA},OA=fT({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),MA={kernelName:Qt,backendName:"webgl",kernelFunc:OA},LA=mT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),zA={kernelName:en,backendName:"webgl",kernelFunc:LA},BA=fT({opSnippet:"return float(!(x >= 1.0));"}),PA={kernelName:tn,backendName:"webgl",kernelFunc:BA},WA=mT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),UA={kernelName:nn,backendName:"webgl",kernelFunc:WA};class VA{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class GA{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const HA={kernelName:rn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=le().getBool("WEBGL_PACK_NORMALIZATION")?new GA(r.shape,a,i,o,l):new VA(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class jA{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const qA={kernelName:an,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new jA(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function KA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=Ys.parseAxisParam(a,r.shape);let u=l;const c=vu.getAxesPermutation(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=lC(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype);n.texData.get(d.dataId).values=s}else d=kC(r,c,n);u=vu.getInnerMostAxes(u.length,o)}vu.assertAxesAreInnerMostDims("max",u,o);const[f,m]=vu.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(i&&(y=vu.expandShapeToKeepDim(f,l)),p){const e=n.texData.get(d.dataId).values,t=BT(e,Ys.sizeFromShape(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=Ys.sizeFromShape(t),a=fC({inputs:{x:e},attrs:{shape:[Ys.sizeFromShape(e.shape)/r,r]},backend:s}),i=bC(a,e.dtype,"max",s),o=fC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const XA={kernelName:on,backendName:"webgl",kernelFunc:KA},YA=mT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:PT}),ZA={kernelName:ln,backendName:"webgl",kernelFunc:YA};const JA={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;qN(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Ys.assert(vu.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=vu.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Ys.arraysEqual(u.inShape,u.outShape))return eT({inputs:{x:r},backend:n});const c=new a$(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const QA={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=vu.computePool3DInfo(r.shape,a,i,[1,1,1],o,u,l),h=new i$(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class eR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const nR={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=vu.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new i$(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new tR(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const sR={kernelName:cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;qN([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=vu.computePool2DInfo(o.shape,l,u,1,c,h),d=new a$(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new eR(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const rR={kernelName:dn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Ys.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];Ys.assert(vu.eitherStridesOrDilationsAreOne(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=vu.computePool2DInfo(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new a$(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new a$(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}};const aR={kernelName:fn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=Ys.parseAxisParam(a,s.shape);let u=l;const c=vu.getAxesPermutation(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=lC(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype);i.texData.get(f.dataId).values=n}else f=kC(s,c,i);d.push(f),u=vu.getInnerMostAxes(u.length,o)}vu.assertAxesAreInnerMostDims("sum",u,o);const[m,g]=vu.computeOutAndReduceShapes(f.shape,u);let y=m;r&&(y=vu.expandShapeToKeepDim(m,l));const b=function(e,t,n,s){const r=Ys.sizeFromShape(t),a=fC({inputs:{x:e},attrs:{shape:[Ys.sizeFromShape(e.shape)/r,r]},backend:s}),i=bC(a,"float32","mean",s),o=fC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}};const iR={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Ys.parseAxisParam(a,r.shape);let u=l;const c=vu.getAxesPermutation(u,o);let h=r;null!=c&&(h=SC({inputs:{x:r},backend:n,attrs:{perm:c}}),u=vu.getInnerMostAxes(u.length,r.shape.length)),vu.assertAxesAreInnerMostDims("min",u,o);const[p,d]=vu.computeOutAndReduceShapes(h.shape,u),f=fC({inputs:{x:h},backend:n,attrs:{shape:[-1,Ys.sizeFromShape(d)]}}),m=bC(f,f.dtype,"min",n);let g;if(i){g=fC({inputs:{x:m},backend:n,attrs:{shape:vu.expandShapeToKeepDim(p,l)}})}else g=fC({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},oR=mT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:WT}),lR={kernelName:gn,backendName:"webgl",kernelFunc:oR};class uR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=uN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class cR{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=uN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=JN("rc",s),l=JN("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const hR={kernelName:yn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cR(s.shape,r,a):new uR(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},pR=mT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),dR={kernelName:bn,backendName:"webgl",kernelFunc:pR};class fR{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const mR=mT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),gR={kernelName:It,backendName:"webgl",kernelFunc:mR},yR="return a - b;",bR=mT({opSnippet:yR,packedOpSnippet:yR,supportsComplex:!0,cpuKernelImpl:aC}),xR={kernelName:bs,backendName:"webgl",kernelFunc:bR};function wR(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=Ys.parseAxisParam([a],r.shape),o=KA({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=vu.expandShapeToKeepDim(o.shape,i),u=fC({inputs:{x:o},backend:n,attrs:{shape:l}}),c=bR({inputs:{a:r,b:u},backend:n}),h=PE({inputs:{x:c},backend:n}),p=vC({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=fC({inputs:{x:p},backend:n,attrs:{shape:l}}),f=mR({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const kR={kernelName:is,backendName:"webgl",kernelFunc:wR};const vR={kernelName:xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:wR({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new fR(u,c,a),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}};const IR={kernelName:kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=VT(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new dT(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new cT(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(r,[s],s.dtype)}},SR=xh.nonMaxSuppressionV3Impl;const NR={kernelName:In,backendName:"webgl",kernelFunc:function(e){vu.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=SR(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},TR=xh.nonMaxSuppressionV4Impl;const CR={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){vu.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=TR(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},$R=xh.nonMaxSuppressionV5Impl;const ER={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){vu.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=$R(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class AR{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const RR={kernelName:Cn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=Ys.sizeFromShape(r.shape),u=new AR(l,a,i,o),c=fC({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=fC({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function FR(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=C$({inputs:{input:s},backend:n}),t=FR({inputs:{x:e},backend:n}),r=U$({inputs:{input:s},backend:n}),a=FR({inputs:{x:r},backend:n}),i=nT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return ZE({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const DR={kernelName:$s,backendName:"webgl",kernelFunc:FR};const _R={kernelName:Tn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=C$({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=U$({inputs:{input:r},backend:s}),i=FR({inputs:{x:a},backend:s}),o=nT({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return ZE({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const OR={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return UE({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Ys.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Ys.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=H$({inputs:t.map((e=>{const t=UE({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class MR{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=uN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class LR{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=uN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=JN("rc",s),l=JN("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const zR=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===Ys.sizeFromShape(r.shape)){return ZE({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:i,dtype:r.dtype}})}const o=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new LR(r.shape,a,i):new MR(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},BR={kernelName:En,backendName:"webgl",kernelFunc:zR},PR=mT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),WR={kernelName:Rn,backendName:"webgl",kernelFunc:PR};const UR={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=Ys.parseAxisParam(a,r.shape);let c=u;const h=vu.getAxesPermutation(c,o);let p,d=r;if(null!=h&&(d=SC({inputs:{x:r},backend:n,attrs:{perm:h}}),c=vu.getInnerMostAxes(c.length,o),l.push(d)),vu.assertAxesAreInnerMostDims("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=HT(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=vu.computeOutAndReduceShapes(d.shape,c),s=Ys.sizeFromShape(t),a=fC({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=bC(a,ma(r.dtype),"prod",n);p=fC({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=vu.expandShapeToKeepDim(p.shape,u);p=fC({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},VR=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=jT(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},GR={kernelName:_n,backendName:"webgl",kernelFunc:VR},HR=fT({opSnippet:"return 1.0 / x;"}),jR={kernelName:Mn,backendName:"webgl",kernelFunc:HR},qR=fT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),KR={kernelName:Ln,backendName:"webgl",kernelFunc:qR},XR=fT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),YR={kernelName:Vn,backendName:"webgl",kernelFunc:XR};class ZR{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class JR{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const QR={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=le().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new JR(r.shape,l,u,a,i):new ZR(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class eF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const tF={kernelName:Un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new eF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class nF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class sF{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const rF={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=le().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new sF(r.shape,l,u,a,i):new nF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class aF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const iF={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new aF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class oF{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=uN(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class lF{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=JN("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=uN(n);var o;function l(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=s.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const uF={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=Ys.parseAxisParam(a,r.shape);if(0===i)return eT({inputs:{x:r},backend:n});const l=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lF(r.shape,o):new oF(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class cF{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const hF={kernelName:Rs,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new cF(s.shape,a),[u,c]=vu.getImageCenter(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},pF=fT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),dF={kernelName:Hn,backendName:"webgl",kernelFunc:pF},fF=fT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:qT}),mF={kernelName:jn,backendName:"webgl",kernelFunc:fF};class gF{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=uN(r.length),l=uN(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const yF={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=vu.calculateShapes(a,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=fC({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=fC({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new gF(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=fC({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class bF{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=uN(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const xF={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new bF(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],fa(r.dtype,a.dtype))}},wF=fT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${vu.SELU_SCALEALPHA};\n  float scale = ${vu.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),kF={kernelName:Xn,backendName:"webgl",kernelFunc:wF},vF=fT({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:KT}),IF={kernelName:es,backendName:"webgl",kernelFunc:vF},SF=fT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),NF={kernelName:Qn,backendName:"webgl",kernelFunc:SF},TF=fT({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),CF={kernelName:Zn,backendName:"webgl",kernelFunc:TF},$F=fT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),EF={kernelName:Jn,backendName:"webgl",kernelFunc:$F},AF=fT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),RF={kernelName:ts,backendName:"webgl",kernelFunc:AF},FF={kernelName:rs,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Ys.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=zR({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=vu.getReshaped(c.shape,a,o,!1),p=vu.getPermuted(h.length,a.length,!1),d=vu.getReshapedPermuted(c.shape,a,o,!1),f=fC({inputs:{x:c},backend:n,attrs:{shape:h}}),m=SC({inputs:{x:f},backend:n,attrs:{perm:p}}),g=fC({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const DF={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=ZT(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const _F={kernelName:ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=JT(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const OF={kernelName:us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=QT(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const MF={kernelName:cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=QT(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const LF={kernelName:hs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=vu.calculateShapes(a,r,o),p=new gF(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=fC({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const zF={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Ys.parseAxisParam(i,r.shape)[0],l=vu.prepareSplitSize(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=w$({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},BF="return sqrt(x);",PF=fT({opSnippet:BF,packedOpSnippet:BF,cpuKernelImpl:eC}),WF={kernelName:ns,backendName:"webgl",kernelFunc:PF},UF=fT({opSnippet:"return x * x;"}),VF={kernelName:ds,backendName:"webgl",kernelFunc:UF},GF="return (a - b) * (a - b);",HF=mT({opSnippet:GF,packedOpSnippet:GF}),jF={kernelName:ps,backendName:"webgl",kernelFunc:HF};const qF={kernelName:Es,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new cT(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class KF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=uN(n.length),a=uN(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const XF={kernelName:fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=Wl.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let k;if(m)k=fC({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){Ys.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Wl.computeOutShape(b,x,w),t=w$({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=fC({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=Ko(r.shape,r.dtype,e),s=tC(d,t,w,b);k=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new KF(b,w,d);k=n.runWebGLProgram(e,[r],r.dtype)}}const v=fC({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const YF={kernelName:ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=nC(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const ZF={kernelName:gs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=sC(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const JF={kernelName:ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=rC(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},QF=fT({opSnippet:"return tan(x);"}),eD={kernelName:xs,backendName:"webgl",kernelFunc:QF},tD=fT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),nD={kernelName:ws,backendName:"webgl",kernelFunc:tD};class sD{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=uN(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function rD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Ys.decodeString(e))):e,s=Ko(r.shape,r.dtype,t),i=iC(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new sD(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const aD={kernelName:ks,backendName:"webgl",kernelFunc:rD};class iD{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class oD{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function lD(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function uD(e){let t=1;for(;t<e;)t*=2;return t}const cD={kernelName:vs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=le().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=le().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=oC(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,ZE({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(r):r,f=Ys.sizeFromShape(u)/c,m=fC({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&lD(n,d);const g=uD(a),y=uD(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,s)=>{const r=x(),a=new iD(s),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(a,r,"int32",i),lD(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),s=new oD([f,e/2]),r=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(s,t,"int32",r),lD(n,a);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let k=b;b=w$({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),lD(n,k);let v=mA({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});lD(n,m);const I=u.slice(0,-1);I.push(a),k=b,b=fC({inputs:{x:b},attrs:{shape:I},backend:n}),lD(n,k);const S=v;return v=fC({inputs:{x:v},attrs:{shape:I},backend:n}),lD(n,S),[v,b]}};class hD{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const pD={kernelName:Is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new hD(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const dD={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;qN(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=uC(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const fD={kernelName:Ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=w$({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=fC({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class mD{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const gD=[CC,EC,RC,DC,MC,BC,PC,WC,qC,KC,YC,JC,e$,n$,r$,o$,l$,h$,p$,d$,g$,v$,I$,S$,E$,F$,O$,sT,z$,j$,J$,sE,rE,aE,iE,oE,uE,hE,dE,yE,bE,wE,IE,TE,CE,EE,RE,FE,_E,OE,LE,BE,WE,VE,jE,XE,JE,eA,sA,aA,lA,cA,hA,dA,gA,bA,wA,tT,kA,V$,IA,NA,CA,iT,EA,RA,FA,_A,MA,zA,PA,UA,HA,qA,XA,ZA,JA,QA,nR,sR,rR,aR,iR,lR,hR,dR,vR,pC,IR,NR,CR,ER,T$,RR,_R,OR,BR,WR,uT,UR,GR,$$,gR,jR,KR,YR,mC,QR,tF,rF,iF,uF,hF,dF,mF,yF,xF,kF,IF,NF,CF,EF,k$,kR,RF,FF,DF,_F,OF,MF,LF,zF,WF,VF,jF,qF,XF,YF,ZF,JF,xR,IC,eD,nD,aD,cD,pD,NC,dD,fD,{kernelName:Cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=vu.getAxesPermutation([u],o);let h=r;null!=c&&(h=SC({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=vu.getInnerMostAxes(1,o)[0]);const p=vu.segment_util.computeOutShape(h.shape,u,i),d=Ys.sizeFromShape([h.shape[u]]),f=fC({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=ma(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=vu.segment_util.segOpComputeOptimalWindowSize(o,a),c=new mD({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=VR({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=rD({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return g(h,t,d,r,a)},y=fC({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=vu.getUndoAxesPermutation(c);b=SC({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},DR];for(const e of gD)Gs(e);const yD=le();yD.registerFlag("HAS_WEBGL",(()=>yD.getNumber("WEBGL_VERSION")>0)),yD.registerFlag("WEBGL_VERSION",(()=>GN(2)?2:GN(1)?1:0)),yD.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),yD.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===yD.get("WEBGL_VERSION"))),yD.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),yD.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),yD.registerFlag("WEBGL_PACK",(()=>yD.getBool("HAS_WEBGL"))),yD.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_CLIP",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_PACK_REDUCE",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_LAZILY_UNPACK",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_CONV_IM2COL",(()=>yD.getBool("WEBGL_PACK"))),yD.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==WN){const t=mN(e);WN=t.getParameter(t.MAX_TEXTURE_SIZE)}return WN}(yD.getNumber("WEBGL_VERSION")))),yD.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==UN){const t=mN(e);UN=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,UN)}(yD.getNumber("WEBGL_VERSION")))),yD.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=yD.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=mN(e);return t=VN(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:VN(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),yD.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>yD.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ca.isMobile())),yD.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=mN(e);if(1===e){if(!VN(t,"OES_texture_float"))return!1}else if(!VN(t,"EXT_color_buffer_float"))return!1;return jN(t)}(yD.getNumber("WEBGL_VERSION")))),yD.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!yD.getBool("WEBGL_FORCE_F16_TEXTURES")&&yD.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),yD.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>HN(yD.getNumber("WEBGL_VERSION")))),yD.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=yD.getNumber("WEBGL_VERSION"))&&null!=mN(e).fenceSync;var e})),yD.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>yD.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),yD.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),yD.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ca.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),yD.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),yD.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),yD.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),yD.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));class bD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=gN.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=jS();this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?KS(["r","c","d"],e):qS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class xD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=gN.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=jS();this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?KS(["r","c","d"],e):qS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class wD{constructor(e){this.variableNames=["A"],this.outTexUsage=yN.DOWNLOAD;const t=jS();this.outputShape=e,this.userCode=`\n      ${ZS}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class kD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=yN.DOWNLOAD;const t=jS();this.outputShape=e,this.userCode=`\n      ${ZS}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class vD{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=jS();this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":YS(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class ID{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=jS();this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":YS(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function SD(e){const t=jS();return function(e,t){const n=_N(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(IN(e,(()=>e.shaderSource(n,t))),IN(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function ND(e){return function(e,t){const n=_N(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return IN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),IN(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function TD(e){return function(e,t){const n=_N(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return IN(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),IN(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function CD(e,t,n,s,r,a){!function(e,t){const n=le().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return _N(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return IN(e,(()=>e.bindTexture(o,i))),IN(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),IN(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),IN(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),IN(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===le().getNumber("WEBGL_VERSION")?IN(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))):IN(e,(()=>e.texStorage2D(o,1,s,t,n))),IN(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function $D(e){return e.internalFormatFloat}function ED(e){return e.internalFormatHalfFloat}function AD(e){return e.downloadTextureFormat}function RD(e){return e.internalFormatPackedFloat}function FD(e){return e.internalFormatPackedHalfFloat}function DD(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=kN(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class _D{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=le().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){dN[e]=t}(t,e)):this.gl=mN(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===le().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=NN(this.gl,e),VN(this.gl,t))this.textureHalfFloatExtension=NN(this.gl,t);else if(le().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),VN(this.gl,s))this.colorBufferHalfFloatExtension=NN(this.gl,s);else if(le().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",VN(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!VN(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=ND(this.gl),this.indexBuffer=TD(this.gl),this.framebuffer=function(e){return _N(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=vN(this.gl,this.textureHalfFloatExtension)}get debug(){return le().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;IN(e,(()=>e.finish())),IN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),IN(e,(()=>e.deleteFramebuffer(this.framebuffer))),IN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),IN(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),IN(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=xN(t,n);return CD(e,r,a,$D(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=xN(t,n);return CD(e,r,a,ED(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=xN(t,n);return CD(e,r,a,AD(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){IN(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===le().getNumber("WEBGL_VERSION")?IN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):IN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===le().getNumber("WEBGL_VERSION")?IN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):IN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),IN(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;IN(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===le().getNumber("WEBGL_VERSION")?IN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):IN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),IN(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=kN(t,n);return CD(e,r,a,FD(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=kN(t,n);return CD(e,r,a,RD(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(FN(this.gl,this.framebuffer),this.outputTexture=null),IN(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=xN(t,n),i=new Uint8Array(t*n*4);return IN(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return DD(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();IN(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return IN(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),IN(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),IN(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(le().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return IN(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=SD(t));const n=function(e){return _N(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return IN(t,(()=>t.attachShader(n,this.vertexShader))),IN(t,(()=>t.attachShader(n,e))),function(e,t){if(IN(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&$N(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return IN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),EN(e,t,"clipSpacePos",n,3,20,0)&&EN(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&IN(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&$N(this.gl,this.program),IN(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return _N(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),IN(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),AN(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=kN(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&$N(this.gl,this.program),DN(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),IN(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),IN(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=NN(this.gl,2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Ys.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||Ys.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),RN(this.gl,e,this.framebuffer),this.debug&&DN(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(RN(this.gl,this.outputTexture,this.framebuffer),this.debug&&DN(this.gl)):FN(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;RN(s,e,this.framebuffer),this.debug&&DN(s),this.outputTexture=e,IN(s,(()=>s.viewport(0,0,t,n))),IN(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),IN(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class OD{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=XN(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=JN("rc",this.rank),t=uN(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class MD{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=zD(t,n),r=BD(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=LD(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===bN.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===bN.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===bN.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===bN.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===bN.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=zD(n,s),a=BD(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=LD(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=le().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function LD(e,t,n,s,r){const a=function(e,t){switch(e){case bN.PACKED_2X2_FLOAT32:return RD(t);case bN.PACKED_2X2_FLOAT16:return FD(t);case bN.UNPACKED_FLOAT32:return $D(t);case bN.UNPACKED_FLOAT16:return ED(t);case bN.PACKED_4X1_UNSIGNED_BYTE:return AD(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=kN(e[0],e[1]);i=t*n}else{const[t,n]=xN(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function zD(e,t){if(e===yN.UPLOAD)return bN.PACKED_2X2_FLOAT32;if(e===yN.RENDER||null==e)return function(e){return le().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?bN.PACKED_2X2_FLOAT32:bN.UNPACKED_FLOAT32:e?bN.PACKED_2X2_FLOAT16:bN.UNPACKED_FLOAT16}(t);if(e===yN.DOWNLOAD||e===yN.PIXELS)return bN.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function BD(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class PD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=XN(this.outputShape.length);const t=e.length,n=JN("rc",t),s=uN(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const WD=xh.whereImpl,UD={};const VD=le().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class GD extends l{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!le().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof _D)t=e;else{const n=mN(le().getNumber("WEBGL_VERSION"),e);t=new _D(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=mN(le().getNumber("WEBGL_VERSION"));t=new _D(e),this.binaryCache=((n=le().getNumber("WEBGL_VERSION"))in UD||(UD[n]={}),UD[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new MD(this.gpgpu),this.numMBBeforeWarning=null==le().global.screen?1024:le().global.screen.height*le().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o(this,Mh())}nextDataId(){return GD.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((le().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||le().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:yN.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(le().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:yN.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new dT(i,pT):new cT(i,pT);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Ys.now()),"complex64"===s){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);c=vu.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Ys.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new dT(s,pT):new cT(s,pT);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(le().getBool("DEBUG")&&!le().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===le().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&le().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...wN(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=vu.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=Ys.sizeFromShape(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;IN(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Mh().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new dT(r,pT):new cT(r,pT);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=Mh().makeTensorFromDataId(u.dataId,u.shape,u.dtype),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Ys.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ko(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!SN(n)){if(le().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=Ys.sizeFromShape(t);if(le().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...wN(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=le().getBool("WEBGL_PACK")&&!0===s,i=a?zN(t):t,o=a?new kD(i):new wD(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=Ys.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Ys.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=Ys.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ys.now(),endMs:null}}endTimer(e){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Ys.now(),e)}async getQueryTime(e){if(le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=VD){return le().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Ys.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){vu.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return WD(e.shape,t)}packedUnaryOp(e,t,n){const s=new dT(e.shape,t),r=this.compileAndRun(s,[e],n);return Mh().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=XT(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(le().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,hT,e.dtype);const t=new cT(e.shape,hT),n=this.compileAndRun(t,[e]);return Mh().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Ys.isString(n[0])){const r=n.map((e=>Ys.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return Mh().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new PD(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new OD(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[MN(e.shape),...LN(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[MN(t),...LN(t)],a=new dC(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){const e=Ys.sizeFromShape(r),n=t[0]*t[1]*4;Ys.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=zN(r);let o;o=s?new xD(i):new bD(i);const l=[null!=t?t:wN(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===gN.DENSE){const t=null!=a?a:wN(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===Ys.sizeFromShape(i.shape))return o.values=Ys.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Ys.sizeFromShape(t.shape)<=le().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!PN(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=cN(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=Ys.computeStrides(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&Ys.arraysEqual(t.shape,a),f=1===Ys.sizeFromShape(t.shape),m=vu.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&p===n.shape.length&&Ys.arraysEqual(a,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${p}_${g}_${i?l:""}_${o.length}_${f}_${m}_${d}_${u}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${le().getNumber("WEBGL_VERSION")}`,a}(e,u,c),p=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=QS(r,i,t),l=TN(e.gl,o),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===le().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p=!1,d={},f={},m={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n];d[s]=e.getUniformLocation(u,s,p),d[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,p),t.enableShapeUniforms&&(f[`${s}Shape`]=e.getUniformLocation(u,`${s}Shape`,p),m[`${s}TexShape`]=e.getUniformLocation(u,`${s}TexShape`,p))}let g,y,b;t.enableShapeUniforms&&(g=e.getUniformLocation(u,"outShape",p),b=e.getUniformLocation(u,"outShapeStrides",p),y=e.getUniformLocation(u,"outTexShape",p));const x=[];return t.customUniforms&&t.customUniforms.forEach(((t,n)=>{x[n]=e.getUniformLocation(u,t.name,p)})),{program:t,fragmentShader:l,source:o,webGLProgram:u,uniformLocations:d,customUniformLocations:x,inShapeInfos:a,outShapeInfo:i,infLoc:c,nanLoc:h,inShapesLocations:f,inTexShapesLocations:m,outShapeLocation:g,outShapeStridesLocation:b,outTexShapeLocation:y}}(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),function(e,t,n,s,r){t.program.enableShapeUniforms||(KN(t.inShapeInfos,n),KN([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===le().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`],o=t.inShapesLocations[`${r}Shape`],l=t.inTexShapesLocations[`${r}TexShape`];if(o){const{uniformShape:s}=cN(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(o,new Int32Array(s));break;case 2:e.gl.uniform2iv(o,new Int32Array(s));break;case 3:e.gl.uniform3iv(o,new Int32Array(s));break;case 4:e.gl.uniform4iv(o,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(Ys.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,s)}));const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=Ys.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,s)=>{const a=t.customUniformLocations[s],i=r[s];if("float"===n.type)e.gl.uniform1fv(a,i);else if("vec2"===n.type)e.gl.uniform2fv(a,i);else if("vec3"===n.type)e.gl.uniform3fv(a,i);else if("vec4"===n.type)e.gl.uniform4fv(a,i);else if("int"===n.type)e.gl.uniform1iv(a,i);else if("ivec2"===n.type)e.gl.uniform2iv(a,i);else if("ivec3"===n.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,i)}})),e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=le().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Ys.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!le().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!le().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Bh((()=>{if(!le().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=le().getBool("DEBUG");le().set("DEBUG",!1);const t=this.abs(dp(1e-8)).dataSync()[0];if(le().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Ys.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=le().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Ys.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Ys.squeezeShape(e);e=t.newShape}let s=Ys.sizeFromShape(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=MN(e);let n=2,r=2;return e.length&&([n,r]=LN(e)),s=t*(n/2)*(r/2),Ys.sizeToSquarishShape(s).map((e=>2*e))}return Ys.sizeToSquarishShape(s)}(n,o),t.texShape=c),null!=r){const e=zN(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,h]=kN(c[0],c[1])),a=o?new ID(e,p):new vD(e,p);const d=p?[h,i]:c,f=this.makeTensorInfo(d,s),m=this.texData.get(f.dataId);m.usage=p?yN.PIXELS:yN.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,r);const g=[[h,i]],y=!0,b=this.runWebGLProgram(a,[f],s,g,y),x=this.texData.get(b.dataId);t.texture=x.texture,t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(b.dataId),t.values=null,l&&(this.uploadWaitMs+=Ys.now()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*Ys.bytesPerElement(t)}}GD.nextDataId=0;Ca.isBrowser()&&Xh("webgl",(()=>new GD),2);let HD;function jD(){return null==HD&&(HD=Yh().epsilon()),HD}class qD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,qD.prototype)}}class KD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,KD.prototype)}}class XD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,XD.prototype)}}class YD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,YD.prototype)}}class ZD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ZD.prototype)}}Error;function JD(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function QD(e,t){if(!e)throw new ZD(t)}function e_(e,t){let n=0;for(const s of e)s===t&&n++;return n}function t_(e){return 1===e.length?e[0]:e}function n_(e){return Array.isArray(e)?e:[e]}function s_(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function r_(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let a_={};function i_(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function o_(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>o_(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?o_(t):e[n]=t.value)}}}function l_(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in a_)a=a_[r];else if(a=t[r],null==a)throw new XD(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new XD(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in a_?[o,l]=a_.className:i in t&&([o,l]=t[i]),null==o)throw new XD(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(a_))e[t]=a_[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},a_);for(const e of Object.keys(n))a_[e]=n[e];o_(a.config);const s=l(o,a.config,n,r);return a_=Object.assign({},t),s}{const e=Object.assign({},a_);for(const e of Object.keys(n))a_[e]=n[e];const t=new o(a.config);return a_=Object.assign({},e),t}}}function u_(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function c_(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function h_(e){if(null==e)throw new XD(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function p_(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new XD(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function d_(e,t,n=0,s=1/0){return QD(n>=0),QD(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function f_(e,t){Array.isArray(e)?(Ys.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>f_(e,`element ${n+1} of ${t}`)))):Ys.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${m_(e)}.`))}function m_(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>m_(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function g_(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function y_(e,t){return Bh((()=>vd(dc(ic(e,e),t,!0))))}class b_ extends au.Serializable{getConfig(){return{}}}class x_ extends b_{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Bh((()=>{const t=y_(e,this.axis),n=Ef(t,0,this.maxValue);return ic(e,ep(n,Jh(jD(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}x_.className="MaxNorm",au.registerClass(x_);class w_ extends b_{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Bh((()=>ep(e,Jh(jD(),y_(e,this.axis)))))}getConfig(){return{axis:this.axis}}}w_.className="UnitNorm",au.registerClass(w_);class k_ extends b_{apply(e){return lc(e)}}k_.className="NonNeg",au.registerClass(k_);class v_ extends b_{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Bh((()=>{const t=y_(e,this.axis),n=Jh(ic(this.rate,Ef(t,this.minValue,this.maxValue)),ic(1-this.rate,t));return ic(e,ep(n,Jh(jD(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}v_.className="MinMaxNorm",au.registerClass(v_);const I_={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function S_(e){return i_(e)}function N_(e,t={}){return l_(e,au.SerializationMap.getMap().classNameMap,t,"constraint")}function T_(e){if(null==e)return null;if("string"==typeof e){return N_({className:e in I_?I_[e]:e,config:{}})}return e instanceof b_?e:N_(e)}const C_=["channelsFirst","channelsLast"],$_=["nearest","bilinear"],E_=["valid","same","causal"],A_=["max","avg"],R_=["sum","mul","concat","ave"],F_=new Map;function D_(e){p_(C_,"DataFormat",e)}function __(e){p_(E_,"PaddingMode",e)}function O_(e){p_(A_,"PoolMode",e)}const M_=[];function L_(e,t){M_.push(e);try{const e=t();return M_.pop(),e}catch(e){throw M_.pop(),e}}function z_(e){if(!W_(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===M_.length?"":M_.join("/")+"/")+e}function B_(e){if(!W_(e))throw new Error("Not a valid tensor name: '"+e+"'");F_.has(e)||F_.set(e,0);const t=F_.get(e);if(F_.set(e,F_.get(e)+1),t>0){const n=`${e}_${t}`;return F_.set(n,1),n}return e}const P_=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function W_(e){return!!e.match(P_)}function U_(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function V_(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function G_(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function H_(e,t){if(t<e)throw new XD(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function j_(e,t){return Xo(e,t)}function q_(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),cc(e,n)}function K_(e,t,n){return Bh((()=>{switch(e.rank){case 1:return ag(e,t,n);case 2:return ig(e,[t,0],[n,e.shape[1]]);case 3:return og(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return lg(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return ap(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return ap(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new XD(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function X_(e,t,n){return Bh((()=>{switch(e.rank){case 1:return ag(e,t,n);case 2:return ig(e,[0,t],[e.shape[0],n]);case 3:return og(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return lg(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new XD(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Y_(e,t,n,s){return Bh((()=>{switch(e.rank){case 1:return ag(e,t,n);case 2:switch(s){case 1:return K_(e,t,n);case 2:return X_(e,t,n);default:throw new XD(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return K_(e,t,n);case 2:return og(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return X_(e,t,n);default:throw new XD(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return K_(e,t,n);case 2:return lg(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return lg(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return X_(e,t,n);default:throw new XD(`The axis is not within the rank of the tensor ${s}`)}default:throw new XD(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Z_(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),np(e,t)}function J_(e,t){switch(e.rank){case 1:return Af([e,t]);case 2:return Rf([e,t],0);case 3:return Ff([e,t],0);case 4:return Df([e,t],0);default:throw new XD(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Q_(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new XD(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Gp(e,t)}function eO(e,t=0,n=1,s,r){return Hm(e,t,n,s,r)}function tO(e,t,n,s){if(e.rank<2||t.rank<2)throw new YD(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new YD(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const r=!1,a=!1;return mp.matMul({a:e,b:t,transposeA:r,transposeB:a,bias:s?rO(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=cc(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=cc(kl(t,c),[l,-1]);const h=[...r,...u],p=!1,d=!1;return cc(mp.matMul({a:e,b:t,transposeA:p,transposeB:d,bias:s?rO(e.rank,s,"channelsLast"):null,activation:n}),h)}}function nO(e,t,n){return Bh((()=>(t=Array.isArray(t)?Dp(t,"int32"):Xo(t,"int32"),Qf(e,t,n))))}function sO(e){return ic(e,e)}function rO(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new XD(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?cc(t,[1,s[0],1,1,1]):cc(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?cc(t,[1,1,1,1,s[0]]):cc(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?cc(t,[1,s[0],1,1]):cc(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?cc(t,[1,1,1,s[0]]):cc(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?cc(t,[1,s[0],1]):cc(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?cc(t,[1,1,s[0]]):cc(t,[1].concat(s))}else if(e<3)return t;throw new XD(`Unsupported input rank by biasAdd: ${t.rank}`)}function aO(e,t,n){return Bh((()=>(null==n&&(n="channelsLast"),D_(n),Jh(e,rO(e.rank,t,n)))))}function iO(e,t,n,s){return Bh((()=>Fg(e,t,n,s)))}function oO(e,t,n=!1){return n?e():t()}const lO=["fanIn","fanOut","fanAvg"],uO=["normal","uniform","truncatedNormal"];class cO extends au.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class hO extends cO{apply(e,t){return op(e,t)}}hO.className="Zeros",au.registerClass(hO);class pO extends cO{apply(e,t){return Md(e,t)}}pO.className="Ones",au.registerClass(pO);class dO extends cO{constructor(e){if(super(),"object"!=typeof e)throw new XD(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new XD(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Bh((()=>ic(dp(this.value),Md(e,t))))}getConfig(){return{value:this.value}}}dO.className="Constant",au.registerClass(dO);class fO extends cO{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return jm(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}fO.className="RandomUniform",au.registerClass(fO);class mO extends cO{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new YD(`randomNormal does not support dType ${t}.`);return eO(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}mO.className="RandomNormal",au.registerClass(mO);class gO extends cO{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new YD(`truncatedNormal does not support dType ${t}.`);return gg(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}gO.className="TruncatedNormal",au.registerClass(gO);class yO extends cO{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Bh((()=>{if(2!==e.length||e[0]!==e[1])throw new XD("Identity matrix initializer can only be used for 2D square matrices.");return ic(this.gain,Ed(e[0]))}))}getConfig(){return{gain:this.gain}}}yO.className="Identity",au.registerClass(yO);class bO extends cO{constructor(e){if(super(),e.scale<0)throw new XD(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,p_(lO,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){p_(uO,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(D_(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=U_(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=U_(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=U_(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new YD(`${this.getClassName()} does not support dType ${t}.`);return gg(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return jm(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}bO.className="VarianceScaling",au.registerClass(bO);class xO extends bO{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return bO.className}}xO.className="GlorotUniform",au.registerClass(xO);class wO extends bO{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return bO.className}}wO.className="GlorotNormal",au.registerClass(wO);class kO extends bO{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return bO.className}}kO.className="HeNormal",au.registerClass(kO);class vO extends bO{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return bO.className}}vO.className="HeUniform",au.registerClass(vO);class IO extends bO{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return bO.className}}IO.className="LeCunNormal",au.registerClass(IO);class SO extends bO{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return bO.className}}SO.className="LeCunNormal",au.registerClass(SO);class NO extends cO{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new YD("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Bh((()=>{if(e.length<2)throw new YD("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=eO(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=zg.gramSchmidt(t);return e[0]>e[1]&&(n=kl(n)),ic(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}NO.className="Orthogonal",au.registerClass(NO);const TO={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function CO(e,t={}){return l_(e,au.SerializationMap.getMap().classNameMap,t,"initializer")}function $O(e){return i_(e)}function EO(e){if("string"==typeof e){const t=e in TO?TO[e]:e;if("GlorotNormal"===t)return new wO;if("GlorotUniform"===t)return new xO;if("HeNormal"===t)return new kO;if("HeUniform"===t)return new vO;if("LeCunNormal"===t)return new IO;if("LeCunUniform"===t)return new SO;{const e={};return e.className=t,e.config={},CO(e)}}return e instanceof cO?e:CO(e)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let AO=0;function RO(){return AO++}const FO={};function DO(e=""){return e in FO||(FO[e]=0),FO[e]+=1,e+FO[e].toString()}function _O(e){return Array.isArray(e)&&Array.isArray(e[0])}function OO(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function MO(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new XD(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function LO(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new XD(`Expected exactly 1 Shape; got ${e.length}`)}return e}function zO(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const BO="Variable";class PO{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=RO(),n=null==n?BO:n,this.originalName=z_(n),this.name=B_(this.originalName),this.trainable_=s,this.constraint=r,this.val=xg(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function WO(e){return e.map((e=>e.read()))}function UO(e){e.forEach((e=>{e[0].write(e[1])}))}class VO{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class GO{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=RO(),null!=a&&(this.originalName=z_(a),this.name=B_(this.originalName)),this.rank=t.length}}let HO=0;class jO{constructor(e,t){this.callArgs=t,this.id=HO++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let qO=0;class KO extends au.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=qO++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=s_(e)+"_"+DO(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new KD(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new XD(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return t_(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return t_(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new qD(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new qD(`Layer ${this.name} is not connected, no input to return.`);return t_(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new qD(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new qD(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return t_(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=n_(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=n_(this.inputSpec);if(e.length!==t.length)throw new XD(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new XD(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new XD(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new XD(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new XD(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new XD(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new XD(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=n_(e);let s=!0;for(const e of n)if(!(e instanceof GO)){s=!1;break}let r=!0;for(const e of n)if(e instanceof GO){r=!1;break}if(s===r)throw new XD("Arguments to apply() must be all SymbolicTensors or all Tensors");return L_(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of n_(e))t.push(n.shape);this.build(t_(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=n_(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=t_(a),null!=this.activityRegularizer)throw new YD("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=n_(e);const t=[];for(const n of e)t.push(n.shape);return t_(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new GO(a,n,this,n_(e),t,this.name,s))):new GO(a,s,this,n_(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new YD("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new qD(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new qD(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new KD(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return zO(this.weights)}build(e){this.built=!0}getWeights(e=!1){return WO(e?this.trainableWeights:this.weights)}setWeights(e){Bh((()=>{const t=this.weights;if(t.length!==e.length)throw new XD(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=WO(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!Ys.arraysEqual(a.shape,o.shape))throw new XD(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}UO(n)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new XD(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():EO("zeros"));const l=s.apply(t,n),u=new PO(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=n_(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=n_(e);t=n_(t),n=n_(n),s=n_(s),r=OO(r),a=OO(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new jO({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function XO(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=XO(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class YO extends KO{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:DO("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new XD("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new XD("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new XD("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new GO(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new jO({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new XD(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function ZO(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new XD("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new YO({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function JO(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];Ph(s)}}function QO(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var eM;YO.className="InputLayer",au.registerClass(YO),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(eM||(eM={}));class tM{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class nM{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class sM extends tM{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=Bh((()=>Jh(this.totals[e],ic(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Bh((()=>{const n=ic(ep(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Wh(t[e])})))}}class rM extends tM{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class aM extends tM{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||ey,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ys.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():Ys.now();return(...a)=>{const i=null!=n?n():Ys.now();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await JO(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await JO(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await JO(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await JO(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await JO(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Ys.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await JO(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await JO(e),await this.trainEnd(e))}}function iM(e,t){if(null==e&&(e={}),e instanceof tM)return[e];if(Array.isArray(e)&&e[0]instanceof tM)return e;return n_(e).map((e=>new aM(e,t)))}class oM{constructor(){}static registerCallbackConstructor(e,t){Ys.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),oM.checkForDuplicate(t),null==oM.constructors[e]&&(oM.constructors[e]=[]),oM.constructors[e].push(t)}static checkForDuplicate(e){for(const t in oM.constructors){oM.constructors[+t].forEach((t=>{if(t===e)throw new XD("Duplicate callback constructor.")}))}}static clear(){oM.constructors={}}static createCallbacks(e){const t=[];for(const n in oM.constructors){const s=+n;e>=s&&t.push(...oM.constructors[s])}return t.map((e=>new e))}}function lM(e,t,n,s,r,a,i,o,l){const u=new rM,c=[new sM,...oM.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new nM(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function uM(e,t={},n=!1){return l_(e,au.SerializationMap.getMap().classNameMap,t,"layer",n)}function cM(e,t){return Bh((()=>{"float32"!==e.dtype&&(e=Xo(e,"float32"));const n=dc(sO(e),t,!0),s=zp(n.shape,jD()),r=vd(mm(n,s));return ep(e,r)}))}function hM(e,t){return Bh((()=>_d(sO(ad(t,e)),-1)))}function pM(e,t){return Bh((()=>_d(bd(ad(t,e)),-1)))}function dM(e,t){return Bh((()=>{const n=ad(e,t),s=Ef(bd(e),jD(),Number.MAX_VALUE),r=bd(ep(n,s));return ic(100,_d(r,-1))}))}function fM(e,t){return Bh((()=>{const n=Ef(t,jD(),Number.MAX_VALUE),s=Vd(Jh(1,n)),r=Ef(e,jD(),Number.MAX_VALUE),a=Vd(Jh(1,r));return _d(sO(ad(s,a)),-1)}))}function mM(e,t,n=!1){return Bh((()=>{if(n)t=ug(t);else{const e=dc(t,t.shape.length-1,!0);t=ep(t,e)}return t=Ef(t,jD(),1-jD()),Ad(dc(ic(Xo(e,"float32"),Vd(t)),t.shape.length-1))}))}function gM(e,t,n=!1){return Bh((()=>{const s=Xo(Jf(function(e){const t=[U_(e.shape)];return cc(e,t)}(e)),"int32"),r=(t=Ef(t,jD(),1-jD())).shape;return mM(cc(xl(s,r[r.length-1]),r),t,n)}))}function yM(e,t){return Bh((()=>{let n;return n=Ef(t,jD(),1-jD()),n=Vd(ep(n,ad(1,n))),_d(function(e,t){if(!Ys.arraysEqual(e.shape,t.shape))throw new XD(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Bh((()=>{const n=lc(t),s=Ad(bd(t));return Jh(ad(n,ic(t,e)),Kd(qd(s)))}))}(e,n),-1)}))}function bM(e,t){return Bh((()=>{const n=Ef(e,jD(),1),s=Ef(t,jD(),1);return dc(ic(e,Vd(ep(n,s))),-1)}))}function xM(e,t){return Bh((()=>{const n=cM(e,-1),s=cM(t,-1),r=ic(n,s);return Ad(dc(r,-1))}))}oM.constructors={};const wM={meanSquaredError:hM,meanAbsoluteError:pM,meanAbsolutePercentageError:dM,meanSquaredLogarithmicError:fM,squaredHinge:function(e,t){return Bh((()=>{const n=mm(0,ad(1,ic(e,t)));return _d(sO(n),-1)}))},hinge:function(e,t){return Bh((()=>{const n=mm(0,ad(1,ic(e,t)));return _d(n,-1)}))},categoricalHinge:function(e,t){return Bh((()=>{const n=dc(ic(e,t),-1),s=xd(ic(ad(1,e),t),-1);return mm(0,Jh(1,ad(s,n)))}))},logcosh:function(e,t){return Bh((()=>{const n=Math.log(2),s=ad(t,e),r=ad(Jh(s,im(ic(-2,s))),n);return _d(r,-1)}))},categoricalCrossentropy:mM,sparseCategoricalCrossentropy:gM,binaryCrossentropy:yM,kullbackLeiblerDivergence:bM,poisson:function(e,t){return Bh((()=>{const n=Vd(Jh(jD(),t));return _d(ad(t,ic(e,n)),-1)}))},cosineProximity:xM};function kM(e){if("string"==typeof e){if(e in wM)return wM[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new XD(t)}return e}function vM(e,t){return Bh((()=>{const n=ic(.5,vm(t)),s=j_(rd(t,n),e.dtype);return _d(jf(e,s),-1)}))}function IM(e,t){return Bh((()=>j_(jf(hf(e,-1),hf(t,-1)),"float32")))}function SM(e,t){return Bh((()=>Xo(dc(dd(jf(e,1),jf(t,1))),"float32")))}function NM(e,t){return Bh((()=>{const n=SM(e,t),s=function(e,t){return Bh((()=>Xo(dc(dd(jf(e,0),jf(t,1))),"float32")))}(e,t),r=Jh(n,s);return Xo(ld(rd(r,0),ep(n,r),0),"float32")}))}function TM(e,t){return yM(e,t)}function CM(e,t){return e.rank===t.rank&&(e=Td(e,[e.rank-1])),(t=hf(t,-1)).dtype!==e.dtype&&(t=Xo(t,e.dtype)),Xo(jf(e,t),"float32")}const $M=mM,EM=gM,AM={binaryAccuracy:vM,categoricalAccuracy:IM,precision:NM,categoricalCrossentropy:$M,sparseCategoricalCrossentropy:EM,mse:hM,MSE:hM,mae:pM,MAE:pM,mape:dM,MAPE:dM,cosine:xM};function RM(e){if("string"==typeof e&&e in AM)return AM[e];if("string"!=typeof e&&null!=e)return e;throw new XD(`Unknown metric ${e}`)}function FM(e){if(QD(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(wM))if(wM[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(AM))if(AM[n]===e){t=n;break}return void 0!==t?t:e.name}}const DM=1048576;function _M(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!OM(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>DM&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function OM(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!OM(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!OM(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function MM(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),LM(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?zM(o[e],n,s):BM(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?zO(e.collectedTrainableWeights):zO(e.trainableWeights);return t}(e),u=zO(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function LM(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function zM(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}LM([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function BM(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];LM([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)LM(["","","",a[e]],t,s)}function PM(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function WM(e,t){if(null===e)return null;if("string"==typeof e)return r_(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];PM(t,r,s)?n.push(s):n.push(WM(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=r_(n);t[e]=WM(s,e)}}return t}}function UM(e,t){if(null==e)return null;if("string"==typeof e)return s_(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];PM(t,r,s)?n.push(s):n.push(UM(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=s_(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?UM(s,n):s}return t}}
/** @license See the LICENSE file. */class VM{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof VM)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new XD(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Xo(t,e.dtype)}catch(n){throw new XD(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof GO){if(null==this.id2Value[e.id])throw new XD(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new XD(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof GO){if(null==this.id2Value[e.id])throw new XD(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new XD(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Ph(this.id2Mask)}}const GM={},HM={};function jM(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==GM[c]){const e=function(e,t){Ys.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=KM(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=KM(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:qM(s)}}(i,t);h=e.sorted,p=e.recipientCounts,GM[c]=h,HM[c]=p}h=GM[c],p={},r||Object.assign(p,HM[c]);const d=new VM(t);for(let e=0;e<h.length;++e){if(null!=s){const e=Lh().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof YO)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=n_(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=XM(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||Ph(f)}return d.disposeMasks(),a?l:l[0]}function qM(e){const t={};for(const n in e)t[n]=e[n].size;return t}function KM(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function XM(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class YM extends KO{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=DO(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],c_(this.inputs).length!==this.inputs.length)throw new XD(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);c_(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;QD(0===n,"input layer has >1 nodes"),QD(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof YO))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new KD(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(YM.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(u_);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof YM&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(u_);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new KD(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new KD(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new jO({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new XD("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new XD(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new XD(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new XD(`${e.length} of ${s} weights are not set: ${e}`)}UO(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.13.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=UM(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Bh((()=>{e=n_(e);const n=new VM;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return jM(this.outputs,n,t)}))}computeMask(e,t){return Bh((()=>{let n;return e=n_(e),n=null==t?JD(null,e.length):n_(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=OO(e);if(t.length!==this.inputLayers.length)throw new XD(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(u_);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=OO(t.computeOutputShape(t_(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){n[`${t.name}_${a}_${e}`]=r[e]}}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];QD(t in n),r.push(n[t])}return t_(r)}runInternalGraph(e,t){null==t&&(t=JD(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(u_);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=n_(t.call(e,u)),l=n_(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=n_(t.call(s,u)),l=n_(t.computeMask(s,i));if(t.activityRegularizer)throw new YD("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){QD(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof YM?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=YM.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new XD(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new XD("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new XD(`No such layer: ${e}`)}calculateLosses(){return Bh((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=YM.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=YM.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[YM.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=YM.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=YM.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(t_(n),s)}function l(e){const n=e.name,a=uM(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new XD(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!h_(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];QD(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];QD(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new XD("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Bh((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function ZM(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function JM(e,t){return ZM(e,t,"classWeight")}async function QM(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Bh((()=>{if(1===e.shape.length)return Yo(e);if(2===e.shape.length){if(e.shape[1]>1){return hf(e,1)}if(1===e.shape[1])return cc(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());Ph(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),Dp(r,"float32")}return null}function eL(e,t){return ic(e,t)}function tL(e,t){let n,s;const r=t;n=r.xs,s=r.ys,Ys.assert(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=nL("input",e.inputNames,n),i=nL("output",e.outputNames,s),o=a[0].shape[0];Ys.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Ys.assert(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Ys.assert(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Ys.assert(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function nL(e,t,n){if(n instanceof ea)return[n];if(Array.isArray(n))return Ys.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new XD(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function sL(e,t,n){const s=null!=n.batchesPerEpoch;if(Ys.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Ys.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Ys.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Ys.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Ys.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(rL(n.validationData))Ys.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new YD("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=iM(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=lM(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=tL(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=JM(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await QM(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);Ph(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,Wh(n)}await p.onBatchEnd(h,a),QO(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=rL(n.validationData)?n_(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):n_(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function rL(e){return"function"==typeof e.iterator}function aL(e){Ys.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function iL(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>K_(e,t,n-t))):K_(e,t,n-t)}function oL(e,t){return Bh((()=>null==e?null:Array.isArray(e)?e.map((e=>oL(e,t))):nO(e,"int32"===t.dtype?t:Xo(t,"int32"))))}function lL(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}async function uL(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c,h,p;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;aL(d);const f=!1,m=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,f,d);r=m[0],a=m[1],p=m[2];let g,y=!1;if(null!=s.validationData&&s.validationData.length>0){if(y=!0,2!==s.validationData.length)throw 3===s.validationData.length?new YD("validationData including sample weights is not supported yet."):new XD(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);l=s.validationData[0],u=s.validationData[1];const t=!0,n=await e.standardizeUserData(l,u,null,null,t,d);c=n[0],h=n[1],g=c.concat(h)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){y=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];c=iL(r,e,t),i=r,r=iL(r,0,e),h=iL(a,e,t),o=a,a=iL(a,0,e),g=c.concat(h)}else null!=s.validationSteps&&(y=!0);const b=r.concat(a).concat(p);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const I=iM(s.callbacks,s.yieldEvery),S=await async function(e,t,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new XD("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=H_(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=lM(o,i,a,p,g,d,r,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new YD("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new YD("batch shuffling is not implemneted yet");c&&Ys.shuffle(y);const i=Dp(y),o=lL(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Bh((()=>{const p=o[c][0],d=o[c][1],f=K_(i,p,d-p);h.batch=c,h.size=d-p;const g=oL(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,Wh(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,r);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];Wh(r),a["val_"+n]=r}}})),await b.onBatchEnd(c,h),QO(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,s.epochs,s.verbose,I,k,g,s.shuffle,v,s.initialEpoch,null,null);return S}finally{e.isTraining=!1,hL(r,t),hL(a,n),hL(i,t),hL(o,n),hL(c,l),hL(h,u),null!=p&&Ph(p)}}function cL(e){const t=[];e instanceof ea&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(q_(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function hL(e,t){if(null==e)return;const n=[];if(t instanceof ea)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof ea)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function pL(e){return Array.isArray(e)}function dL(e){return!function(e){return e instanceof ea}(e)&&!pL(e)}function fL(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(pL(e)&&e.length>0)t=!0;else if(dL(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new XD(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(dL(e)){a=[];for(const n of t){if(null==e[n])throw new XD(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(pL(e)){if(e.length!==t.length)throw new XD(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new XD(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=cL(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new XD(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new XD(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function mL(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new XD(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new XD(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new XD(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new XD(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class gL extends YM{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new XD("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");MM(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Jg.adagrad(.01),Adadelta:()=>Jg.adadelta(1,.95,jD()),Adam:()=>Jg.adam(.001,.9,.999,jD()),Adamax:()=>Jg.adamax(.002,.9,.999,jD(),0),RMSProp:()=>Jg.rmsprop(.001,.9,0,jD()),SGD:()=>Jg.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new XD(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ug))throw new XD("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new XD(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>kM(e)))}else{const n=kM(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new XD(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(kM(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],L_("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};L_("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===yM?-1!==["accuracy","acc"].indexOf(i)?s=vM:-1!==["crossentropy","ce"].indexOf(i)&&(s=TM):this.lossFunctions[e]===gM?-1!==["accuracy","acc"].indexOf(i)?s=CM:-1!==["crossentropy","ce"].indexOf(i)&&(s=EM):-1!==["accuracy","acc"].indexOf(i)?s=IM:-1!==["crossentropy","ce"].indexOf(i)&&(s=$M),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=RM(i);a=e,n=""+FM(i)}let t;L_(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;aL(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return t_(this.testLoop(i,a,s,n.verbose,n.steps))}finally{hL(r[0],e),hL(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new YD("Verbose mode is not implemented yet.");Ys.assert(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=Bh((()=>{if(t.value){const{xs:n,ys:s}=tL(e,t.value),i=n.concat(s),u=Bh((()=>r(i)));if(Ph(i),0===l)for(let e=0;e<u.length;++e)a.push(dp(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Bh((()=>Jh(a[e],ic(c,t)))),l>0&&Ph(n)}Ph(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=ep(a[e],o),Ph(t)}return t_(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new XD(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new XD(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new XD("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new VM;if(e instanceof ea&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new XD(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new XD(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=jM(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=JD(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new XD(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Bh((()=>{const s=this.checkNumSamples(e);if(n)throw new YD("Verbose predictLoop() is not implemented yet.");const r=lL(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){Bh((()=>{const n=r[t][0],s=r[t][1],a=iL(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new VM(i);return jM(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return t_(a.map((e=>np(e,0))))}))}predict(e,t={}){const n=cL(e);mL(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return aL(s),this.predictLoop(n,s)}finally{hL(n,e)}}predictOnBatch(e){mL(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new KD("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===gM?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=c_(e.map((e=>e.shape[0])));s.sort();const r=c_(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new XD(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new XD(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!Ys.arraysEqual(s,r))throw new XD(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=fL(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=fL(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[hM,yM,mM];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===mM&&1===a.shape[a.shape.length-1])throw new XD(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new XD(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new XD(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=JM(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await QM(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return Bh((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new YD("Verbose mode is not implemented yet.");if(null!=r)throw new YD("steps mode in testLoop() is not implemented yet");{const s=lL(a,n),r=Dp(H_(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=K_(r,a,o-a),u=oL(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(dp(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Jh(i[e],ic(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=ep(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(e_(e,s)>1){r+=`_${e_(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new VM(e),o=jM(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=eL(n,r[e]));const a=_d(n);t.push(a),l=0===e?n:Jh(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=_d(t(s[r],o[r]))}Wh(n),a.push(n)}return l=_d(l),this.calculateLosses().forEach((e=>{l=Jh(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Bh((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new VM(a),o=jM(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=_d(s(r[e],o[e]));n=0===e?a:Jh(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=_d(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return uL(this,e,t,n)}async fitDataset(e,t){return sL(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Ph(a),hL(n[0],e),hL(n[1],t),t_(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Lh().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Lh().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=s_(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>s_(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=s_(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[s_(FM(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>s_(FM(e))));{const e={};for(const t in this.metrics)e[t]=s_(FM(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=uM(WM(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=r_(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>r_(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=r_(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>r_(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=r_(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Qo.getSaveHandlers(e);if(0===t.length)throw new XD(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new XD(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new XD("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Qo.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.13.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Qo.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=Qo.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;_M(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){_M(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}gL.className="Model",au.registerClass(gL);class yL extends gL{}yL.className="Functional",au.registerClass(yL);class bL extends gL{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:DO("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new XD(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof bL||e instanceof gL;let n;if(t){if(n=e,1!==n.outputs.length)throw new XD("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new XD("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new XD("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=ZO({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new XD(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new XD("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=XO(this.outputs[0])}this.inboundNodes=[],new jO({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:JD(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(LO(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new gL({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new KD("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new KD("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new KD("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new KD("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new XD("Legacy serialization format not supported yet.");r=t}else Ys.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof bL))throw new YD(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=uM(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new XD("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new XD("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}bL.className="Sequential",au.registerClass(bL);class xL extends au.Serializable{getConfig(){return{}}}class wL extends xL{apply(e,t=1){return function(e,t=1){if(1!==t)throw new YD(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return rc(e)}(e,t)}}wL.className="elu",au.registerClass(wL);class kL extends xL{apply(e){return Qm(e)}}kL.className="selu",au.registerClass(kL);class vL extends xL{apply(e){return lc(e)}}vL.className="relu",au.registerClass(vL);class IL extends xL{apply(e){return Bh((()=>Wd(6,lc(e))))}}IL.className="relu6",au.registerClass(IL);class SL extends xL{apply(e){return e}}SL.className="linear",au.registerClass(SL);class NL extends xL{apply(e){return hc(e)}}NL.className="sigmoid",au.registerClass(NL);class TL extends xL{apply(e){return function(e){return Bh((()=>{const t=Jh(.5,ic(.2,e));return Ef(t,0,1)}))}(e)}}TL.className="hardSigmoid",au.registerClass(TL);class CL extends xL{apply(e){return im(e)}}CL.className="softplus",au.registerClass(CL);class $L extends xL{apply(e){return function(e){return Bh((()=>ep(e,Jh(bd(e),1))))}(e)}}$L.className="softsign",au.registerClass($L);class EL extends xL{apply(e){return wf(e)}}EL.className="tanh",au.registerClass(EL);class AL extends xL{apply(e,t=-1){return ug(e,t)}}AL.className="softmax",au.registerClass(AL);class RL extends xL{apply(e,t=-1){return lm(e,t)}}RL.className="logSoftmax",au.registerClass(RL);class FL extends xL{apply(e,t=1){return Bh((()=>ic(hc(ic(e,t)),e)))}}FL.className="swish",au.registerClass(FL);class DL extends xL{apply(e){return Bh((()=>ic(e,wf(im(e)))))}}function _L(e){return e.getClassName()}function OL(e,t={}){return l_(e,au.SerializationMap.getMap().classNameMap,t,"activation")}function ML(e){if(null==e){const e={className:"linear",config:{}};return OL(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},OL(t)}return e instanceof xL?e:OL(e)}function LL(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}DL.className="mish",au.registerClass(DL);class zL extends au.Serializable{}class BL extends zL{constructor(e){super(),LL(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Bh((()=>{let t=op([1]);return this.hasL1&&(t=Jh(t,dc(ic(this.l1,bd(e))))),this.hasL2&&(t=Jh(t,dc(ic(this.l2,sO(e))))),cc(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}BL.className="L1L2",au.registerClass(BL);const PL={l1l2:"L1L2"};function WL(e){return i_(e)}function UL(e,t={}){return l_(e,au.SerializationMap.getMap().classNameMap,t,"regularizer")}function VL(e){if(null==e)return null;if("string"==typeof e){return UL({className:e in PL?PL[e]:e,config:{}})}return e instanceof zL?e:UL(e)}class GL extends KO{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=MO(e);let n=lc(e);return null!=this.maxValue&&(n=Ef(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}GL.className="ReLU",au.registerClass(GL);class HL extends KO{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=MO(e);return ac(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}HL.className="LeakyReLU",au.registerClass(HL);class jL extends KO{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=EO(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=VL(e.alphaRegularizer),this.alphaConstraint=T_(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new XD(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=LO(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new VO({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=MO(e),oc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:$O(this.alphaInitializer),alphaRegularizer:WL(this.alphaRegularizer),alphaConstraint:S_(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}jL.className="PReLU",au.registerClass(jL);class qL extends KO{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new YD(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=MO(e);return rc(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}qL.className="ELU",au.registerClass(qL);class KL extends KO{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=MO(e);return ic(n,Xo(rd(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}KL.className="ThresholdedReLU",au.registerClass(KL);class XL extends KO{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new AL).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=MO(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function YL(e,t,n){if("number"==typeof e)return JD(e,t);if(e.length!==t)throw new XD(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new XD(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function ZL(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function JL(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+G_([n-t,0]);else{if("same"!==s)throw new XD(`Unsupport padding mode: ${s}.`);e*=t}return e}function QL(e,t){return Bh((()=>(D_(t),"channelsFirst"===t?kl(e,[0,2,3,1]):e)))}function ez(e,t){return Bh((()=>(D_(t),"channelsFirst"===t?kl(e,[0,2,3,4,1]):e)))}function tz(e,t,n,s=1,r="valid",a,i=1){return Bh((()=>{if(null==a&&(a="channelsLast"),D_(a),3!==e.shape.length)throw new XD(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new XD(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new XD(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=kl(e,[0,2,1])),"causal"===r)throw new YD("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=_f(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=aO(o,n)),o}))}function nz(e,t,n,s=[1,1],r="valid",a,i,o=null){return Bh((()=>{if(null==a&&(a="channelsLast"),D_(a),3!==e.rank&&4!==e.rank)throw new XD(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new XD(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=QL(e,a);if("causal"===r)throw new YD("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=mp.conv2d({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=kl(l,[0,3,1,2])),l}))}function sz(e,t,n,s=[1,1,1],r="valid",a,i){return Bh((()=>{if(null==a&&(a="channelsLast"),D_(a),4!==e.rank&&5!==e.rank)throw new XD(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new XD(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=ez(e,a);if("causal"===r)throw new YD("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Mf(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=aO(o,n)),"channelsFirst"===a&&(o=kl(o,[0,4,1,2,3])),o}))}XL.className="Softmax",au.registerClass(XL);class rz extends KO{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",rz.verifyArgs(t),this.rank=e,f_(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new YD(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=YL(t.kernelSize,e,"kernelSize"),this.strides=YL(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,__(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,D_(this.dataFormat),this.activation=ML(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=EO(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=T_(t.biasConstraint),this.biasRegularizer=VL(t.biasRegularizer),this.activityRegularizer=VL(t.activityRegularizer),this.dilationRate=YL(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new XD(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new XD(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new XD(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(QD("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!d_(e.kernelSize,"number",1,3))throw new XD(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:_L(this.activation),useBias:this.useBias,biasInitializer:$O(this.biasInitializer),biasRegularizer:WL(this.biasRegularizer),activityRegularizer:WL(this.activityRegularizer),biasConstraint:S_(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class az extends rz{constructor(e,t){super(e,t),this.kernel=null,az.verifyArgs(t),this.filters=t.filters,f_(this.filters,"filters"),this.kernelInitializer=EO(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=T_(t.kernelConstraint),this.kernelRegularizer=VL(t.kernelRegularizer)}build(e){e=LO(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new XD(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Bh((()=>{let t;e=MO(e);const n=null==this.bias?null:this.bias.read(),s=g_(this.activation.getClassName());if(null!=s&&2===this.rank)t=nz(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=tz(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=nz(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new YD("convolutions greater than 3D are not implemented yet.");t=sz(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=LO(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=ZL(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:$O(this.kernelInitializer),kernelRegularizer:WL(this.kernelRegularizer),kernelConstraint:S_(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new XD(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class iz extends az{constructor(e){super(2,e),iz.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!d_(e.kernelSize,"number",1,2))throw new XD(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}iz.className="Conv2D",au.registerClass(iz);class oz extends az{constructor(e){super(3,e),oz.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new XD(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}oz.className="Conv3D",au.registerClass(oz);class lz extends iz{constructor(e){if(super(e),this.inputSpec=[new VO({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new XD(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=LO(e)).length)throw new XD("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new XD("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new VO({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Bh((()=>{let t=MO(e);if(4!==t.shape.length)throw new XD(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,JL(i,c,l,this.padding),JL(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=kl(t,[0,2,3,1]));let d=Of(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=kl(d,[0,3,1,2])),null!=this.bias&&(d=aO(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=LO(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=JL(t[s],o,a,this.padding),t[r]=JL(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}lz.className="Conv2DTranspose",au.registerClass(lz);class uz extends oz{constructor(e){if(super(e),this.inputSpec=[new VO({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new XD(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=LO(e)).length)throw new XD("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new XD("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new VO({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Bh((()=>{let t=MO(e);if(5!==t.shape.length)throw new XD(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,JL(o,d,c,this.padding),JL(l,f,h,this.padding),JL(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=kl(t,[0,2,3,4,1]));let y=zf(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=kl(y,[0,4,1,2,3])),null!==this.bias&&(y=aO(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=LO(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=JL(t[s],u,i,this.padding),t[r]=JL(t[r],c,o,this.padding),t[a]=JL(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}uz.className="Conv3DTranspose",au.registerClass(uz);class cz extends az{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new XD("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new XD("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new XD(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=EO(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=VL(t.depthwiseRegularizer),this.depthwiseConstraint=T_(t.depthwiseConstraint),this.pointwiseInitializer=EO(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=VL(t.pointwiseRegularizer),this.pointwiseConstraint=T_(t.pointwiseConstraint)}build(e){if((e=LO(e)).length<this.rank+2)throw new XD(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new XD(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new VO({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Bh((()=>{let t;if(e=MO(e),1===this.rank)throw new YD("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=kl(e,[0,2,3,1])),t=eg(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=aO(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=kl(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=$O(this.depthwiseInitializer),e.pointwiseInitializer=$O(this.pointwiseInitializer),e.depthwiseRegularizer=WL(this.depthwiseRegularizer),e.pointwiseRegularizer=WL(this.pointwiseRegularizer),e.depthwiseConstraint=S_(this.depthwiseConstraint),e.pointwiseConstraint=S_(this.pointwiseConstraint),e}}cz.className="SeparableConv";class hz extends cz{constructor(e){super(2,e)}}hz.className="SeparableConv2D",au.registerClass(hz);class pz extends az{constructor(e){super(1,e),pz.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!d_(e.kernelSize,"number",1,1))throw new XD(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}pz.className="Conv1D",au.registerClass(pz);class dz extends KO{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Bh((()=>{if(e=MO(e),"channelsLast"===this.dataFormat){const t=Y_(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Y_(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Y_(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Y_(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}dz.className="Cropping2D",au.registerClass(dz);class fz extends KO{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,D_(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,p_($_,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Bh((()=>{let t=MO(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=kl(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?Lg.resizeNearestNeighbor(t,[e,s]):Lg.resizeBilinear(t,[e,s]);return kl(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?Lg.resizeNearestNeighbor(t,[e,s]):Lg.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}fz.className="UpSampling2D",au.registerClass(fz);class mz extends rz{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=EO(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=T_(e.depthwiseConstraint),this.depthwiseRegularizer=VL(e.depthwiseRegularizer)}build(e){if((e=LO(e)).length<4)throw new XD(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new XD(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Bh((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return Bh((()=>{null==r&&(r="channelsLast"),D_(r);let i=QL(e,r);if(4!==e.rank)throw new XD(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new XD(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Cp(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=kl(i,[0,3,1,2])),i}))}(e=MO(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=aO(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=LO(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=ZL(t,this.kernelSize[0],this.padding,this.strides[0]),a=ZL(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=$O(this.depthwiseInitializer),e.depthwiseRegularizer=WL(this.depthwiseRegularizer),e.depthwiseConstraint=S_(this.depthwiseRegularizer),e}}mz.className="DepthwiseConv2D",au.registerClass(mz);var gz={};function yz(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new XD("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function bz(e,t,n,s=!1,r,a,i=!1,o=!1){return Bh((()=>{const l=t.shape.length;if(l<3)throw new XD(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(H_(2,l));if(t=kl(t,u),null!=a)throw new YD("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=Xo(Xo(r,"bool"),"float32")).rank===l-1&&(r=$d(r,-1)),r=kl(r,u)),s&&(t=pp(t,0),null!=r&&(r=pp(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=md(t);let m,g;null!=r&&(m=md(r));for(let t=0;t<d;++t){const n=f[t],s=Bh((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=Bh((()=>{const e=m[t],n=ad(vm(e),e);return{output:Jh(ic(s[0],e),ic(p[0],n)),newStates:p.map(((t,r)=>Jh(ic(s[1][r],e),ic(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=fd(c,1)}return[h,g,p]}))}n(gz,"ConvLSTM2DCell",(()=>Rz),(e=>Rz=e)),n(gz,"ConvLSTM2D",(()=>Fz),(e=>Fz=e));class xz extends KO{constructor(e){let t;if(super(e),null==e.cell)throw new XD("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Cz({cells:e.cell}):e.cell,null==t.stateSize)throw new XD("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new VO({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return H_(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){_O(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return Bh((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new YD("Constants support is not implemented in RNN yet.");_O(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new VO({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Ys.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new XD(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new VO({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Bh((()=>{if(!this.stateful)throw new qD("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new XD("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>op([n,e]))):this.states_=[op([n,this.cell.stateSize])];else if(null==e)Ph(this.states_),null!=this.keptStates&&(Ph(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>op([n,e]))):this.states_[0]=op([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new XD(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Ph(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!Ys.arraysEqual(s.shape,a))throw new XD(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>Wh(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=yz(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new VO({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof GO){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Bh((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=MO(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new XD(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=bz(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Bh((()=>{let t=op(e.shape);return t=dc(t,[1,2]),t=q_(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Q_(t,[1,e]):t)):this.cell.stateSize>1?[Q_(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===xz.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=uM(t.cell,n);return new e(Object.assign(t,{cell:s}))}}xz.className="RNN",au.registerClass(xz);class wz extends KO{}class kz extends wz{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,f_(this.units,"units"),this.activation=ML(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=EO(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=EO(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=EO(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=VL(e.kernelRegularizer),this.recurrentRegularizer=VL(e.recurrentRegularizer),this.biasRegularizer=VL(e.biasRegularizer),this.kernelConstraint=T_(e.kernelConstraint),this.recurrentConstraint=T_(e.recurrentConstraint),this.biasConstraint=T_(e.biasConstraint),this.dropout=V_([1,G_([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=V_([1,G_([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=LO(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Bh((()=>{if(2!==e.length)throw new XD(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$z({ones:()=>vm(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$z({ones:()=>vm(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=tO(null!=a?ic(e,a):e,this.kernel.read()),null!=this.bias&&(r=aO(r,this.bias.read())),null!=i&&(n=ic(n,i));let o=Jh(r,tO(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:_L(this.activation),useBias:this.useBias,kernelInitializer:$O(this.kernelInitializer),recurrentInitializer:$O(this.recurrentInitializer),biasInitializer:$O(this.biasInitializer),kernelRegularizer:WL(this.kernelRegularizer),recurrentRegularizer:WL(this.recurrentRegularizer),biasRegularizer:WL(this.biasRegularizer),activityRegularizer:WL(this.activityRegularizer),kernelConstraint:S_(this.kernelConstraint),recurrentConstraint:S_(this.recurrentConstraint),biasConstraint:S_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}kz.className="SimpleRNNCell",au.registerClass(kz);class vz extends xz{constructor(e){e.cell=new kz(e),super(e)}call(e,t){return Bh((()=>{null!=this.cell.dropoutMask&&(Ph(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ph(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}vz.className="SimpleRNN",au.registerClass(vz);class Iz extends wz{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new XD("GRUCell does not support reset_after parameter set to true.");this.units=e.units,f_(this.units,"units"),this.activation=ML(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ML(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=EO(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=EO(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=EO(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=VL(e.kernelRegularizer),this.recurrentRegularizer=VL(e.recurrentRegularizer),this.biasRegularizer=VL(e.biasRegularizer),this.kernelConstraint=T_(e.kernelConstraint),this.recurrentConstraint=T_(e.recurrentConstraint),this.biasConstraint=T_(e.biasConstraint),this.dropout=V_([1,G_([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=V_([1,G_([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=LO(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Bh((()=>{if(2!==e.length)throw new XD(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$z({ones:()=>vm(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$z({ones:()=>vm(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=ic(e,r[0]));let u=tO(e,this.kernel.read());this.useBias&&(u=aO(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=ic(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=ip(c,[2*this.units,this.units],c.rank-1),d=tO(s,h),[f,m,g]=ip(u,3,u.rank-1),[y,b]=ip(d,2,d.rank-1);i=this.recurrentActivation.apply(Jh(f,y)),o=this.recurrentActivation.apply(Jh(m,b));const x=tO(ic(o,s),p);l=this.activation.apply(Jh(g,x));const w=Jh(ic(i,s),ic(Jh(1,Ad(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:_L(this.activation),recurrentActivation:_L(this.recurrentActivation),useBias:this.useBias,kernelInitializer:$O(this.kernelInitializer),recurrentInitializer:$O(this.recurrentInitializer),biasInitializer:$O(this.biasInitializer),kernelRegularizer:WL(this.kernelRegularizer),recurrentRegularizer:WL(this.recurrentRegularizer),biasRegularizer:WL(this.biasRegularizer),activityRegularizer:WL(this.activityRegularizer),kernelConstraint:S_(this.kernelConstraint),recurrentConstraint:S_(this.recurrentConstraint),biasConstraint:S_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Iz.className="GRUCell",au.registerClass(Iz);class Sz extends xz{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Iz(e),super(e)}call(e,t){return Bh((()=>{null!=this.cell.dropoutMask&&(Ph(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ph(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Sz.className="GRU",au.registerClass(Sz);class Nz extends wz{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,f_(this.units,"units"),this.activation=ML(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ML(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=EO(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=EO(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=EO(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=VL(e.kernelRegularizer),this.recurrentRegularizer=VL(e.recurrentRegularizer),this.biasRegularizer=VL(e.biasRegularizer),this.kernelConstraint=T_(e.kernelConstraint),this.recurrentConstraint=T_(e.recurrentConstraint),this.biasConstraint=T_(e.biasConstraint),this.dropout=V_([1,G_([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=V_([1,G_([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=LO(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends cO{apply(t,s){const r=e.apply([n]),a=(new pO).apply([n]),i=e.apply([2*n]);return J_(J_(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Bh((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new XD(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$z({ones:()=>vm(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$z({ones:()=>vm(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=ic(e,a[0]));let h=tO(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=ic(s,i[0])),h=Jh(h,tO(s,this.recurrentKernel.read())),this.useBias&&(h=aO(h,this.bias.read()));const[p,d,f,m]=ip(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=Jh(ic(l,r),ic(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=ic(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:_L(this.activation),recurrentActivation:_L(this.recurrentActivation),useBias:this.useBias,kernelInitializer:$O(this.kernelInitializer),recurrentInitializer:$O(this.recurrentInitializer),biasInitializer:$O(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:WL(this.kernelRegularizer),recurrentRegularizer:WL(this.recurrentRegularizer),biasRegularizer:WL(this.biasRegularizer),activityRegularizer:WL(this.activityRegularizer),kernelConstraint:S_(this.kernelConstraint),recurrentConstraint:S_(this.recurrentConstraint),biasConstraint:S_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Nz.className="LSTMCell",au.registerClass(Nz);class Tz extends xz{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Nz(e),super(e)}call(e,t){return Bh((()=>{null!=this.cell.dropoutMask&&(Ph(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ph(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Tz.className="LSTM",au.registerClass(Tz);class Cz extends wz{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Bh((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;_O(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{L_(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(uM(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return WO(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}UO(t)}}function $z(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):iO(t(),n),o=()=>oO(i,t,s);if(!r||r<=1)return Wh(o().clone());return Array(r).fill(void 0).map(o).map((e=>Wh(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */Cz.className="StackedRNNCells",au.registerClass(Cz);var Ez=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class Az extends xz{constructor(e){if(e.unroll)throw new YD("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new YD("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new VO({ndim:5})]}call(e,t){return Bh((()=>{if(null!=this.cell.dropoutMask&&(Ph(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ph(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new XD("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Bh((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=op([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){Bh((()=>{if(!this.stateful)throw new qD("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new XD("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>op(r))):this.states_=[op(r)];else if(null==e)Ph(this.states_),null!=this.keptStates&&(Ph(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>op(r))):this.states_[0]=op(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new XD(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Ph(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!Ys.arraysEqual(n.shape,s))throw new XD(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Wh(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=ZL(l,s[0],r,a[0],i[0]),h=ZL(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Az.className="ConvRNN2D";class Rz extends Nz{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,f_(this.filters,"filters"),this.kernelSize=YL(n,2,"kernelSize"),this.kernelSize.forEach((e=>f_(e,"kernelSize"))),this.strides=YL(s||1,2,"strides"),this.strides.forEach((e=>f_(e,"strides"))),this.padding=r||"valid",__(this.padding),this.dataFormat=a||"channelsLast",D_(this.dataFormat),this.dilationRate=YL(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>f_(e,"dilationRate")))}build(e){var t;e=LO(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new XD(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends cO{apply(e,t){return Z_([n.apply([s]),Md([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Bh((()=>{if(3!==e.length)throw new XD(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=$z({ones:()=>vm(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?ic(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=$z({ones:()=>vm(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=ip(this.kernel.read(),4,3),[k,v,I,S]=this.useBias?ip(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,S,this.padding);const[N,T,C,$]=ip(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,N),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(Jh(l,d)),A=this.recurrentActivation.apply(Jh(u,f)),R=Jh(ic(A,a),ic(E,this.activation.apply(Jh(c,m)))),F=ic(this.recurrentActivation.apply(Jh(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=Ez(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=Ip(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?aO(r,n,this.dataFormat):r}recurrentConv(e,t){return Ip(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Rz.className="ConvLSTM2DCell",au.registerClass(Rz);class Fz extends Az{constructor(e){const t=new Rz(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Fz.className="ConvLSTM2D",au.registerClass(Fz);class Dz extends KO{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return oO((()=>iO(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Dz.className="Dropout",au.registerClass(Dz);class _z extends Dz{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}_z.className="SpatialDropout1D",au.registerClass(_z);class Oz extends KO{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,f_(this.units,"units"),this.activation=ML(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=EO(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=EO(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=T_(e.kernelConstraint),this.biasConstraint=T_(e.biasConstraint),this.kernelRegularizer=VL(e.kernelRegularizer),this.biasRegularizer=VL(e.biasRegularizer),this.activityRegularizer=VL(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=LO(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=LO(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e),s=g_(this.activation.getClassName());let r;return null!=s?r=tO(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=tO(n,this.kernel.read()),null!=this.bias&&(r=aO(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:_L(this.activation),useBias:this.useBias,kernelInitializer:$O(this.kernelInitializer),biasInitializer:$O(this.biasInitializer),kernelRegularizer:WL(this.kernelRegularizer),biasRegularizer:WL(this.biasRegularizer),activityRegularizer:WL(this.activityRegularizer),kernelConstraint:S_(this.kernelConstraint),biasConstraint:S_(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Oz.className="Dense",au.registerClass(Oz);class Mz extends KO{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=LO(e);for(const t of e.slice(1))if(null==t)throw new XD(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],U_(e,1)]}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);let n=MO(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=kl(n,e)}return function(e){if(e.rank<=1)throw new XD(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],U_(e.shape,1)];return cc(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Mz.className="Flatten",au.registerClass(Mz);class Lz extends KO{constructor(e){super(e),this.supportsMasking=!0,this.activation=ML(e.activation)}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e);return this.activation.apply(n)}))}getConfig(){const e={activation:_L(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Lz.className="Activation",au.registerClass(Lz);class zz extends KO{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Bh((()=>{return e=MO(e),t=e,n=this.n,Bh((()=>{if(2!==t.shape.length)throw new XD(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Q_(q_(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}zz.className="RepeatVector",au.registerClass(zz);class Bz extends KO{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new XD("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=U_(e);if(null!==a){if(0===r||i%r!=0)throw new XD(n);s[a]=i/r}else if(i!==r)throw new XD(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return cc(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Bz.className="Reshape",au.registerClass(Bz);class Pz extends KO{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=H_(1,e.dims.length+1);if(!Ys.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new VO({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=LO(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return kl(MO(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Pz.className="Permute",au.registerClass(Pz);class Wz extends KO{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=MO(e);return cf(Od(n,this.maskValue),-1)}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e),s=cf(Od(n,this.maskValue),-1,!0);return ic(n,Xo(s,n.dtype))}))}}Wz.className="Masking",au.registerClass(Wz);class Uz extends KO{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(n_(e.inputLength))}this.inputDim=e.inputDim,f_(this.inputDim,"inputDim"),this.outputDim=e.outputDim,f_(this.outputDim,"outputDim"),this.embeddingsInitializer=EO(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=VL(e.embeddingsRegularizer),this.activityRegularizer=VL(e.activityRegularizer),this.embeddingsConstraint=T_(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Bh((()=>this.maskZero?(e=MO(e),Od(e,lp(e))):null))}computeOutputShape(e){if(e=LO(e),null==this.inputLength)return[...e,this.outputDim];const t=n_(this.inputLength);if(t.length!==e.length-1)throw new XD(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new XD(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);let n=MO(e);"int32"!==n.dtype&&(n=j_(n,"int32"));const s=nO(this.embeddings.read(),cc(n,[n.size]));return cc(s,LO(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:$O(this.embeddingsInitializer),embeddingsRegularizer:WL(this.embeddingsRegularizer),activityRegularizer:WL(this.activityRegularizer),embeddingsConstraint:S_(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Uz.className="Embedding",au.registerClass(Uz);class Vz extends KO{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new YD}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new XD("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[LO(e)]),e.length<2)throw new XD(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=c_(t),t.length>1)throw new XD(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===c_(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Bh((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=G_(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=q_(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=cc(s,[r].concat(U_(e.slice(1))));i=kl(i,[1,0]),i=cc(i,a),t.push(i),n=!0}else if(e>1){const r=H_(1,e).concat([0]);t.push(kl(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=cc(kl(cc(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(H_(0,r-1));s=kl(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=c_(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Bh((()=>{if(null==t)return null;if(!Array.isArray(t))throw new XD("`mask` should be an Array");if(!Array.isArray(e))throw new XD("`inputs` should be an Array");if(t.length!==e.length)throw new XD(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:$d(e,0))))[0];for(let e=1;e<t.length-1;++e)n=dd(n,t[e]);return n}))}}class Gz extends Vz{constructor(e){super(e)}mergeFunction(e){return Bh((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Jh(t,e[n]);return t}))}}Gz.className="Add",au.registerClass(Gz);class Hz extends Vz{constructor(e){super(e)}mergeFunction(e){return Bh((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ic(t,e[n]);return t}))}}Hz.className="Multiply",au.registerClass(Hz);class jz extends Vz{constructor(e){super(e)}mergeFunction(e){return Bh((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Jh(t,e[n]);return ic(1/e.length,t)}))}}jz.className="Average",au.registerClass(jz);class qz extends Vz{constructor(e){super(e)}mergeFunction(e){return Bh((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=mm(t,e[n]);return t}))}}qz.className="Maximum",au.registerClass(qz);class Kz extends Vz{constructor(e){super(e)}mergeFunction(e){return Bh((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Wd(t,e[n]);return t}))}}Kz.className="Minimum",au.registerClass(Kz);class Xz extends Vz{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new XD("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(Ys.arraysEqual(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new XD("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Bh((()=>Z_(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new XD("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new XD("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new XD("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new XD(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Bh((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(Xo(vm(e[n]),"bool")):t[n].rank<e[n].rank?s.push($d(t[n],-1)):s.push(t[n]);const r=np(s,this.axis);return uf(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Yz(e,t){for(;e<0;)e+=t;return e}Xz.className="Concatenate",au.registerClass(Xz);class Zz extends Vz{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Ys.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new YD("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new XD(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new XD(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Yz(t,e[n].shape.length))):[Yz(this.axes,n.shape.length),Yz(this.axes,s.shape.length)],this.normalize&&(n=cM(n,t[0]),s=cM(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new YD("batchDot is not implemented for tensors of 4D or higher rank yet");if(Ys.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Ys.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new YD("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return Bh((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=cc(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=cc(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?dc(ic(e,t),a[0]):dc(ic(kl(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=bl(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=Td(i,t)}return 1===i.shape.length&&(i=$d(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Yz(this.axes,e.length),Yz(this.axes,t.length)],n}computeOutputShape(e){Ys.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new YD("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Zz.className="Dot",au.registerClass(Zz);class Jz extends KO{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e);return oO((()=>Jh(eO(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Jz.className="GaussianNoise",au.registerClass(Jz);class Qz extends KO{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Bh((()=>{this.invokeCallHook(e,t);const n=MO(e);if(this.rate>0&&this.rate<1){return oO((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return ic(n,eO(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}Qz.className="GaussianDropout",au.registerClass(Qz);class eB extends KO{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||MO(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Bh((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return oO((()=>{const t=MO(e),s=-1.7580993408473766;let r=pd(jm(n),this.rate);r=j_(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=Jh(ic(t,r),ic(Jh(r,-1),s));return Jh(ic(o,a),i)}),(()=>MO(e)),t.training||!1)}return e}))}}function tB(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=Sf(e,t,n,s,r,a);else if(3===e.rank)i=Nf(e,t,n,s,r,a);else{if(4!==e.rank)throw new YD(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Tf(e,t,n,s,r,a)}return i}function nB(e,t,n,s,r=.001){return Ys.arraysEqual(s.slice().sort(),H_(0,e.rank-1))?function(e,t,n,s,r=.001){return Bh((()=>{const a=xm(e,s),i=a.mean,o=a.variance;return[tB(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return Bh((()=>{const a=xm(e,s),i=a.mean,o=a.variance,l=[];for(const t of H_(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=cc(i,l),c=cc(o,l),h=null==t?null:cc(t,l),p=null==n?null:cc(n,l);return[tB(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}eB.className="AlphaDropout",au.registerClass(eB);class sB extends KO{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=EO(e.betaInitializer||"zeros"),this.gammaInitializer=EO(e.gammaInitializer||"ones"),this.movingMeanInitializer=EO(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=EO(e.movingVarianceInitializer||"ones"),this.betaConstraint=T_(e.betaConstraint),this.gammaConstraint=T_(e.gammaConstraint),this.betaRegularizer=VL(e.betaRegularizer),this.gammaRegularizer=VL(e.gammaRegularizer)}build(e){e=LO(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new XD(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new VO({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Bh((()=>{const n=null!=t.training&&t.training,s=MO(e),r=s.shape,a=r.length,i=H_(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=JD(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!Ys.arraysEqual(u,H_(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=cc(this.movingMean.read(),l),t=cc(this.movingVariance.read(),l),n=this.center?cc(this.beta.read(),l):null,r=this.scale?cc(this.gamma.read(),l):null;return tB(s,e,t,n,r,this.epsilon)}return tB(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=nB(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{Bh((()=>{const s=1-n,r=e.read(),a=ic(ad(r,t),s);e.write(ad(r,a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:$O(this.betaInitializer),gammaInitializer:$O(this.gammaInitializer),movingMeanInitializer:$O(this.movingMeanInitializer),movingVarianceInitializer:$O(this.movingVarianceInitializer),betaRegularizer:WL(this.betaRegularizer),gammaRegularizer:WL(this.gammaRegularizer),betaConstraint:S_(this.betaConstraint),gammaConstraint:S_(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}sB.className="BatchNormalization",au.registerClass(sB);class rB extends KO{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=EO(e.betaInitializer||"zeros"),this.gammaInitializer=EO(e.gammaInitializer||"ones"),this.betaRegularizer=VL(e.betaRegularizer),this.gammaRegularizer=VL(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=LO(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==c_(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=MO(e),s=n.shape,r=s.length;return Bh((()=>{let{mean:e,variance:t}=xm(n,this.axis,!0);const a=JD(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r?cc(e,a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=Gp(e,u),t=Gp(t,u),o=Gp(o,c),l=Gp(l,c),tB(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:$O(this.betaInitializer),gammaInitializer:$O(this.gammaInitializer),betaRegularizer:WL(this.betaRegularizer),gammaRegularizer:WL(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}rB.className="LayerNormalization",au.registerClass(rB);class aB extends KO{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new XD(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new XD(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new XD(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new VO({ndim:4})]}computeOutputShape(e){let t,n;return e=LO(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Bh((()=>{return t=MO(e),n=this.padding,s=this.dataFormat,Bh((()=>{if(4!==t.rank)throw new XD(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new XD("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new XD(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Sm(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function iB(e,t,n,s,r,a){return Bh((()=>{let i;D_(r),O_(a),__(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=QL(e,r);const o="same"===s?"same":"valid";return i="max"===a?pm(e,t,n,o):bf(e,t,n,o),"channelsFirst"===r&&(i=kl(i,[0,3,1,2])),i}))}function oB(e,t,n,s,r,a){return Bh((()=>{let i;D_(r),O_(a),__(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=ez(e,r);const o="same"===s?"same":"valid";return i="max"===a?dm(e,t,n,o):xf(e,t,n,o),"channelsFirst"===r&&(i=kl(i,[0,4,1,2,3])),i}))}aB.className="ZeroPadding2D",au.registerClass(aB);class lB extends KO{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new XD(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(f_(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new XD(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}f_(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,__(this.padding),this.inputSpec=[new VO({ndim:3})]}computeOutputShape(e){const t=ZL((e=LO(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Bh((()=>{this.invokeCallHook(e,t),e=q_(MO(e),2);const n=this.poolingFunction(MO(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Td(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class uB extends lB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return D_(r),__(s),iB(e,t,n,s,r,"max")}}uB.className="MaxPooling1D",au.registerClass(uB);class cB extends lB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return D_(r),__(s),iB(e,t,n,s,r,"avg")}}cB.className="AveragePooling1D",au.registerClass(cB);class hB extends KO{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new XD(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];f_(this.poolSize,"poolSize"),f_(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,D_(this.dataFormat),__(this.padding),this.inputSpec=[new VO({ndim:4})]}computeOutputShape(e){e=LO(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=ZL(t,this.poolSize[0],this.padding,this.strides[0]),n=ZL(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Bh((()=>(this.invokeCallHook(e,t),this.poolingFunction(MO(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class pB extends hB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return D_(r),__(s),iB(e,t,n,s,r,"max")}}pB.className="MaxPooling2D",au.registerClass(pB);class dB extends hB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return D_(r),__(s),iB(e,t,n,s,r,"avg")}}dB.className="AveragePooling2D",au.registerClass(dB);class fB extends KO{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new XD(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];f_(this.poolSize,"poolSize"),f_(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,D_(this.dataFormat),__(this.padding),this.inputSpec=[new VO({ndim:5})]}computeOutputShape(e){e=LO(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=ZL(t,this.poolSize[0],this.padding,this.strides[0]),n=ZL(n,this.poolSize[1],this.padding,this.strides[1]),s=ZL(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return Bh((()=>(this.invokeCallHook(e,t),this.poolingFunction(MO(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class mB extends fB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return D_(r),__(s),oB(e,t,n,s,r,"max")}}mB.className="MaxPooling3D",au.registerClass(mB);class gB extends fB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return D_(r),__(s),oB(e,t,n,s,r,"avg")}}gB.className="AveragePooling3D",au.registerClass(gB);class yB extends KO{constructor(e){super(e),this.inputSpec=[new VO({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new YD}}class bB extends yB{constructor(e){super(e||{})}call(e,t){return Bh((()=>{const t=MO(e);return _d(t,1)}))}}bB.className="GlobalAveragePooling1D",au.registerClass(bB);class xB extends yB{constructor(e){super(e||{})}call(e,t){return Bh((()=>{const t=MO(e);return xd(t,1)}))}}xB.className="GlobalMaxPooling1D",au.registerClass(xB);class wB extends KO{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,D_(this.dataFormat),this.inputSpec=[new VO({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new YD}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class kB extends wB{call(e,t){return Bh((()=>{const t=MO(e);return"channelsLast"===this.dataFormat?_d(t,[1,2]):_d(t,[2,3])}))}}kB.className="GlobalAveragePooling2D",au.registerClass(kB);class vB extends wB{call(e,t){return Bh((()=>{const t=MO(e);return"channelsLast"===this.dataFormat?xd(t,[1,2]):xd(t,[2,3])}))}}vB.className="GlobalMaxPooling2D",au.registerClass(vB);class IB extends KO{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=uM(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class SB extends IB{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=LO(e)).length<3)throw new XD(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=LO(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return Bh((()=>bz(((e,n)=>[MO(this.layer.call(e,t)),[]]),e=MO(e),[],!1,null,null,!1,!0)[1]))}}SB.className="TimeDistributed",au.registerClass(SB);class NB extends IB{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=uM(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=uM(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,p_(R_,"BidirectionalMergeMode",r),e.weights)throw new YD("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):t_(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=yz(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new XD("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new VO({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new YD("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof GO;for(const e of a)if(e instanceof GO!==o)throw new XD("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Bh((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=pp(r,1)),"concat"===this.mergeMode?i=Z_([s,r]):"sum"===this.mergeMode?i=Jh(s,r):"ave"===this.mergeMode?i=ic(.5,Jh(s,r)):"mul"===this.mergeMode?i=ic(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){L_(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),L_(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=uM(t.layer);if(delete t.layer,null!=t.numConstants)throw new YD("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}NB.className="Bidirectional",au.registerClass(NB);var TB,CB;le().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(TB||(TB={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(CB||(CB={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $B={};function EB(e){return $B[e]}function AB(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return RB(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>RB(e,n,s,r)))}const o=RB(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:Ys.toNestedArray(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function RB(e,t,n,s){const[r,a]=_B(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[DB(r,e)]));return void 0!==i?t[DB(r,i)][a]:void 0}function FB(e,t){const[n,s,r]=_B(e);return[DB(n,t&&t.currentContextId),s,r]}function DB(e,t){return t?`${e}-${t}`:e}function _B(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],s=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),s]}function OB(e,t,n){let s=AB("pad",e,t,n);if("explicit"===s){s=AB("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function MB(e){return e.kept?e:Yo(e)}var LB={};n(LB,"json",(()=>zB));const zB=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var BB={};n(BB,"json",(()=>PB));const PB=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var WB={};n(WB,"json",(()=>UB));const UB=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];var VB={};n(VB,"json",(()=>GB));const GB=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var HB={};n(HB,"json",(()=>jB));const jB=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var qB={};n(qB,"json",(()=>KB));const KB=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var XB={};n(XB,"json",(()=>YB));const YB=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var ZB={};n(ZB,"json",(()=>JB));const JB=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var QB={};n(QB,"json",(()=>eP));const eP=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var tP={};n(tP,"json",(()=>nP));const nP=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];var sP={};n(sP,"json",(()=>rP));const rP=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var aP={};n(aP,"json",(()=>iP));const iP=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var oP={};n(oP,"json",(()=>lP));const lP=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var uP={};n(uP,"json",(()=>cP));const cP=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var hP={};n(hP,"json",(()=>pP));const pP=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var dP={};n(dP,"json",(()=>fP));const fP=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var mP={};n(mP,"json",(()=>gP));const gP=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var yP={};n(yP,"json",(()=>bP));const bP=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var xP={};n(xP,"json",(()=>wP));const wP=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var kP=Ga;class vP{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[LB,BB,WB,VB,HB,qB,XB,ZB,QB,tP,sP,aP,oP,uP,hP,dP,mP,yP,xP].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=FB(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=FB(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=FB(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=EB(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=SP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=SP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=_P(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=_P(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=TP(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=TP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=DP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=DP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=NP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=NP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=MP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=MP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=FP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=FP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=OP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=OP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=EP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=EP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=AP(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=AP(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=$P(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=$P(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=FB(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:CP(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=FB(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=FB(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function IP(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=le().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==kP)return new kP(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function SP(e,t,n,s=!1){const r=e[t];return null!=r?IP(r.s,s):n}function NP(e,t,n){const s=e[t];return s?s.b:n}function TP(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function CP(e){switch("string"==typeof e&&(e=TB[e]),e){case TB.DT_FLOAT:case TB.DT_HALF:return"float32";case TB.DT_INT32:case TB.DT_INT64:case TB.DT_INT8:case TB.DT_UINT8:return"int32";case TB.DT_BOOL:return"bool";case TB.DT_DOUBLE:return"float32";case TB.DT_STRING:return"string";default:return null}}function $P(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function EP(e,t,n){const s=e[t];return s&&s.type?CP(s.type):n}function AP(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>CP(e))):n}function RP(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function FP(e,t,n){const s=e[t];return s&&s.shape?RP(s.shape):n}function DP(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function _P(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>IP(e,s))):n}function OP(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>RP(e))):n}function MP(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class LP{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return RB(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return RB(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return TP(this.node.rawAttrs,e,t);if(null!=n.s)return SP(this.node.rawAttrs,e,t);if(null!=n.b)return NP(this.node.rawAttrs,e,t);if(null!=n.shape)return FP(this.node.rawAttrs,e,t);if(null!=n.type)return EP(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return DP(this.node.rawAttrs,e,t);if(null!=n.list.s)return _P(this.node.rawAttrs,e,t);if(null!=n.list.shape)return OP(this.node.rawAttrs,e,t);if(null!=n.list.b)return MP(this.node.rawAttrs,e,t);if(null!=n.list.type)return AP(this.node.rawAttrs,e,t)}return t}}function zP(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Ys.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];Ys.assert(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function BP(e){return"number"!=typeof e&&!e.some((e=>e<0))}function PP(e,t,n){let s=WP(e,n);const r=!BP(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=WP(e.shape,s)})),!BP(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function WP(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class UP{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=dp(0),Wh(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),zP(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Wh(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Ua([],[0].concat(this.elementShape));const n=this.readMany(e);return zP(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),fd(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Ua([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return zP(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),np(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,md(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];Bh((()=>{t=cc(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=cc(ap(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class VP{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);zP(t,e.shape,"TensorList shape mismatch: "),Wh(e)})),this.idTensor=dp(0),this.maxNumElements=s,Wh(this.idTensor)}get id(){return this.idTensor.id}copy(){return new VP([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);zP(e,this.elementShape,"TensorList shape mismatch: ");const s=PP(this.elementShape,this.tensors,e);return Bh((()=>{const e=this.tensors.map((e=>cc(e,s)));return fd(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=PP(this.elementShape,this.tensors,e),s=this.tensors.pop();return zP(s.shape,e,"TensorList shape mismatch: "),cc(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(zP(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Wh(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);zP(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=PP(this.elementShape,this.tensors,t);return cc(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);zP(this.elementShape,t.shape,"TensorList shape mismatch: "),Wh(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);zP(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=PP(this.elementShape,this.tensors,n);return 0===e.length?Ua([],[0].concat(s)):Bh((()=>{const t=e.map((e=>cc(this.tensors[e],s)));return fd(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);zP(this.elementShape,t,"TensorList shape mismatch: ");const n=PP(this.elementShape,this.tensors,t);return 0===this.size()?Ua([],[0].concat(n)):Bh((()=>{const e=this.tensors.map((e=>cc(e,n)));return np(e,0)}))}}const GP=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=AB("thenBranch",e,t,n),r=AB("elseBranch",e,t,n),a=AB("cond",e,t,n),i=AB("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=AB("body",e,t,n),r=AB("cond",e,t,n),a=AB("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[MB(AB("pred",e,t,n))];case"Switch":{const s=AB("pred",e,t,n);let r=AB("data",e,t,n);return r.kept||(r=MB(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==RB(e,t,n)));if(s){return[MB(RB(s,t,n))]}return}case"Enter":{const s=AB("frameName",e,t,n),r=AB("tensor",e,t,n);return n.enterFrame(s),[MB(r)]}case"Exit":{const s=AB("tensor",e,t,n);return n.exitFrame(),[MB(s)]}case"NextIteration":{const s=AB("tensor",e,t,n);return n.nextIteration(),[MB(s)]}case"TensorArrayV3":{const s=AB("size",e,t,n),r=AB("dtype",e,t,n),a=AB("elementShape",e,t,n),i=AB("dynamicSize",e,t,n),o=AB("clearAfterRead",e,t,n),l=AB("identicalElementShapes",e,t,n),u=AB("name",e,t,n),c=new UP(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,dp(1)]}case"TensorArrayWriteV3":{const s=AB("tensorArrayId",e,t,n),r=AB("index",e,t,n),a=AB("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=AB("tensorArrayId",e,t,n),r=AB("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=AB("tensorArrayId",e,t,n),r=AB("indices",e,t,n),a=AB("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=AB("tensorArrayId",e,t,n),r=AB("indices",e,t,n),a=AB("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=AB("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=AB("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=AB("tensorArrayId",e,t,n),r=AB("tensor",e,t,n),a=AB("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=AB("tensorArrayId",e,t,n);return[dp(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=AB("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=AB("tensorListId",e,t,n),r=AB("index",e,t,n),a=AB("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=AB("tensorListId",e,t,n),r=AB("index",e,t,n),a=AB("elementShape",e,t,n),i=AB("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=AB("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new VP([],n,e.dtype,s),i=md(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(AB("tensor",e,t,n),s,AB("elementShape",e,t,n),AB("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=AB("elementShape",e,t,n),r=AB("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new VP([],e,t,n)}(s,r,AB(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=AB("tensorListId",e,t,n),r=AB("indices",e,t,n),a=AB("elementShape",e,t,n),i=AB("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=AB("tensorListId",e,t,n),r=AB("elementShape",e,t,n),a=AB("elementDType",e,t,n),i=AB("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);zP(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=md(e);return new VP(r,t,s)}(AB("tensor",e,t,n),AB("elementShape",e,t,n),AB("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=AB("tensorListId",e,t,n),r=n.getTensorList(s.id),a=AB("dtype",e,t,n),i=AB("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=AB("tensorListId",e,t,n),r=AB("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=AB("tensorListId",e,t,n),r=AB("elementShape",e,t,n),a=AB("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=AB("tensor",e,t,n),r=AB("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=WP(e.shape.slice(1),n),i=0===s?0:e.size/s,o=Bh((()=>{const n=[];e=cc(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=cc(ap(e,o,l),a)}return e.dispose(),n})),l=new VP([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,AB("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function HP(e,t,n){const[s,r]=AB("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,l="fusedbatchnorm"===s,u=AB("numArgs",e,t,n);if(a){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=AB("strides",e,t,n),h=OB(e,t,n),p=AB("dataFormat",e,t,n).toUpperCase(),d=AB("dilations",e,t,n);let[f,m]=AB("args",e,t,n);i&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:AB("leakyreluAlpha",e,t,n)}}function jP(e,t,n){return{boxes:AB("boxes",e,t,n),scores:AB("scores",e,t,n),maxOutputSize:AB("maxOutputSize",e,t,n),iouThreshold:AB("iouThreshold",e,t,n),scoreThreshold:AB("scoreThreshold",e,t,n),softNmsSigma:AB("softNmsSigma",e,t,n)}}class qP{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=dp(0),this.tensorMap=new Map,Wh(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return dp(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Bh((()=>{const e=md(t),s=n.length,r=e.length;Ys.assert(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];Wh(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Bh((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return fd(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function KP(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return Bh((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[Jh(AB("a",e,t,n),AB("b",e,t,n))];case"AddN":return[lf(AB("tensors",e,t,n))];case"FloorMod":case"Mod":return[bm(AB("a",e,t,n),AB("b",e,t,n))];case"Mul":return[ic(AB("a",e,t,n),AB("b",e,t,n))];case"RealDiv":case"Div":return[ep(AB("a",e,t,n),AB("b",e,t,n))];case"DivNoNan":return[qf(AB("a",e,t,n),AB("b",e,t,n))];case"FloorDiv":return[Qh(AB("a",e,t,n),AB("b",e,t,n))];case"Sub":return[ad(AB("a",e,t,n),AB("b",e,t,n))];case"Minimum":return[Wd(AB("a",e,t,n),AB("b",e,t,n))];case"Maximum":return[mm(AB("a",e,t,n),AB("b",e,t,n))];case"Pow":return[kd(AB("a",e,t,n),AB("b",e,t,n))];case"SquaredDifference":return[Hd(AB("a",e,t,n),AB("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return Bh((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[bd(AB("x",e,t,n))];case"Acos":return[af(AB("x",e,t,n))];case"Acosh":return[of(AB("x",e,t,n))];case"Asin":return[df(AB("x",e,t,n))];case"Asinh":return[ff(AB("x",e,t,n))];case"Atan":return[mf(AB("x",e,t,n))];case"Atan2":return[gf(AB("x",e,t,n),AB("y",e,t,n))];case"Atanh":return[yf(AB("x",e,t,n))];case"Ceil":return[$f(AB("x",e,t,n))];case"Complex":return[Pa(AB("real",e,t,n),AB("imag",e,t,n))];case"Cos":return[Bf(AB("x",e,t,n))];case"Cosh":return[Pf(AB("x",e,t,n))];case"Elu":return[rc(AB("x",e,t,n))];case"Erf":return[Yf(AB("x",e,t,n))];case"Exp":return[qd(AB("x",e,t,n))];case"Expm1":return[Zf(AB("x",e,t,n))];case"Floor":return[Jf(AB("x",e,t,n))];case"Log":return[Vd(AB("x",e,t,n))];case"Log1p":return[Kd(AB("x",e,t,n))];case"Imag":return[sp(AB("x",e,t,n))];case"Neg":return[Ad(AB("x",e,t,n))];case"Reciprocal":return[qm(AB("x",e,t,n))];case"Real":return[rp(AB("x",e,t,n))];case"Relu":return[lc(AB("x",e,t,n))];case"Round":return[id(AB("x",e,t,n))];case"Selu":return[Qm(AB("x",e,t,n))];case"Sigmoid":return[hc(AB("x",e,t,n))];case"Sin":return[sg(AB("x",e,t,n))];case"Sign":return[ng(AB("x",e,t,n))];case"Sinh":return[rg(AB("x",e,t,n))];case"Softplus":return[im(AB("x",e,t,n))];case"Sqrt":return[vd(AB("x",e,t,n))];case"Square":return[Id(AB("x",e,t,n))];case"Tanh":return[wf(AB("x",e,t,n))];case"Tan":return[hg(AB("x",e,t,n))];case"ClipByValue":return[Ef(AB("x",e,t,n),AB("clipValueMin",e,t,n),AB("clipValueMax",e,t,n))];case"Relu6":return[uc(AB("x",e,t,n))];case"Rsqrt":return[Jm(RB(e.inputNames[0],t,n))];case"Prod":return[Rm(AB("x",e,t,n),AB("axes",e,t,n))];case"LeakyRelu":return[ac(AB("x",e,t,n),AB("alpha",e,t,n))];case"Prelu":return[oc(AB("x",e,t,n),AB("alpha",e,t,n))];case"IsNan":return[nm(RB(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return GP(e,t,n);case"convolution":return Bh((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=AB("stride",e,t,n),r=AB("pad",e,t,n),a=AB("dataFormat",e,t,n).toUpperCase(),i=AB("dilation",e,t,n);return[_f(AB("x",e,t,n),AB("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=AB("strides",e,t,n),r=OB(e,t,n),a=AB("dataFormat",e,t,n).toUpperCase(),i=AB("dilations",e,t,n);return[Ip(AB("x",e,t,n),AB("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=HP(e,t,n);return[mp.conv2d({x:AB("x",e,t,n),filter:AB("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=HP(e,t,n);return[mp.depthwiseConv2d({x:AB("x",e,t,n),filter:AB("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=AB("outputShape",e,t,n),r=AB("strides",e,t,n),a=OB(e,t,n);return[Of(AB("x",e,t,n),AB("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=AB("strides",e,t,n),r=OB(e,t,n),a=AB("dilations",e,t,n),i=AB("dataFormat",e,t,n).toUpperCase();return[Cp(AB("input",e,t,n),AB("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("dataFormat",e,t,n).toUpperCase(),i=AB("dilations",e,t,n);return[Mf(AB("x",e,t,n),AB("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("kernelSize",e,t,n);return[bf(AB("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("kernelSize",e,t,n);return[pm(AB("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("kernelSize",e,t,n),i=AB("includeBatchInIndex",e,t,n),{result:o,indexes:l}=fm(AB("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("kernelSize",e,t,n);return[xf(AB("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("kernelSize",e,t,n);return[dm(AB("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=AB("strides",e,t,n),r=AB("pad",e,t,n),a=AB("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[Hf(AB("x",e,t,n),AB("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return Bh((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=AB("shape",e,t,n),r=AB("dtype",e,t,n);return[zp(s,AB("value",e,t,n),r)]}case"LinSpace":return[rm(AB("start",e,t,n),AB("stop",e,t,n),AB("num",e,t,n))];case"Multinomial":{const s=AB("logits",e,t,n),r=AB("numSamples",e,t,n),a=AB("seed",e,t,n);return[km(s,r,a)]}case"OneHot":{const s=AB("indices",e,t,n),r=AB("depth",e,t,n),a=AB("onValue",e,t,n),i=AB("offValue",e,t,n);return[xl(s,r,a,i)]}case"Ones":return[Md(AB("shape",e,t,n),AB("dtype",e,t,n))];case"OnesLike":return[vm(AB("x",e,t,n))];case"RandomUniform":return[jm(AB("shape",e,t,n),AB("minval",e,t,n),AB("maxval",e,t,n),AB("dtype",e,t,n))];case"Range":return[ud(AB("start",e,t,n),AB("stop",e,t,n),AB("step",e,t,n),AB("dtype",e,t,n))];case"TruncatedNormal":{const s=AB("shape",e,t,n),r=AB("mean",e,t,n),a=AB("stdDev",e,t,n),i=AB("seed",e,t,n);return[gg(s,r,a,AB("dtype",e,t,n),i)]}case"Zeros":return[op(AB("shape",e,t,n),AB("dtype",e,t,n))];case"ZerosLike":return[lp(AB("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=jP(e,t,n),u=await Lg.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=jP(e,t,n),l=AB("padToMaxOutputSize",e,t,n),u=await Lg.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=jP(e,t,n);return[await Lg.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Xo(AB("condition",e,t,n),"bool"),r=[await wg(s)];return s.dispose(),r}case"ListDiff":return tg(AB("x",e,t,n),AB("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return Bh((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=AB("x",e,t,n),r=AB("k",e,t,n),a=AB("sorted",e,t,n),i=mg(s,r,a);return[i.values,i.indices]}case"Unique":{const s=AB("x",e,t,n),r=yg(s);return[r.values,r.indices]}case"UniqueV2":{const s=AB("x",e,t,n),r=AB("axis",e,t,n),a=yg(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return Bh((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=AB("images",e,t,n),r=AB("size",e,t,n),a=AB("alignCorners",e,t,n),i=AB("halfPixelCenters",e,t,n);return[Lg.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=AB("images",e,t,n),r=AB("size",e,t,n),a=AB("alignCorners",e,t,n),i=AB("halfPixelCenters",e,t,n);return[Lg.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=AB("image",e,t,n),r=AB("boxes",e,t,n),a=AB("boxInd",e,t,n),i=AB("cropSize",e,t,n),o=AB("method",e,t,n),l=AB("extrapolationValue",e,t,n);return[Lg.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return Bh((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=AB("default",e,t,n);return[RB(e.name,t,n)||s];case"Placeholder":return[RB(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[MB(AB("x",e,t,n))];case"IdentityN":return AB("x",e,t,n).map((e=>MB(e)));case"Shape":return[Dp(AB("x",e,t,n).shape,"int32")];case"ShapeN":return AB("x",e,t,n).map((e=>Dp(e.shape)));case"Size":return[dp(AB("x",e,t,n).size,"int32")];case"Rank":return[dp(AB("x",e,t,n).rank,"int32")];case"NoOp":return[dp(1)];case"Print":const r=AB("x",e,t,n),a=AB("data",e,t,n),i=AB("message",e,t,n),o=AB("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return Bh((()=>((e,t,n)=>{switch(e.op){case"Equal":return[jf(AB("a",e,t,n),AB("b",e,t,n))];case"NotEqual":return[Od(AB("a",e,t,n),AB("b",e,t,n))];case"Greater":return[rd(AB("a",e,t,n),AB("b",e,t,n))];case"GreaterEqual":return[pd(AB("a",e,t,n),AB("b",e,t,n))];case"Less":return[sm(AB("a",e,t,n),AB("b",e,t,n))];case"LessEqual":return[sd(AB("a",e,t,n),AB("b",e,t,n))];case"LogicalAnd":return[dd(AB("a",e,t,n),AB("b",e,t,n))];case"LogicalNot":return[um(AB("a",e,t,n))];case"LogicalOr":return[cm(AB("a",e,t,n),AB("b",e,t,n))];case"Select":case"SelectV2":return[ld(AB("condition",e,t,n),AB("a",e,t,n),AB("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return Bh((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[bl(AB("a",e,t,n),AB("b",e,t,n),AB("transposeA",e,t,n),AB("transposeB",e,t,n))];case"Einsum":return[Xf(AB("equation",e,t,n),...AB("tensors",e,t,n))];case"Transpose":return[kl(AB("x",e,t,n),AB("perm",e,t,n))];case"_FusedMatMul":const[s,r]=AB("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=AB("numArgs",e,t,n),l=AB("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=AB("args",e,t,n);return[mp.matMul({a:AB("a",e,t,n),b:AB("b",e,t,n),transposeA:AB("transposeA",e,t,n),transposeB:AB("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return Bh((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[If(AB("x",e,t,n),AB("mean",e,t,n),AB("variance",e,t,n),AB("offset",e,t,n),AB("scale",e,t,n),AB("epsilon",e,t,n))];case"LRN":return[am(AB("x",e,t,n),AB("radius",e,t,n),AB("bias",e,t,n),AB("alpha",e,t,n),AB("beta",e,t,n))];case"Softmax":return[ug(AB("x",e,t,n))];case"LogSoftmax":return[lm(AB("x",e,t,n))];case"SparseToDense":return[$g(AB("sparseIndices",e,t,n),AB("outputShape",e,t,n),AB("sparseValues",e,t,n),AB("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return Bh((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[xd(AB("x",e,t,n),s,r)]}case"Mean":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[_d(AB("x",e,t,n),s,r)]}case"Min":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[wd(AB("x",e,t,n),s,r)]}case"Sum":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[dc(AB("x",e,t,n),s,r)]}case"All":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[uf(AB("x",e,t,n),s,r)]}case"Any":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[cf(AB("x",e,t,n),s,r)]}case"ArgMax":{const s=AB("axis",e,t,n);return[hf(AB("x",e,t,n),s)]}case"ArgMin":{const s=AB("axis",e,t,n);return[pf(AB("x",e,t,n),s)]}case"Prod":{const s=AB("axis",e,t,n),r=AB("keepDims",e,t,n);return[Rm(AB("x",e,t,n),s,r)]}case"Cumsum":{const s=AB("axis",e,t,n),r=AB("exclusive",e,t,n),a=AB("reverse",e,t,n);return[Wf(AB("x",e,t,n),s,r,a)]}case"Bincount":const s=AB("x",e,t,n),r=AB("weights",e,t,n),a=AB("size",e,t,n);return[nd(s,r,a)];case"DenseBincount":{const s=AB("x",e,t,n),r=AB("weights",e,t,n),a=AB("size",e,t,n),i=AB("binaryOutput",e,t,n);return[Uf(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return Bh((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=AB("n",e,t,n),r=AB("axis",e,t,n);let a=AB("tensors",e,t,n);return a=a.slice(0,s),[np(a,r)]}case"Gather":{const s=AB("x",e,t,n),r=AB("indices",e,t,n);return[Qf(s,Xo(r,"int32"),0)]}case"GatherV2":{const s=AB("axis",e,t,n),r=AB("batchDims",e,t,n),a=AB("x",e,t,n),i=AB("indices",e,t,n);return[Qf(a,Xo(i,"int32"),s,r)]}case"Reverse":{const s=AB("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=AB("x",e,t,n);return[pp(a,r)]}case"ReverseV2":{const s=AB("axis",e,t,n),r=AB("x",e,t,n);return[pp(r,s)]}case"Slice":{const s=AB("begin",e,t,n),r=AB("size",e,t,n);return[ap(AB("x",e,t,n),s,r)]}case"StridedSlice":{const s=AB("begin",e,t,n),r=AB("end",e,t,n),a=AB("strides",e,t,n),i=AB("beginMask",e,t,n),o=AB("endMask",e,t,n),l=AB("ellipsisMask",e,t,n),u=AB("newAxisMask",e,t,n),c=AB("shrinkAxisMask",e,t,n),h=AB("x",e,t,n);return[cg(h,s,r,a,i,o,l,u,c)]}case"Pack":return Bh((()=>{const s=AB("axis",e,t,n),r=AB("tensors",e,t,n),a=r[0].shape,i=Td(r[0]).shape,o=r.map((e=>{const t=Ys.arraysEqual(e.shape,a);if(!t&&!Ys.arraysEqual(Td(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:cc(e,a)}));return[fd(o,s)]}));case"Unpack":{const s=AB("axis",e,t,n),r=AB("tensor",e,t,n);return md(r,s)}case"Tile":{const s=AB("reps",e,t,n);return[Gp(AB("x",e,t,n),s)]}case"Split":case"SplitV":{const s=AB("axis",e,t,n),r=AB("numOrSizeSplits",e,t,n),a=AB("x",e,t,n);return ip(a,r,s)}case"ScatterNd":{const s=AB("indices",e,t,n),r=AB("values",e,t,n),a=AB("shape",e,t,n);return[Tg(s,r,a)]}case"GatherNd":{const s=AB("x",e,t,n),r=AB("indices",e,t,n);return[Ag(s,r)]}case"SparseToDense":{const s=AB("sparseIndices",e,t,n),r=AB("outputShape",e,t,n),a=AB("sparseValues",e,t,n),i=AB("defaultValue",e,t,n);return[$g(s,a,r,a.dtype===i.dtype?i:Xo(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return Bh((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:r,emptyRowIndicator:a,reverseIndexMap:i}=Pg.sparseFillEmptyRows(AB("indices",e,t,n),AB("values",e,t,n),AB("denseShape",e,t,n),AB("defaultValue",e,t,n));return[s,r,a,i]}case"SparseReshape":{const{outputIndices:s,outputShape:r}=Pg.sparseReshape(AB("inputIndices",e,t,n),AB("inputShape",e,t,n),AB("newShape",e,t,n));return[s,r]}case"SparseSegmentMean":return[Pg.sparseSegmentMean(AB("data",e,t,n),AB("indices",e,t,n),AB("segmentIds",e,t,n))];case"SparseSegmentSum":return[Pg.sparseSegmentSum(AB("data",e,t,n),AB("indices",e,t,n),AB("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return Bh((()=>((e,t,n)=>{switch(e.op){case"FFT":return[up(AB("x",e,t,n))];case"IFFT":return[hp(AB("x",e,t,n))];case"RFFT":return[cp(AB("x",e,t,n))];case"IRFFT":return[fp(AB("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return Bh((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:r}=Wg.stringNGrams(AB("data",e,t,n),AB("dataSplits",e,t,n),AB("separator",e,t,n),AB("nGramWidths",e,t,n),AB("leftPad",e,t,n),AB("rightPad",e,t,n),AB("padWidth",e,t,n),AB("preserveShortSequences",e,t,n));return[s,r]}case"StringSplit":{const{indices:s,values:r,shape:a}=Wg.stringSplit(AB("input",e,t,n),AB("delimiter",e,t,n),AB("skipEmpty",e,t,n));return[s,r,a]}case"StringToHashBucketFast":return[Wg.stringToHashBucketFast(AB("input",e,t,n),AB("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return Bh((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Xo(AB("x",e,t,n),AB("dtype",e,t,n))];case"ExpandDims":{const s=AB("axis",e,t,n);return[$d(AB("x",e,t,n),s)]}case"Squeeze":{const s=AB("axis",e,t,n);return[Td(AB("x",e,t,n),s)]}case"Reshape":return[cc(AB("x",e,t,n),AB("shape",e,t,n))];case"MirrorPad":return[ym(AB("x",e,t,n),AB("padding",e,t,n),AB("mode",e,t,n))];case"PadV2":case"Pad":return[Sm(AB("x",e,t,n),AB("padding",e,t,n),AB("constantValue",e,t,n))];case"SpaceToBatchND":{const s=AB("blockShape",e,t,n),r=AB("paddings",e,t,n);return[Em(AB("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=AB("blockShape",e,t,n),r=AB("crops",e,t,n);return[vf(AB("x",e,t,n),s,r)]}case"DepthToSpace":{const s=AB("blockSize",e,t,n),r=AB("dataFormat",e,t,n).toUpperCase();return[Vf(AB("x",e,t,n),s,r)]}case"BroadcastTo":return[od(AB("x",e,t,n),AB("shape",e,t,n))];case"BroadcastArgs":return[Cf(AB("s0",e,t,n),AB("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=AB("keyDType",e,t,n),a=AB("valueDType",e,t,n),i=new qP(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=AB("tableHandle",e,t,n,s),a=AB("keys",e,t,n),i=AB("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=AB("tableHandle",e,t,n,s),a=AB("keys",e,t,n),i=AB("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=AB("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=EB(e.op);if(r&&r.customExecutor)return r.customExecutor(new LP(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Ys.isPromise(r)?r.then((e=>[].concat(e))):[].concat(r)}class XP{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function YP(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>_B(e)[0]));let c=[];null!=s&&(c=s.map((e=>_B(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(eW(e)||tW(e)||nW(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const ZP=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],JP=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],QP=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function eW(e){return ZP.indexOf(e.op)>=0}function tW(e){return JP.indexOf(e.op)>=0}function nW(e){return QP.indexOf(e.op)>=0}class sW{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new sW(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=YP(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>_B(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[_B(e)[0]])),r=t.map((e=>_B(e)[0]));let a=r.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return Bh((()=>{const n=new XP(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=_B(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=KP(t,s,n,this._resourceManager);if(Ys.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>RB(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=function(e,t,n){return t[DB(e,n.currentContextId)]}(e.name,n,s);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,r]=FB(t.name,s);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][r]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=le().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new XP(this.weightMap,s,r,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const i=t.map((e=>RB(e,this.tensorsMap,a))),o=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[_B(e)[0]])),i=n.map((e=>_B(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=YP(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=_B(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!eW(e)&&!RB(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&AB("isConstant",e.node,s,n)&&([c]=FB(e.node.name,n)),null==s[e.node.name]){const h=KP(e.node,s,n,this._resourceManager);c||([c]=FB(e.node.name,n));const p=n.currentContext;Ys.isPromise(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=FB(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!RB(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!RB(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=_B(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));Ys.assert(t,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&Ys.assert(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=_B(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=_B(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class rW{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class aW{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new rW}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Qo.browserHTTPRequest(e,this.loadOptions);else{const t=Qo.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(Qo.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=Qo.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new sW(vP.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=vP.Instance.transformGraph(e.modelInitializer);this.initializer=new sW(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Qo.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof ea||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function iW(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new aW(e,t);return await n.load(),n}
/** @license See the LICENSE file. */function oW(e,t,n,s){return new(n||(n=Promise))((function(r,a){function i(e){try{l(s.next(e))}catch(e){a(e)}}function o(e){try{l(s.throw(e))}catch(e){a(e)}}function l(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(i,o)}l((s=s.apply(e,t||[])).next())}))}function lW(e,t){var n,s,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a}var uW={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},cW=224,hW={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},pW={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};var dW=function(){function e(e,t,n,s,r){void 0===s&&(s=-1),void 0===r&&(r=1),this.version=e,this.alpha=t,this.modelUrl=n,this.inputMin=s,this.inputMax=r,this.normalizationConstant=(r-s)/255}return e.prototype.load=function(){return oW(this,void 0,void 0,(function(){var e,t,n,s,r=this;return lW(this,(function(a){switch(a.label){case 0:return this.modelUrl?(e=this,[4,iW(this.modelUrl)]):[3,2];case 1:return e.model=a.sent(),[3,4];case 2:return t=pW[this.version][this.alpha].url,n=this,[4,iW(t,{fromTFHub:!0})];case 3:n.model=a.sent(),a.label=4;case 4:return[4,(s=Bh((function(){return r.model.predict(op([1,cW,cW,3]))}))).data()];case 5:return a.sent(),s.dispose(),[2]}}))}))},e.prototype.infer=function(e,t){var n=this;return void 0===t&&(t=!1),Bh((function(){e instanceof ea||(e=Cl.fromPixels(e));var s=Jh(ic(Xo(e,"float32"),n.normalizationConstant),n.inputMin),r=s;e.shape[0]===cW&&e.shape[1]===cW||(r=Lg.resizeBilinear(s,[cW,cW],!0));var a,i=cc(r,[-1,cW,cW,3]);if(t){var o=hW[n.version],l=n.model.execute(i,o);a=Td(l,[1,2])}else{var u=n.model.predict(i);a=ap(u,[0,1],[-1,1e3])}return a}))},e.prototype.classify=function(e,t){return void 0===t&&(t=3),oW(this,void 0,void 0,(function(){var n,s;return lW(this,(function(r){switch(r.label){case 0:return[4,fW(n=this.infer(e),t)];case 1:return s=r.sent(),n.dispose(),[2,s]}}))}))},e}();function fW(e,t){return oW(this,void 0,void 0,(function(){var n,s,r,a,i,o,l;return lW(this,(function(u){switch(u.label){case 0:return[4,(n=ug(e)).data()];case 1:for(s=u.sent(),n.dispose(),r=[],l=0;l<s.length;l++)r.push({value:s[l],index:l});for(r.sort((function(e,t){return t.value-e.value})),a=new Float32Array(t),i=new Int32Array(t),l=0;l<t;l++)a[l]=r[l].value,i[l]=r[l].index;for(o=[],l=0;l<i.length;l++)o.push({className:uW[i[l]],probability:a[l]});return[2,o]}}))}))}const mW=(...e)=>console.info("[AI-Blur][SW]",...e),gW=["snake","spider","frog","gun","blood"].map((e=>e.toLowerCase()));const yW=new class{constructor(){this.model=null,this.load()}async load(){mW("loading MobileNet...");const e=performance.now();this.model=await function(e){return void 0===e&&(e={version:1,alpha:1}),oW(this,void 0,void 0,(function(){var t,n,s,r,a,o,l;return lW(this,(function(u){switch(u.label){case 0:if(null==i)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");if(s=e.version.toFixed(2),r=e.alpha?e.alpha.toFixed(2):"",a=-1,o=1,null==e.modelUrl){if(!(s in pW))throw new Error("Invalid version of MobileNet. Valid versions are: "+Object.keys(pW));if(!(r in pW[s]))throw new Error("MobileNet constructed with invalid alpha "+e.alpha+". Valid multipliers for this version are: "+Object.keys(pW[s])+".");t=pW[s][r].inputRange,a=t[0],o=t[1]}return null!=e.inputRange&&(n=e.inputRange,a=n[0],o=n[1]),[4,(l=new dW(s,r,e.modelUrl,a,o)).load()];case 1:return u.sent(),[2,l]}}))}))}({version:2,alpha:1}),await this.model.classify(op([224,224,3])),mW(`model ready in ${(performance.now()-e).toFixed(0)} ms`)}async classify(e,t,n){if(!this.model)return void setTimeout((()=>this.classify(e,t,n)),3e3);mW("classify",t);const s=performance.now(),r=await this.model.classify(e,3),a=(performance.now()-s).toFixed(1),i=r.some((e=>gW.some((t=>e.className.toLowerCase().includes(t)&&e.probability>=.01))));mW(`preds (${a} ms)`,r.map((e=>`${e.className}:${e.probability.toFixed(2)}`))),chrome.tabs.sendMessage(n,{action:"BLUR_IF_BLOCKLIST",url:t,shouldBlur:i})}};chrome.runtime.onMessage.addListener(((e,t)=>{if("CLASSIFY_IMAGE"!==e.action||!t.tab)return;const{rawImageData:n,width:s,height:r,url:a}=e,i=new ImageData(Uint8ClampedArray.from(n),s,r);yW.classify(i,a,t.tab.id)}))})();
//# sourceMappingURL=service_worker.js.map
