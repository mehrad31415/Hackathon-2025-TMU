(()=>{var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var r={},a={},s=e.parcelRequired024;null==s&&((s=function(e){if(e in r)return r[e].exports;if(e in a){var t=a[e];delete a[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}).register=function(e,t){a[e]=t},e.parcelRequired024=s),s.register("foUwZ",(function(e,t){})),s.register("hZ5cD",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new r(e),s=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.alea=s}(0,e,"function"==typeof define&&define)})),s.register("i0FBE",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor128=s}(0,e,"function"==typeof define&&define)})),s.register("6vxF6",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorwow=s}(0,e,"function"==typeof define&&define)})),s.register("gjQE6",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.x&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorshift7=s}(0,e,"function"==typeof define&&define)})),s.register("i6RlM",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),a=0,s=-32;s<l;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.X&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor4096=s}(0,e,"function"==typeof define&&define)})),s.register("8D147",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.tychei=s}(0,e,"function"==typeof define&&define)})),s.register("6hTlM",(function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new r(e),s=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.alea=s}(0,e,"function"==typeof define&&define)})),s.register("eTxuL",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor128=s}(0,e,"function"==typeof define&&define)})),s.register("eRcXS",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorwow=s}(0,e,"function"==typeof define&&define)})),s.register("aqXnw",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.x&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorshift7=s}(0,e,"function"==typeof define&&define)})),s.register("bUIhf",(function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),a=0,s=-32;s<l;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.X&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor4096=s}(0,e,"function"==typeof define&&define)})),s.register("13wuC",(function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.tychei=s}(0,e,"function"==typeof define&&define)}));class o{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class i{refCount(e){return l("refCount")}incRef(e){return l("incRef")}timerAvailable(){return!0}time(e){return l("time")}read(e){return l("read")}readSync(e){return l("readSync")}readToGPU(e,t){return l("readToGPU")}numDataIds(){return l("numDataIds")}disposeData(e,t){return l("disposeData")}write(e,t,n){return l("write")}move(e,t,n,r,a){return l("move")}memory(){return l("memory")}floatPrecision(){return l("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return l("dispose")}}function l(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var u={};function c(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,f(e,t,n)}function p(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,f(e,n,r),f(t,n,r)}function h(e,t,n){return Math.max(e,Math.min(t,n))}function d(e){return e%2==0?e:e+1}function f(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function m(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function g(e,t){const n=Math.random();return t*n+(1-n)*e}function y(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function b(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function x(e,t,n=""){b(S(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function w(e){b(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function k(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||B(e)&&!n)for(let r=0;r<e.length;++r)k(e[r],t,n);else t.push(e);return t}function v(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function N(e){return 0===e.length}function S(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function I(e){return e%1==0}function T(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function E(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function $(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return c(t),t}function C(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function A(e,t=(e=>0),n){return new Promise(((r,a)=>{let s=0;const o=()=>{if(e())return void r();s++;const i=t(s);null!=n&&s>=n?a():setTimeout(o,i)};o()}))}function R(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function _(e,t){const n=t.length;return b((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),b(e.every((e=>I(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function D(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:_(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function F(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function M(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function L(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function z(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function B(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function P(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function V(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function W(e){return"string"==typeof e||e instanceof String}function U(e){return"boolean"==typeof e}function G(e){return"number"==typeof e}function H(e){return Array.isArray(e)?H(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":G(e)?"float32":W(e)?"string":U(e)?"bool":"float32"}function j(e){return!!(e&&e.constructor&&e.call&&e.apply)}function q(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function K(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function X(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<s;t++)a[t]=X(e+t*i,o,n,r)}return a}function Y(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return X(0,e,t,n)}function Z(e,t){const n=J(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function J(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Q(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Y(e,new Float32Array(n));if("int32"===t)return Y(e,new Int32Array(n));if("bool"===t)return Y(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function ee(e){e.forEach((t=>{b(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function te(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function ne(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function re(e){return e&&e.then&&"function"==typeof e.then}t(u,"shuffle",(()=>c)),t(u,"swap",(()=>f)),t(u,"shuffleCombo",(()=>p)),t(u,"clamp",(()=>h)),t(u,"nearestLargerEven",(()=>d)),t(u,"sum",(()=>m)),t(u,"randUniform",(()=>g)),t(u,"distSquared",(()=>y)),t(u,"assert",(()=>b)),t(u,"assertShapesMatch",(()=>x)),t(u,"arraysEqual",(()=>S)),t(u,"assertNonNull",(()=>w)),t(u,"flatten",(()=>k)),t(u,"isTypedArray",(()=>B)),t(u,"sizeFromShape",(()=>v)),t(u,"isScalarShape",(()=>N)),t(u,"isInt",(()=>I)),t(u,"tanh",(()=>T)),t(u,"sizeToSquarishShape",(()=>E)),t(u,"createShuffledIndices",(()=>$)),t(u,"rightPad",(()=>C)),t(u,"repeatedTry",(()=>A)),t(u,"inferFromImplicitShape",(()=>R)),t(u,"parseAxisParam",(()=>_)),t(u,"squeezeShape",(()=>D)),t(u,"getTypedArrayFromDType",(()=>F)),t(u,"getArrayFromDType",(()=>O)),t(u,"checkConversionForErrors",(()=>M)),t(u,"isValidDtype",(()=>L)),t(u,"hasEncodingLoss",(()=>z)),t(u,"bytesPerElement",(()=>P)),t(u,"bytesFromStringArray",(()=>V)),t(u,"isString",(()=>W)),t(u,"isBoolean",(()=>U)),t(u,"isNumber",(()=>G)),t(u,"inferDtype",(()=>H)),t(u,"isFunction",(()=>j)),t(u,"nearestDivisor",(()=>q)),t(u,"computeStrides",(()=>K)),t(u,"toNestedArray",(()=>Y)),t(u,"makeOnesTypedArray",(()=>Z)),t(u,"makeZerosTypedArray",(()=>J)),t(u,"makeZerosNestedTypedArray",(()=>Q)),t(u,"assertNonNegativeIntegerDimensions",(()=>ee)),t(u,"locToIndex",(()=>te)),t(u,"indexToLoc",(()=>ne)),t(u,"isPromise",(()=>re));const ae="tfjsflags";class se{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=oe,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(ie().getBool("IS_TEST")||ie().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];ie().getBool("IS_TEST")||ie().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(re(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(ae in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function oe(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function ie(){return le}let le=null;var ue,ce,pe={},he=pe={};function de(){throw new Error("setTimeout has not been defined")}function fe(){throw new Error("clearTimeout has not been defined")}function me(e){if(ue===setTimeout)return setTimeout(e,0);if((ue===de||!ue)&&setTimeout)return ue=setTimeout,setTimeout(e,0);try{return ue(e,0)}catch(t){try{return ue.call(null,e,0)}catch(t){return ue.call(this,e,0)}}}!function(){try{ue="function"==typeof setTimeout?setTimeout:de}catch(e){ue=de}try{ce="function"==typeof clearTimeout?clearTimeout:fe}catch(e){ce=fe}}();var ge,ye=[],be=!1,xe=-1;function we(){be&&ge&&(be=!1,ge.length?ye=ge.concat(ye):xe=-1,ye.length&&ke())}function ke(){if(!be){var e=me(we);be=!0;for(var t=ye.length;t;){for(ge=ye,ye=[];++xe<t;)ge&&ge[xe].run();xe=-1,t=ye.length}ge=null,be=!1,function(e){if(ce===clearTimeout)return clearTimeout(e);if((ce===fe||!ce)&&clearTimeout)return ce=clearTimeout,clearTimeout(e);try{ce(e)}catch(t){try{return ce.call(null,e)}catch(t){return ce.call(this,e)}}}(e)}}function ve(e,t){this.fun=e,this.array=t}function Ne(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Se;function Ie(){if(null==Se){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==pe)t=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Se=t}return Se}function Te(e,t){const n=function(){const e=Ie();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}he.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];ye.push(new ve(e,t)),1!==ye.length||be||me(ke)},ve.prototype.run=function(){this.fun.apply(null,this.array)},he.title="browser",he.browser=!0,he.env={},he.argv=[],he.version="",he.versions={},he.on=Ne,he.addListener=Ne,he.once=Ne,he.off=Ne,he.removeListener=Ne,he.removeAllListeners=Ne,he.emit=Ne,he.prependListener=Ne,he.prependOnceListener=Ne,he.listeners=function(e){return[]},he.binding=function(e){throw new Error("process.binding is not supported")},he.cwd=function(){return"/"},he.chdir=function(e){throw new Error("process.chdir is not supported")},he.umask=function(){return 0};const Ee="Abs",$e="Acos",Ce="Acosh",Ae="Add",Re="AddN",_e="All",De="Any",Fe="ArgMax",Oe="ArgMin",Me="Asin",Le="Asinh",ze="Atan",Be="Atanh",Pe="Atan2",Ve="AvgPool",We="AvgPoolGrad",Ue="AvgPool3D",Ge="AvgPool3DGrad",He="BatchMatMul",je="BatchToSpaceND",qe="Bincount",Ke="BroadcastArgs",Xe="Cast",Ye="Ceil",Ze="ClipByValue",Je="Complex",Qe="ComplexAbs",et="Concat",tt="Conv2D",nt="Conv2DBackpropFilter",rt="Conv2DBackpropInput",at="Conv3D",st="Conv3DBackpropFilterV2",ot="Conv3DBackpropInputV2",it="Cos",lt="Cosh",ut="Cumsum",ct="CropAndResize",pt="DenseBincount",ht="DepthToSpace",dt="DepthwiseConv2dNative",ft="DepthwiseConv2dNativeBackpropFilter",mt="DepthwiseConv2dNativeBackpropInput",gt="Diag",yt="Dilation2D",bt="Dilation2DBackpropInput",xt="Dilation2DBackpropFilter",wt="RealDiv",kt="Einsum",vt="Elu",Nt="EluGrad",St="Erf",It="Equal",Tt="Exp",Et="ExpandDims",$t="Expm1",Ct="FFT",At="Fill",Rt="FlipLeftRight",_t="Floor",Dt="FloorDiv",Ft="FusedBatchNorm",Ot="GatherV2",Mt="GatherNd",Lt="Greater",zt="GreaterEqual",Bt="Identity",Pt="IFFT",Vt="Imag",Wt="IsFinite",Ut="IsInf",Gt="IsNan",Ht="LeakyRelu",jt="Less",qt="LessEqual",Kt="LinSpace",Xt="Log",Yt="Log1p",Zt="LogicalAnd",Jt="LogicalNot",Qt="LogicalOr",en="LRN",tn="LRNGrad",nn="Max",rn="Maximum",an="MaxPool",sn="MaxPoolGrad",on="MaxPool3D",ln="MaxPool3DGrad",un="MaxPoolWithArgmax",cn="Mean",pn="Min",hn="Minimum",dn="MirrorPad",fn="Mod",mn="Multinomial",gn="Multiply",yn="Neg",bn="NotEqual",xn="NonMaxSuppressionV3",wn="NonMaxSuppressionV4",kn="NonMaxSuppressionV5",vn="OnesLike",Nn="OneHot",Sn="Pack",In="PadV2",Tn="Pow",En="Prelu",$n="Prod",Cn="Range",An="Real",Rn="Reciprocal",_n="Relu",Dn="Reshape",Fn="ResizeNearestNeighbor",On="ResizeNearestNeighborGrad",Mn="ResizeBilinear",Ln="ResizeBilinearGrad",zn="Relu6",Bn="Reverse",Pn="Round",Vn="Rsqrt",Wn="ScatterNd",Un="Select",Gn="Selu",Hn="Slice",jn="Sin",qn="Sinh",Kn="Sign",Xn="Sigmoid",Yn="Softplus",Zn="Sqrt",Jn="Sum",Qn="SpaceToBatchND",er="SplitV",tr="Softmax",nr="SparseFillEmptyRows",rr="SparseReshape",ar="SparseSegmentMean",sr="SparseSegmentSum",or="SparseToDense",ir="SquaredDifference",lr="Square",ur="StridedSlice",cr="StringNGrams",pr="StringSplit",hr="StringToHashBucketFast",dr="Sub",fr="Tan",mr="Tanh",gr="Tile",yr="TopK",br="Transform",xr="Transpose",wr="Unique",kr="Unpack",vr="UnsortedSegmentSum",Nr="ZerosLike",Sr="Step",Ir="FromPixels",Tr="RotateWithOffset",Er="_FusedMatMul",$r="FusedConv2D",Cr="FusedDepthwiseConv2D";var Ar={};function Rr(...e){ie().getBool("IS_TEST")||ie().getBool("PROD")||console.warn(...e)}function _r(...e){ie().getBool("IS_TEST")||ie().getBool("PROD")||console.log(...e)}t(Ar,"warn",(()=>Rr)),t(Ar,"log",(()=>_r));const Dr=Te("kernelRegistry",(()=>new Map)),Fr=Te("gradRegistry",(()=>new Map));function Or(e,t){const n=Pr(e,t);return Dr.get(n)}function Mr(e){return Fr.get(e)}function Lr(e){const t=Dr.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function zr(e){const{kernelName:t,backendName:n}=e,r=Pr(t,n);Dr.has(r)&&Rr(`The kernel '${t}' for backend '${n}' is already registered`),Dr.set(r,e)}function Br(e){const{kernelName:t}=e;Fr.has(t)&&ie().getBool("DEBUG")&&Rr(`Overriding the gradient for '${t}'`),Fr.set(t,e)}function Pr(e,t){return`${t}_${e}`}var Vr={};t(Vr,"createScalarValue",(()=>Ea)),t(Vr,"encodeString",(()=>Ra)),t(Vr,"toTypedArray",(()=>$a)),t(Vr,"now",(()=>Ca)),t(Vr,"fetch",(()=>Aa)),t(Vr,"decodeString",(()=>_a));var Wr={};t(Wr,"hexToLong",(()=>ma)),t(Wr,"fingerPrint64",(()=>Ta));var Ur;Ur=Hr;var Gr=null;try{Gr=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Hr(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function jr(e){return!0===(e&&e.__isLong__)}Hr.prototype.__isLong__,Object.defineProperty(Hr.prototype,"__isLong__",{value:!0}),Hr.isLong=jr;var qr={},Kr={};function Xr(e,t){var n,r,a;return t?(a=0<=(e>>>=0)&&e<256)&&(r=Kr[e])?r:(n=Zr(e,(0|e)<0?-1:0,!0),a&&(Kr[e]=n),n):(a=-128<=(e|=0)&&e<128)&&(r=qr[e])?r:(n=Zr(e,e<0?-1:0,!1),a&&(qr[e]=n),n)}function Yr(e,t){if(isNaN(e))return t?oa:sa;if(t){if(e<0)return oa;if(e>=na)return pa}else{if(e<=-ra)return ha;if(e+1>=ra)return ca}return e<0?Yr(-e,t).neg():Zr(e%ta|0,e/ta|0,t)}function Zr(e,t,n){return new Hr(e,t,n)}Hr.fromInt=Xr,Hr.fromNumber=Yr,Hr.fromBits=Zr;var Jr=Math.pow;function Qr(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return sa;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return Qr(e.substring(1),t,n).neg();for(var a=Yr(Jr(n,8)),s=sa,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),l=parseInt(e.substring(o,o+i),n);if(i<8){var u=Yr(Jr(n,i));s=s.mul(u).add(Yr(l))}else s=(s=s.mul(a)).add(Yr(l))}return s.unsigned=t,s}function ea(e,t){return"number"==typeof e?Yr(e,t):"string"==typeof e?Qr(e,t):Zr(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Hr.fromString=Qr,Hr.fromValue=ea;var ta=4294967296,na=ta*ta,ra=na/2,aa=Xr(16777216),sa=Xr(0);Hr.ZERO=sa;var oa=Xr(0,!0);Hr.UZERO=oa;var ia=Xr(1);Hr.ONE=ia;var la=Xr(1,!0);Hr.UONE=la;var ua=Xr(-1);Hr.NEG_ONE=ua;var ca=Zr(-1,2147483647,!1);Hr.MAX_VALUE=ca;var pa=Zr(-1,-1,!0);Hr.MAX_UNSIGNED_VALUE=pa;var ha=Zr(0,-2147483648,!1);Hr.MIN_VALUE=ha;var da=Hr.prototype;da.toInt=function(){return this.unsigned?this.low>>>0:this.low},da.toNumber=function(){return this.unsigned?(this.high>>>0)*ta+(this.low>>>0):this.high*ta+(this.low>>>0)},da.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(ha)){var t=Yr(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=Yr(Jr(e,6),this.unsigned),s=this,o="";;){var i=s.div(a),l=(s.sub(i.mul(a)).toInt()>>>0).toString(e);if((s=i).isZero())return l+o;for(;l.length<6;)l="0"+l;o=""+l+o}},da.getHighBits=function(){return this.high},da.getHighBitsUnsigned=function(){return this.high>>>0},da.getLowBits=function(){return this.low},da.getLowBitsUnsigned=function(){return this.low>>>0},da.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ha)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},da.isZero=function(){return 0===this.high&&0===this.low},da.eqz=da.isZero,da.isNegative=function(){return!this.unsigned&&this.high<0},da.isPositive=function(){return this.unsigned||this.high>=0},da.isOdd=function(){return 1==(1&this.low)},da.isEven=function(){return 0==(1&this.low)},da.equals=function(e){return jr(e)||(e=ea(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},da.eq=da.equals,da.notEquals=function(e){return!this.eq(e)},da.neq=da.notEquals,da.ne=da.notEquals,da.lessThan=function(e){return this.comp(e)<0},da.lt=da.lessThan,da.lessThanOrEqual=function(e){return this.comp(e)<=0},da.lte=da.lessThanOrEqual,da.le=da.lessThanOrEqual,da.greaterThan=function(e){return this.comp(e)>0},da.gt=da.greaterThan,da.greaterThanOrEqual=function(e){return this.comp(e)>=0},da.gte=da.greaterThanOrEqual,da.ge=da.greaterThanOrEqual,da.compare=function(e){if(jr(e)||(e=ea(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},da.comp=da.compare,da.negate=function(){return!this.unsigned&&this.eq(ha)?ha:this.not().add(ia)},da.neg=da.negate,da.add=function(e){jr(e)||(e=ea(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=0,u=0,c=0,p=0;return c+=(p+=a+(65535&e.low))>>>16,u+=(c+=r+i)>>>16,l+=(u+=n+o)>>>16,l+=t+s,Zr((c&=65535)<<16|(p&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},da.subtract=function(e){return jr(e)||(e=ea(e)),this.add(e.neg())},da.sub=da.subtract,da.multiply=function(e){if(this.isZero())return sa;if(jr(e)||(e=ea(e)),Gr)return Zr(Gr.mul(this.low,this.high,e.low,e.high),Gr.get_high(),this.unsigned);if(e.isZero())return sa;if(this.eq(ha))return e.isOdd()?ha:sa;if(e.eq(ha))return this.isOdd()?ha:sa;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(aa)&&e.lt(aa))return Yr(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,l=65535&e.low,u=0,c=0,p=0,h=0;return p+=(h+=a*l)>>>16,c+=(p+=r*l)>>>16,p&=65535,c+=(p+=a*i)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=r*i)>>>16,c&=65535,u+=(c+=a*o)>>>16,u+=t*l+n*i+r*o+a*s,Zr((p&=65535)<<16|(h&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},da.mul=da.multiply,da.divide=function(e){if(jr(e)||(e=ea(e)),e.isZero())throw Error("division by zero");var t,n,r;if(Gr)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Zr((this.unsigned?Gr.div_u:Gr.div_s)(this.low,this.high,e.low,e.high),Gr.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?oa:sa;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return oa;if(e.gt(this.shru(1)))return la;r=oa}else{if(this.eq(ha))return e.eq(ia)||e.eq(ua)?ha:e.eq(ha)?ia:(t=this.shr(1).div(e).shl(1)).eq(sa)?e.isNegative()?ia:ua:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(ha))return this.unsigned?oa:sa;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=sa}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(t)/Math.LN2),s=a<=48?1:Jr(2,a-48),o=Yr(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=Yr(t-=s,this.unsigned)).mul(e);o.isZero()&&(o=ia),r=r.add(o),n=n.sub(i)}return r},da.div=da.divide,da.modulo=function(e){return jr(e)||(e=ea(e)),Gr?Zr((this.unsigned?Gr.rem_u:Gr.rem_s)(this.low,this.high,e.low,e.high),Gr.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},da.mod=da.modulo,da.rem=da.modulo,da.not=function(){return Zr(~this.low,~this.high,this.unsigned)},da.and=function(e){return jr(e)||(e=ea(e)),Zr(this.low&e.low,this.high&e.high,this.unsigned)},da.or=function(e){return jr(e)||(e=ea(e)),Zr(this.low|e.low,this.high|e.high,this.unsigned)},da.xor=function(e){return jr(e)||(e=ea(e)),Zr(this.low^e.low,this.high^e.high,this.unsigned)},da.shiftLeft=function(e){return jr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Zr(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Zr(0,this.low<<e-32,this.unsigned)},da.shl=da.shiftLeft,da.shiftRight=function(e){return jr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Zr(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Zr(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},da.shr=da.shiftRight,da.shiftRightUnsigned=function(e){if(jr(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?Zr(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Zr(32===e?t:t>>>e-32,0,this.unsigned)},da.shru=da.shiftRightUnsigned,da.shr_u=da.shiftRightUnsigned,da.toSigned=function(){return this.unsigned?Zr(this.low,this.high,!1):this},da.toUnsigned=function(){return this.unsigned?this:Zr(this.low,this.high,!0)},da.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},da.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},da.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Hr.fromBytes=function(e,t,n){return n?Hr.fromBytesLE(e,t):Hr.fromBytesBE(e,t)},Hr.fromBytesLE=function(e,t){return new Hr(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Hr.fromBytesBE=function(e,t){return new Hr(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const fa=Ur.default||Ur;function ma(e){return fa.fromString(e,!0,16)}const ga=ma("c3a5c85c97cb3127"),ya=ma("b492b66fbe98f273"),ba=ma("9ae16a3b2f90404f");function xa(e){return e.xor(e.shru(47))}function wa(e,t,n){const r=e.slice(t,t+n);return fa.fromBytes(Array.from(r),!0,!0)}function ka(e,t){return wa(e,t,8)}function va(e,t){return wa(e,t,4)}function Na(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Sa(e,t,n=ma("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function Ia(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=Na(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(Na(a,44)),[a.add(r),s.add(o)]}(ka(e,t),ka(e,t+8),ka(e,t+16),ka(e,t+24),n,r)}function Ta(e,t=e.length){const n=fa.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=ba.add(2*t),r=ka(e,0).add(ba),a=ka(e,t-8);return Sa(Na(a,37).mul(n).add(r),Na(r,25).add(a).mul(n),n)}if(t>=4){const n=ba.add(2*t);return Sa(va(e,0).shl(3).add(t),va(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return xa(ba.mul(n).xor(ga.mul(r))).mul(ba)}return ba}(e,t):function(e,t=e.length){const n=ba.add(2*t),r=ka(e,0).mul(ya),a=ka(e,8),s=ka(e,t-8).mul(n),o=ka(e,t-16).mul(ba);return Sa(Na(r.add(a),43).add(Na(s,30)).add(o),r.add(Na(a.add(ba),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=ba.add(2*t),r=ka(e,0).mul(ba),a=ka(e,8),s=ka(e,t-8).mul(n),o=ka(e,t-16).mul(ba),i=Na(r.add(a),43).add(Na(s,30)).add(o),l=Sa(i,r.add(Na(a.add(ba),18)).add(s),n),u=ka(e,16).mul(n),c=ka(e,24),p=i.add(ka(e,t-32)).mul(n),h=l.add(ka(e,t-24)).mul(n);return Sa(Na(u.add(c),43).add(Na(p,30)).add(h),u.add(Na(c.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(ya).add(113),s=xa(a.mul(ba).add(113)).mul(ba),o=[fa.UZERO,fa.UZERO],i=[fa.UZERO,fa.UZERO];r=r.mul(ba).add(ka(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{r=Na(r.add(a).add(o[0]).add(ka(e,l+8)),37).mul(ya),a=Na(a.add(o[1]).add(ka(e,l+48)),42).mul(ya),r=r.xor(i[1]),a=a.add(o[0]).add(ka(e,l+40)),s=Na(s.add(i[0]),33).mul(ya),o=Ia(e,l,o[1].mul(ya),r.add(i[0])),i=Ia(e,l+32,s.add(i[1]),a.add(ka(e,l+16))),[s,r]=[r,s],l+=64}while(l!==u);const p=ya.add(s.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=Na(r.add(a).add(o[0]).add(ka(e,l+8)),37).mul(p),a=Na(a.add(o[1]).add(ka(e,l+48)),42).mul(p),r=r.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(ka(e,l+40))),s=Na(s.add(i[0]),33).mul(p),o=Ia(e,l,o[1].mul(p),r.add(i[0])),i=Ia(e,l+32,s.add(i[1]),a.add(ka(e,l+16))),[s,r]=[r,s],Sa(Sa(o[0],i[0],p).add(xa(a).mul(ga)).add(s),Sa(o[1],i[1],p).add(r),p)}function Ea(e,t){return"string"===t?Ra(e):$a([e],t)}function $a(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=k(e)),ie().getBool("DEBUG")&&M(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Ca(){return ie().platform.now()}function Aa(e,t){return ie().platform.fetch(e,t)}function Ra(e,t="utf-8"){return t=t||"utf-8",ie().platform.encode(e,t)}function _a(e,t="utf-8"){return t=t||"utf-8",ie().platform.decode(e,t)}n(Vr,u),n(Vr,Wr);class Da{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Oa)}profileKernel(e,t,n){let r;const a=()=>{r=n()};let s;const o=Ca();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(a);else{a();for(const e of r)e.dataSync();s=Promise.resolve({kernelMs:Ca()-o})}if(ie().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Fa(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function Fa(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Oa{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?C(`${r}ms`,9):r.error,i=C(e,25),l=t.rank,u=t.size,c=C(t.shape.toString(),14);let p="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;p+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ma(e,t,n,r){const a=K(t),s=function(e,t,n,r){const a=v(t),s=r[r.length-1],o=new Array(s).fill(0),i=t.length,l="complex64"===n?Pa(e):e;if(i>1)for(let e=0;e<a/s;e++){const t=e*s;for(let e=0;e<s;e++)o[e]=Math.max(o[e],La(l[t+e],0,n).length)}return o}(e,t,n,a),o=t.length,i=Ba(e,t,n,a,s),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function La(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:W(e)?`'${e}'`:"bool"===n?za(e):parseFloat(e.toFixed(7)).toString(),C(r,t)}function za(e){return 0===e?"false":"true"}function Ba(e,t,n,r,a,s=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[La(Pa(e)[0],0,n)]}return"bool"===n?[za(e[0])]:[e[0].toString()]}if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Pa(r),s=Pa(s)),["["+r.map(((e,t)=>La(e,a[t],n))).join(", ")+", ..., "+s.map(((e,t)=>La(e,a[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Pa(e):Array.from(e)).map(((e,t)=>La(e,a[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,s=r+p;h.push(...Ba(e.slice(r,s),u,n,c,a,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,s=r+p;h.push(...Ba(e.slice(r,s),u,n,c,a,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,s=r+p;h.push(...Ba(e.slice(r,s),u,n,c,a,t===i-1))}const d=2===l?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(s?"":f),h}function Pa(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Va{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=v(e),null!=n){const e=n.length;b(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||O(t,this.size),this.strides=K(e)}set(e,...t){0===t.length&&(t=[0]),b(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Wa().makeTensor(this.values,this.shape,this.dtype)}}let Wa=null,Ua=null,Ga=null;class Ha{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=v(e),this.strides=K(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Ua.buffer(this.shape,this.dtype,e)}bufferSync(){return Ua.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Y(this.shape,e,"complex64"===this.dtype)}arraySync(){return Y(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Wa().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>_a(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Wa().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Wa().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>_a(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Wa().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Wa().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Ua.print(this,e)}clone(){return this.throwIfDisposed(),Ua.clone(this)}toString(e=!1){return Ma(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Ua.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Wa().makeVariable(this,e,t,n)}}function ja(){return Te("Tensor",(()=>Ha))}Object.defineProperty(Ha,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ja();class qa extends Ha{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!S(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Wa().disposeTensor(this),this.dataId=e.dataId,Wa().incRef(this,null)}dispose(){Wa().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(qa,Symbol.hasInstance,{value:e=>e instanceof Ha&&null!=e.assign&&e.assign instanceof Function});var Ka,Xa,Ya,Za,Ja,Qa,es,ts,ns,rs={};t(rs,"makeTypesMatch",(()=>is)),t(rs,"assertTypesMatch",(()=>ls)),t(rs,"isTensorInList",(()=>us)),t(rs,"getTensorsInContainer",(()=>cs)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Ka||(Ka={})),(Ya=Xa||(Xa={})).float32="float32",Ya.int32="int32",Ya.bool="int32",Ya.complex64="complex64",(Ja=Za||(Za={})).float32="float32",Ja.int32="int32",Ja.bool="bool",Ja.complex64="complex64",(es=Qa||(Qa={})).float32="float32",es.int32="float32",es.bool="float32",es.complex64="complex64",(ns=ts||(ts={})).float32="complex64",ns.int32="complex64",ns.bool="complex64",ns.complex64="complex64";const as={float32:Qa,int32:Xa,bool:Za,complex64:ts};function ss(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return as[e][t]}function os(e){return ss(e,"int32")}function is(e,t){if(e.dtype===t.dtype)return[e,t];const n=ss(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ls(e,t){b(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function us(e,t){return t.some((t=>t.id===e.id))}function cs(e){const t=[];return ps(e,t,new Set),t}function ps(e,t,n){if(null==e)return;if(e instanceof Ha)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const r=a[e];n.has(r)||(n.add(r),ps(r,t,n))}}function hs(e){return null!=e.kernelName}class ds{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class fs{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ds}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Rr(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Da(this.backendInstance),!0}setupRegisteredKernels(){Lr(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Lr(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof i||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Rr(`Initialization of backend ${e} failed`),Rr(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Rr(`Initialization of backend ${e} failed`),Rr(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return fs.nextTensorId++}nextVariableId(){return fs.nextVariableId++}clone(e){const t=gs.runKernel(Bt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return gs.runKernel(Xe,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Or(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=hs(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(hs(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const l=Or(t,this.backendName);b(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(r){const e=this.getTensorsForGradient(t,a,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=hs(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Mr(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(b(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&W(e[0])&&(a=e.map((e=>Ra(e))));const s=r.write(a,t,n),o=new Ha(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=V(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a=new Ha(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(a,r),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new qa(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*P(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof qa||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*P(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=Mr(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=J(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=cs(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(b(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));b(a instanceof Ha,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=Z(v(e),"float32");return gs.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!S(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),ys);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){return b(j(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;b(t.every((e=>e instanceof Ha)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),b(n.value instanceof Ha,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),b(j(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];b(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),b(s.every((e=>e instanceof Ha)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Ca(),n=await this.backend.time(e);return n.wallMs=Ca()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ds;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function ms(){const e=Ie();if(null==e._tfengine){const t=new se(e);e._tfengine=new fs(t)}var t;return t=e._tfengine.ENV,le=t,Wa=()=>e._tfengine,e._tfengine}fs.nextTensorId=0,fs.nextVariableId=0;const gs=ms();function ys(e,t){const n={a:e,b:t};return gs.runKernel(Ae,n)}var bs={};let xs;function ws(e){xs=e}function ks(e){if(void 0!==xs)return xs;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function vs(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(bs,"mockIsMobile",(()=>ws)),t(bs,"isMobile",(()=>ks)),t(bs,"isBrowser",(()=>vs));const Ns=ie();function Ss(e,t){let n=e;if(B(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||B(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&ie().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Is(e,r,[]),r}function Is(e,t,n){if(n=n||[],!Array.isArray(e)&&!B(e))return void b(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));b(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),b(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)Is(e[t],r,n.concat(t))}function Ts(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Es(e,t,n,r="numeric"){if(e instanceof Ha)return Ts(r,e.dtype,t,n),e;let a=H(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),Ts(r,a,t,n),null==e||!B(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const s=Ss(e,a);B(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?$a(e,a):k(e,[],!0);return gs.makeTensor(o,s,a)}function $s(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>Es(e,`${t}[${a}]`,n,r)))}Ns.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ns.registerFlag("IS_BROWSER",(()=>vs())),Ns.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),Ns.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Ns.registerFlag("PROD",(()=>!1)),Ns.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Ns.getBool("DEBUG"))),Ns.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Ns.registerFlag("IS_TEST",(()=>!1)),Ns.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Ns.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));function Cs(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const a=(...e)=>{gs.startScope(n);try{const t=r(...e);return re(t)&&console.error("Cannot return a Promise inside of tidy."),gs.endScope(t),t}catch(e){throw gs.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const As=Cs({complex_:function(e,t){const n=Es(e,"real","complex"),r=Es(t,"imag","complex");x(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const a={real:n,imag:r};return gs.runKernel(Je,a)}});function Rs(e,t,n,r){if(null==r&&(r=H(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!B(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ee(t);const e=v(t),r=v(n);b(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],a=e!==n.length-1||r!==v(t.slice(e));b(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return B(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?$a(e,r):k(e,[],!0),gs.makeTensor(e,t,r)}function _s(e,t,n){return Rs(e,t,Ss(e,n),n)}const Ds={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Fs,Os,Ms;Os=function(e){var t,n,r=Hs(e),a=r[0],s=r[1],o=new Vs(function(e,t,n){return 3*(t+n)/4-n}(0,a,s)),i=0,l=s>0?a-4:a;for(n=0;n<l;n+=4)t=Ps[e.charCodeAt(n)]<<18|Ps[e.charCodeAt(n+1)]<<12|Ps[e.charCodeAt(n+2)]<<6|Ps[e.charCodeAt(n+3)],o[i++]=t>>16&255,o[i++]=t>>8&255,o[i++]=255&t;2===s&&(t=Ps[e.charCodeAt(n)]<<2|Ps[e.charCodeAt(n+1)]>>4,o[i++]=255&t);1===s&&(t=Ps[e.charCodeAt(n)]<<10|Ps[e.charCodeAt(n+1)]<<4|Ps[e.charCodeAt(n+2)]>>2,o[i++]=t>>8&255,o[i++]=255&t);return o},Ms=function(e){for(var t,n=e.length,r=n%3,a=[],s=16383,o=0,i=n-r;o<i;o+=s)a.push(js(e,o,o+s>i?i:o+s));1===r?(t=e[n-1],a.push(Bs[t>>2]+Bs[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],a.push(Bs[t>>10]+Bs[t>>4&63]+Bs[t<<2&63]+"="));return a.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var Ls,zs,Bs=[],Ps=[],Vs="undefined"!=typeof Uint8Array?Uint8Array:Array,Ws="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Us=0,Gs=Ws.length;Us<Gs;++Us)Bs[Us]=Ws[Us],Ps[Ws.charCodeAt(Us)]=Us;function Hs(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function js(e,t,n){for(var r,a,s=[],o=t;o<n;o+=3)r=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),s.push(Bs[(a=r)>>18&63]+Bs[a>>12&63]+Bs[a>>6&63]+Bs[63&a]);return s.join("")}Ps["-".charCodeAt(0)]=62,Ps["_".charCodeAt(0)]=63,Ls=function(e,t,n,r,a){var s,o,i=8*a-r-1,l=(1<<i)-1,u=l>>1,c=-7,p=n?a-1:0,h=n?-1:1,d=e[t+p];for(p+=h,s=d&(1<<-c)-1,d>>=-c,c+=i;c>0;s=256*s+e[t+p],p+=h,c-=8);for(o=s&(1<<-c)-1,s>>=-c,c+=r;c>0;o=256*o+e[t+p],p+=h,c-=8);if(0===s)s=1-u;else{if(s===l)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),s-=u}return(d?-1:1)*o*Math.pow(2,s-r)},zs=function(e,t,n,r,a,s){var o,i,l,u=8*s-a-1,c=(1<<u)-1,p=c>>1,h=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:s-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+p>=1?h/l:h*Math.pow(2,1-p))*l>=2&&(o++,l/=2),o+p>=c?(i=0,o=c):o+p>=1?(i=(t*l-1)*Math.pow(2,a),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,a),o=0));a>=8;e[n+d]=255&i,d+=f,i/=256,a-=8);for(o=o<<a|i,u+=a;u>0;e[n+d]=255&o,d+=f,o/=256,u-=8);e[n+d-f]|=128*m};const qs="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;Fs=Ys;const Ks=2147483647;function Xs(e){if(e>Ks)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,Ys.prototype),t}function Ys(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return Qs(e)}return Zs(e,t,n)}function Zs(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!Ys.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|ro(e,t);let r=Xs(n);const a=r.write(e,t);a!==n&&(r=r.slice(0,a));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(zo(e,Uint8Array)){const t=new Uint8Array(e);return to(t.buffer,t.byteOffset,t.byteLength)}return eo(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(zo(e,ArrayBuffer)||e&&zo(e.buffer,ArrayBuffer))return to(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(zo(e,SharedArrayBuffer)||e&&zo(e.buffer,SharedArrayBuffer)))return to(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return Ys.from(r,t,n);const a=function(e){if(Ys.isBuffer(e)){const t=0|no(e.length),n=Xs(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Bo(e.length)?Xs(0):eo(e);if("Buffer"===e.type&&Array.isArray(e.data))return eo(e.data)}(e);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Ys.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function Js(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Qs(e){return Js(e),Xs(e<0?0:0|no(e))}function eo(e){const t=e.length<0?0:0|no(e.length),n=Xs(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function to(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,Ys.prototype),r}function no(e){if(e>=Ks)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Ks.toString(16)+" bytes");return 0|e}function ro(e,t){if(Ys.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||zo(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Oo(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Mo(e).length;default:if(a)return r?-1:Oo(e).length;t=(""+t).toLowerCase(),a=!0}}function ao(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return xo(this,t,n);case"utf8":case"utf-8":return mo(this,t,n);case"ascii":return yo(this,t,n);case"latin1":case"binary":return bo(this,t,n);case"base64":return fo(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return wo(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function so(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function oo(e,t,n,r,a){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Bo(n=+n)&&(n=a?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(a)return-1;n=e.length-1}else if(n<0){if(!a)return-1;n=0}if("string"==typeof t&&(t=Ys.from(t,r)),Ys.isBuffer(t))return 0===t.length?-1:io(e,t,n,r,a);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):io(e,[t],n,r,a);throw new TypeError("val must be string, number or Buffer")}function io(e,t,n,r,a){let s,o=1,i=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,l/=2,n/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(a){let r=-1;for(s=n;s<i;s++)if(u(e,s)===u(t,-1===r?0:s-r)){if(-1===r&&(r=s),s-r+1===l)return r*o}else-1!==r&&(s-=s-r),r=-1}else for(n+l>i&&(n=i-l),s=n;s>=0;s--){let n=!0;for(let r=0;r<l;r++)if(u(e,s+r)!==u(t,r)){n=!1;break}if(n)return s}return-1}function lo(e,t,n,r){n=Number(n)||0;const a=e.length-n;r?(r=Number(r))>a&&(r=a):r=a;const s=t.length;let o;for(r>s/2&&(r=s/2),o=0;o<r;++o){const r=parseInt(t.substr(2*o,2),16);if(Bo(r))return o;e[n+o]=r}return o}function uo(e,t,n,r){return Lo(Oo(t,e.length-n),e,n,r)}function co(e,t,n,r){return Lo(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function po(e,t,n,r){return Lo(Mo(t),e,n,r)}function ho(e,t,n,r){return Lo(function(e,t){let n,r,a;const s=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,a=n%256,s.push(a),s.push(r);return s}(t,e.length-n),e,n,r)}function fo(e,t,n){return 0===t&&n===e.length?Ms(e):Ms(e.slice(t,n))}function mo(e,t,n){n=Math.min(e.length,n);const r=[];let a=t;for(;a<n;){const t=e[a];let s=null,o=t>239?4:t>223?3:t>191?2:1;if(a+o<=n){let n,r,i,l;switch(o){case 1:t<128&&(s=t);break;case 2:n=e[a+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(s=l));break;case 3:n=e[a+1],r=e[a+2],128==(192&n)&&128==(192&r)&&(l=(15&t)<<12|(63&n)<<6|63&r,l>2047&&(l<55296||l>57343)&&(s=l));break;case 4:n=e[a+1],r=e[a+2],i=e[a+3],128==(192&n)&&128==(192&r)&&128==(192&i)&&(l=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&i,l>65535&&l<1114112&&(s=l))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),a+=o}return function(e){const t=e.length;if(t<=go)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=go));return n}(r)}Ys.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),Ys.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Ys.prototype,"parent",{enumerable:!0,get:function(){if(Ys.isBuffer(this))return this.buffer}}),Object.defineProperty(Ys.prototype,"offset",{enumerable:!0,get:function(){if(Ys.isBuffer(this))return this.byteOffset}}),Ys.poolSize=8192,Ys.from=function(e,t,n){return Zs(e,t,n)},Object.setPrototypeOf(Ys.prototype,Uint8Array.prototype),Object.setPrototypeOf(Ys,Uint8Array),Ys.alloc=function(e,t,n){return function(e,t,n){return Js(e),e<=0?Xs(e):void 0!==t?"string"==typeof n?Xs(e).fill(t,n):Xs(e).fill(t):Xs(e)}(e,t,n)},Ys.allocUnsafe=function(e){return Qs(e)},Ys.allocUnsafeSlow=function(e){return Qs(e)},Ys.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Ys.prototype},Ys.compare=function(e,t){if(zo(e,Uint8Array)&&(e=Ys.from(e,e.offset,e.byteLength)),zo(t,Uint8Array)&&(t=Ys.from(t,t.offset,t.byteLength)),!Ys.isBuffer(e)||!Ys.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let a=0,s=Math.min(n,r);a<s;++a)if(e[a]!==t[a]){n=e[a],r=t[a];break}return n<r?-1:r<n?1:0},Ys.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Ys.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Ys.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=Ys.allocUnsafe(t);let a=0;for(n=0;n<e.length;++n){let t=e[n];if(zo(t,Uint8Array))a+t.length>r.length?(Ys.isBuffer(t)||(t=Ys.from(t)),t.copy(r,a)):Uint8Array.prototype.set.call(r,t,a);else{if(!Ys.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,a)}a+=t.length}return r},Ys.byteLength=ro,Ys.prototype._isBuffer=!0,Ys.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)so(this,t,t+1);return this},Ys.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)so(this,t,t+3),so(this,t+1,t+2);return this},Ys.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)so(this,t,t+7),so(this,t+1,t+6),so(this,t+2,t+5),so(this,t+3,t+4);return this},Ys.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?mo(this,0,e):ao.apply(this,arguments)},Ys.prototype.toLocaleString=Ys.prototype.toString,Ys.prototype.equals=function(e){if(!Ys.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Ys.compare(this,e)},Ys.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},qs&&(Ys.prototype[qs]=Ys.prototype.inspect),Ys.prototype.compare=function(e,t,n,r,a){if(zo(e,Uint8Array)&&(e=Ys.from(e,e.offset,e.byteLength)),!Ys.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===a&&(a=this.length),t<0||n>e.length||r<0||a>this.length)throw new RangeError("out of range index");if(r>=a&&t>=n)return 0;if(r>=a)return-1;if(t>=n)return 1;if(this===e)return 0;let s=(a>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0);const i=Math.min(s,o),l=this.slice(r,a),u=e.slice(t,n);for(let e=0;e<i;++e)if(l[e]!==u[e]){s=l[e],o=u[e];break}return s<o?-1:o<s?1:0},Ys.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Ys.prototype.indexOf=function(e,t,n){return oo(this,e,t,n,!0)},Ys.prototype.lastIndexOf=function(e,t,n){return oo(this,e,t,n,!1)},Ys.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const a=this.length-t;if((void 0===n||n>a)&&(n=a),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let s=!1;for(;;)switch(r){case"hex":return lo(this,e,t,n);case"utf8":case"utf-8":return uo(this,e,t,n);case"ascii":case"latin1":case"binary":return co(this,e,t,n);case"base64":return po(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ho(this,e,t,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},Ys.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const go=4096;function yo(e,t,n){let r="";n=Math.min(e.length,n);for(let a=t;a<n;++a)r+=String.fromCharCode(127&e[a]);return r}function bo(e,t,n){let r="";n=Math.min(e.length,n);for(let a=t;a<n;++a)r+=String.fromCharCode(e[a]);return r}function xo(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let a="";for(let r=t;r<n;++r)a+=Po[e[r]];return a}function wo(e,t,n){const r=e.slice(t,n);let a="";for(let e=0;e<r.length-1;e+=2)a+=String.fromCharCode(r[e]+256*r[e+1]);return a}function ko(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function vo(e,t,n,r,a,s){if(!Ys.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<s)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function No(e,t,n,r,a){Ro(t,r,a,e,n,7);let s=Number(t&BigInt(4294967295));e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,o>>=8,e[n++]=o,n}function So(e,t,n,r,a){Ro(t,r,a,e,n,7);let s=Number(t&BigInt(4294967295));e[n+7]=s,s>>=8,e[n+6]=s,s>>=8,e[n+5]=s,s>>=8,e[n+4]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=o,o>>=8,e[n+2]=o,o>>=8,e[n+1]=o,o>>=8,e[n]=o,n+8}function Io(e,t,n,r,a,s){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function To(e,t,n,r,a){return t=+t,n>>>=0,a||Io(e,0,n,4),zs(e,t,n,r,23,4),n+4}function Eo(e,t,n,r,a){return t=+t,n>>>=0,a||Io(e,0,n,8),zs(e,t,n,r,52,8),n+8}Ys.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,Ys.prototype),r},Ys.prototype.readUintLE=Ys.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||ko(e,t,this.length);let r=this[e],a=1,s=0;for(;++s<t&&(a*=256);)r+=this[e+s]*a;return r},Ys.prototype.readUintBE=Ys.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||ko(e,t,this.length);let r=this[e+--t],a=1;for(;t>0&&(a*=256);)r+=this[e+--t]*a;return r},Ys.prototype.readUint8=Ys.prototype.readUInt8=function(e,t){return e>>>=0,t||ko(e,1,this.length),this[e]},Ys.prototype.readUint16LE=Ys.prototype.readUInt16LE=function(e,t){return e>>>=0,t||ko(e,2,this.length),this[e]|this[e+1]<<8},Ys.prototype.readUint16BE=Ys.prototype.readUInt16BE=function(e,t){return e>>>=0,t||ko(e,2,this.length),this[e]<<8|this[e+1]},Ys.prototype.readUint32LE=Ys.prototype.readUInt32LE=function(e,t){return e>>>=0,t||ko(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Ys.prototype.readUint32BE=Ys.prototype.readUInt32BE=function(e,t){return e>>>=0,t||ko(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Ys.prototype.readBigUInt64LE=Vo((function(e){_o(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Do(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,a=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(a)<<BigInt(32))})),Ys.prototype.readBigUInt64BE=Vo((function(e){_o(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Do(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],a=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(a)})),Ys.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||ko(e,t,this.length);let r=this[e],a=1,s=0;for(;++s<t&&(a*=256);)r+=this[e+s]*a;return a*=128,r>=a&&(r-=Math.pow(2,8*t)),r},Ys.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||ko(e,t,this.length);let r=t,a=1,s=this[e+--r];for(;r>0&&(a*=256);)s+=this[e+--r]*a;return a*=128,s>=a&&(s-=Math.pow(2,8*t)),s},Ys.prototype.readInt8=function(e,t){return e>>>=0,t||ko(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Ys.prototype.readInt16LE=function(e,t){e>>>=0,t||ko(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Ys.prototype.readInt16BE=function(e,t){e>>>=0,t||ko(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Ys.prototype.readInt32LE=function(e,t){return e>>>=0,t||ko(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Ys.prototype.readInt32BE=function(e,t){return e>>>=0,t||ko(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Ys.prototype.readBigInt64LE=Vo((function(e){_o(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Do(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),Ys.prototype.readBigInt64BE=Vo((function(e){_o(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Do(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),Ys.prototype.readFloatLE=function(e,t){return e>>>=0,t||ko(e,4,this.length),Ls(this,e,!0,23,4)},Ys.prototype.readFloatBE=function(e,t){return e>>>=0,t||ko(e,4,this.length),Ls(this,e,!1,23,4)},Ys.prototype.readDoubleLE=function(e,t){return e>>>=0,t||ko(e,8,this.length),Ls(this,e,!0,52,8)},Ys.prototype.readDoubleBE=function(e,t){return e>>>=0,t||ko(e,8,this.length),Ls(this,e,!1,52,8)},Ys.prototype.writeUintLE=Ys.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){vo(this,e,t,n,Math.pow(2,8*n)-1,0)}let a=1,s=0;for(this[t]=255&e;++s<n&&(a*=256);)this[t+s]=e/a&255;return t+n},Ys.prototype.writeUintBE=Ys.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){vo(this,e,t,n,Math.pow(2,8*n)-1,0)}let a=n-1,s=1;for(this[t+a]=255&e;--a>=0&&(s*=256);)this[t+a]=e/s&255;return t+n},Ys.prototype.writeUint8=Ys.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,1,255,0),this[t]=255&e,t+1},Ys.prototype.writeUint16LE=Ys.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Ys.prototype.writeUint16BE=Ys.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Ys.prototype.writeUint32LE=Ys.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Ys.prototype.writeUint32BE=Ys.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Ys.prototype.writeBigUInt64LE=Vo((function(e,t=0){return No(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Ys.prototype.writeBigUInt64BE=Vo((function(e,t=0){return So(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Ys.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);vo(this,e,t,n,r-1,-r)}let a=0,s=1,o=0;for(this[t]=255&e;++a<n&&(s*=256);)e<0&&0===o&&0!==this[t+a-1]&&(o=1),this[t+a]=(e/s>>0)-o&255;return t+n},Ys.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);vo(this,e,t,n,r-1,-r)}let a=n-1,s=1,o=0;for(this[t+a]=255&e;--a>=0&&(s*=256);)e<0&&0===o&&0!==this[t+a+1]&&(o=1),this[t+a]=(e/s>>0)-o&255;return t+n},Ys.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Ys.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Ys.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Ys.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Ys.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||vo(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Ys.prototype.writeBigInt64LE=Vo((function(e,t=0){return No(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Ys.prototype.writeBigInt64BE=Vo((function(e,t=0){return So(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Ys.prototype.writeFloatLE=function(e,t,n){return To(this,e,t,!0,n)},Ys.prototype.writeFloatBE=function(e,t,n){return To(this,e,t,!1,n)},Ys.prototype.writeDoubleLE=function(e,t,n){return Eo(this,e,t,!0,n)},Ys.prototype.writeDoubleBE=function(e,t,n){return Eo(this,e,t,!1,n)},Ys.prototype.copy=function(e,t,n,r){if(!Ys.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const a=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),a},Ys.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Ys.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let a;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{const s=Ys.isBuffer(e)?e:Ys.from(e,r),o=s.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<n-t;++a)this[a+t]=s[a%o]}return this};const $o={};function Co(e,t,n){$o[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Ao(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Ro(e,t,n,r,a,s){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let a;throw a=s>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(s+1)}${r}`:`>= -(2${r} ** ${8*(s+1)-1}${r}) and < 2 ** ${8*(s+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new $o.ERR_OUT_OF_RANGE("value",a,e)}!function(e,t,n){_o(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||Do(t,e.length-(n+1))}(r,a,s)}function _o(e,t){if("number"!=typeof e)throw new $o.ERR_INVALID_ARG_TYPE(t,"number",e)}function Do(e,t,n){if(Math.floor(e)!==e)throw _o(e,n),new $o.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new $o.ERR_BUFFER_OUT_OF_BOUNDS;throw new $o.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Co("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Co("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Co("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,a=n;return Number.isInteger(n)&&Math.abs(n)>2**32?a=Ao(String(n)):"bigint"==typeof n&&(a=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(a=Ao(a)),a+="n"),r+=` It must be ${t}. Received ${a}`,r}),RangeError);const Fo=/[^+/0-9A-Za-z-_]/g;function Oo(e,t){let n;t=t||1/0;const r=e.length;let a=null;const s=[];for(let o=0;o<r;++o){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!a){if(n>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&s.push(239,191,189);continue}a=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),a=n;continue}n=65536+(a-55296<<10|n-56320)}else a&&(t-=3)>-1&&s.push(239,191,189);if(a=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function Mo(e){return Os(function(e){if((e=(e=e.split("=")[0]).trim().replace(Fo,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Lo(e,t,n,r){let a;for(a=0;a<r&&!(a+n>=t.length||a>=e.length);++a)t[a+n]=e[a];return a}function zo(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Bo(e){return e!=e}const Po=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let a=0;a<16;++a)t[r+a]=e[n]+e[a]}return t}();function Vo(e){return"undefined"==typeof BigInt?Wo:e}function Wo(){throw new Error("BigInt not supported")}var Uo=Fs;async function Go(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:jo(await Promise.all(r)),specs:n}}function Ho(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,l=v(i);let u;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=Ds[n.dtype],c=e.slice(a,a+l*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=ei()),u=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=Math.round(t*n.scale+n.min)}}a+=l*i}else if("string"===o){const t=v(s.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));u.push(n),a+=t}}else{const r=Ds[o],s=e.slice(a,a+l*r);if("float32"===o)u=new Float32Array(s);else if("int32"===o)u=new Int32Array(s);else if("bool"===o)u=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(s);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const a=_s(e,i,"float32"),o=_s(r,i,"float32");n[t]=As(a,o),a.dispose(),o.dispose()}}a+=l*r}"complex64"!==o&&(n[t]=_s(u,i,o))}return n}function jo(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const qo=void 0!==Uo&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ko(e){return qo?Uo.byteLength(e):new Blob([e]).size}function Xo(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Yo(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Zo(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function Jo(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,a]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=a}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function Qo(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ko(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ko(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function ei(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class ti{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ti.instance&&(ti.instance=new ti),ti.instance}static registerSaveRouter(e){ti.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ti.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ti.getHandlers(e,"save")}static getLoadHandlers(e,t){return ti.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?ti.getInstance().loadRouters:ti.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const ni=e=>ti.registerSaveRouter(e),ri=e=>ti.registerLoadRouter(e),ai=e=>ti.getSaveHandlers(e),si=(e,t)=>ti.getLoadHandlers(e,t),oi="tensorflowjs",ii="models_store",li="model_info_store";function ui(){if(!ie().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ci(e){const t=e.result;t.createObjectStore(ii,{keyPath:"modelPath"}),t.createObjectStore(li,{keyPath:"modelPath"})}class pi{constructor(e){if(this.indexedDB=ui(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(oi,1);r.onupgradeneeded=()=>ci(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(ii,"readonly"),r=t.objectStore(ii).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=Qo(t),s=a.transaction(li,"readwrite");let o=s.objectStore(li);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=a.transaction(ii,"readwrite");const i=l.objectStore(ii).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(li);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}pi.URL_SCHEME="indexeddb://";const hi=e=>{return ie().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(pi.URL_SCHEME)?(t=e.slice(pi.URL_SCHEME.length),new pi(t)):null;var t};ti.registerSaveRouter(hi),ti.registerLoadRouter(hi);class di{constructor(){this.indexedDB=ui()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(oi,1);n.onupgradeneeded=()=>ci(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(li,"readonly"),s=a.objectStore(li).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(pi.URL_SCHEME)?t.slice(pi.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(oi,1);r.onupgradeneeded=()=>ci(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(li,"readwrite"),o=s.objectStore(li),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{l=a.transaction(ii,"readwrite");const r=l.objectStore(ii).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const fi="/",mi="tensorflowjs_models",gi="info",yi="model_topology",bi="weight_specs",xi="weight_data",wi="model_metadata";function ki(e){return{info:[mi,e,gi].join(fi),topology:[mi,e,yi].join(fi),weightSpecs:[mi,e,bi].join(fi),weightData:[mi,e,xi].join(fi),modelMetadata:[mi,e,wi].join(fi)}}function vi(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Ni(e){const t=e.split(fi);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(fi)}class Si{constructor(e){if(!ie().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ki(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Qo(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(qo)return Uo.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw vi(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(qo){const t=Uo.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}Si.URL_SCHEME="localstorage://";const Ii=e=>{return ie().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Si.URL_SCHEME)?(t=e.slice(Si.URL_SCHEME.length),new Si(t)):null;var t};ti.registerSaveRouter(Ii),ti.registerLoadRouter(Ii);class Ti{constructor(){b(ie().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),b("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=mi+fi,n=fi+gi;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){e[Ni(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;const n=ki(e=(t=e).startsWith(Si.URL_SCHEME)?t.slice(Si.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return vi(n),r}}const Ei="://";class $i{constructor(){this.managers={}}static getInstance(){return null==$i.instance&&($i.instance=new $i),$i.instance}static registerManager(e,t){b(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Ei)&&(e=e.slice(0,e.indexOf(Ei))),b(e.length>0,(()=>"scheme must not be an empty string."));const n=$i.getInstance();b(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ci(e){if(-1===e.indexOf(Ei))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${$i.getSchemes().join(",")}`);return{scheme:e.split(Ei)[0],path:e.split(Ei)[1]}}async function Ai(e,t,n=!1){b(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=ti.getLoadHandlers(e);b(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),b(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=ti.getSaveHandlers(t);b(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),b(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],i=Ci(e).scheme,l=Ci(e).path,u=i===Ci(e).scheme,c=await a.load();n&&u&&await $i.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await $i.getManager(i).removeModel(l),p.modelArtifactsInfo}async function Ri(){const e=$i.getSchemes(),t={};for(const n of e){const e=await $i.getManager(n).listModels();for(const r in e){t[n+Ei+r]=e[r]}}return t}async function _i(e){const t=Ci(e);return $i.getManager(t.scheme).removeModel(t.path)}async function Di(e,t){return Ai(e,t,!1)}async function Fi(e,t){return Ai(e,t,!0)}class Oi{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(ie().get("IS_BROWSER")){ie().setPlatform("browser",new Oi);try{$i.registerManager(Si.URL_SCHEME,new Ti)}catch(e){}try{$i.registerManager(pi.URL_SCHEME,new di)}catch(e){}}const Mi=()=>s("foUwZ");let Li;function zi(e,t="float32",n){return t=t||"float32",ee(e),new Va(e,t,n)}ie().get("IS_NODE")&&ie().setPlatform("node",new class{constructor(){this.util=s("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=ie().global.fetch?ie().global.fetch(e,t):(null==Li&&(Li=Mi()),Li(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Bi=Cs({cast_:function(e,t){const n=Es(e,"x","cast");if(!L(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},a={dtype:t};return gs.runKernel(Xe,r,a)}});const Pi=Cs({clone_:function(e){const t={x:Es(e,"x","clone","string_or_numeric")};return gs.runKernel(Bt,t)}});ms();Ua={buffer:zi,cast:Bi,clone:Pi,print:function(e,t=!1){console.log(e.toString(t))}};var Vi={};t(Vi,"copyModel",(()=>Di)),t(Vi,"listModels",(()=>Ri)),t(Vi,"moveModel",(()=>Fi)),t(Vi,"removeModel",(()=>_i)),t(Vi,"browserFiles",(()=>Hi)),t(Vi,"browserHTTPRequest",(()=>el)),t(Vi,"concatenateArrayBuffers",(()=>Xo)),t(Vi,"decodeWeights",(()=>Ho)),t(Vi,"encodeWeights",(()=>Go)),t(Vi,"fromMemory",(()=>rl)),t(Vi,"getLoadHandlers",(()=>si)),t(Vi,"getModelArtifactsForJSON",(()=>Jo)),t(Vi,"getModelArtifactsInfoForJSON",(()=>Qo)),t(Vi,"getSaveHandlers",(()=>ai)),t(Vi,"http",(()=>Qi)),t(Vi,"isHTTPScheme",(()=>Zi)),t(Vi,"loadWeights",(()=>Ki)),t(Vi,"registerLoadRouter",(()=>ri)),t(Vi,"registerSaveRouter",(()=>ni)),t(Vi,"weightsLoaderFactory",(()=>Xi)),t(Vi,"withSaveHandler",(()=>al));function Wi(e){return new Promise((e=>setTimeout(e))).then(e)}class Ui{constructor(e){if(!ie().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ui.URL_SCHEME)&&(e=e.slice(Ui.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Zo(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await Wi((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Wi((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Qo(e)}}}}Ui.URL_SCHEME="downloads://";class Gi{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=Jo(r,(e=>this.loadWeights(e)));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(a).then((e=>[t,Xo(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Yo(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=Yo(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Hi(e){return new Gi(e)}function ji(e,t,n,r){var a,s,o;b(null!=(a=e)&&Array.isArray(a)&&a.length>0,(()=>"promises must be a none empty array")),o=r=null==r?1:r,b((s=n=null==n?0:n)>=0&&s<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${s}`)),b(o>=0&&o<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${o}`)),b(o>=s,(()=>`startFraction must be no more than endFraction, but got startFraction ${s} and endFraction ${o}`));let i=0;return Promise.all(e.map((a=>(a.then((a=>{const s=n+ ++i/e.length*(r-n);return t(s),a})),a))))}async function qi(e,t){null==t&&(t={});const n=null==t.fetchFunc?ie().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await ji(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await ji(a,t.onProgress,.5,1)}async function Ki(e,t="",n,r){return Xi((e=>qi(e,{requestInit:r})))(e,t,n)}function Xi(e){return async(t,n="",r)=>{const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Ds[l]*v(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=Ho(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}ti.registerSaveRouter((e=>ie().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ui.URL_SCHEME)?function(e="model"){return new Ui(e)}(e.slice(Ui.URL_SCHEME.length)):null));class Yi{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(b("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=ie().platform.fetch,b(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&b(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Zo(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Qo(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Jo(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=[];for(const t of e)s.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[s,Xo(await qi(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Zi(e){return null!=e.match(Yi.URL_SCHEME_REGEX)}Yi.URL_SCHEME_REGEX=/^https?:\/\//;const Ji=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Zi(e))):Zi(e),n)return Qi(e,t)}return null};function Qi(e,t){return new Yi(e,t)}function el(e,t){return Qi(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ti.registerSaveRouter(Ji),ti.registerLoadRouter(Ji);class tl{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class nl{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function rl(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new tl(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tl({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tl({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function al(e){return new nl(e)}var sl={};function ol(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function il(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function ll(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(sl,"getBroadcastDims",(()=>ol)),t(sl,"getReductionAxes",(()=>il)),t(sl,"assertAndGetBroadcastShape",(()=>ll));var ul={};let cl;function pl(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Or(Ir,gs.backendName)){const n={pixels:e},r={numChannels:t};return gs.runKernel(Ir,n,r)}const[l,u]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(r||n)c=e.data;else if(s||a||i){if(null==cl)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");cl=new OffscreenCanvas(1,1).getContext("2d")}else cl=document.createElement("canvas").getContext("2d");cl.canvas.width=l,cl.canvas.height=u,cl.drawImage(e,0,0,l,u),c=cl.getImageData(0,0,l,u).data}if(4===t)p=new Int32Array(c);else{const e=l*u;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return function(e,t,n){if(w(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Ss(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Rs(e,t,r,n)}(p,[u,l,t],"int32")}function hl(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function dl(e,t=3){let n=null;if(ie().getBool("WRAP_TO_IMAGEBITMAP")&&hl(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return pl(n,t)}async function fl(e,t){let n=Es(e,"img","toPixels");if(!(e instanceof Ha)){const e=n;n=Bi(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,l=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(ul,"fromPixelsAsync",(()=>dl)),t(ul,"toPixels",(()=>fl)),t(ul,"fromPixels",(()=>ml));const ml=Cs({fromPixels_:pl});var gl={};t(gl,"assertParamsValid",(()=>yl)),t(gl,"maskToAxes",(()=>bl)),t(gl,"computeOutShape",(()=>xl)),t(gl,"stridesWithElidedDims",(()=>wl)),t(gl,"getNormalizedAxes",(()=>Nl)),t(gl,"startIndicesWithElidedDims",(()=>Sl)),t(gl,"stopIndicesWithElidedDims",(()=>Il)),t(gl,"startForAxis",(()=>El)),t(gl,"stopForAxis",(()=>$l)),t(gl,"stridesForAxis",(()=>Tl)),t(gl,"isSliceContinous",(()=>Cl)),t(gl,"computeFlatOffset",(()=>Al)),t(gl,"parseSliceParams",(()=>Rl)),t(gl,"sliceInfo",(()=>_l));function yl(e,t,n){const r=e.shape.length;b(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),b(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)b(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function bl(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function xl(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function wl(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function kl(e,t,n){return n<=e?n:n-(t-1)}function vl(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Nl(e,t,n,r,a,s,o,i,l){const u=e.length;let c=new Array(u),p=new Array(u),h=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Sl(o,l,u,r,e),p=Il(i,l,u,a,e),h=wl(s,l,u,e)}else for(let t=0;t<u;t++)c[t]=El(o,r,s,e,t,l),p[t]=$l(i,a,s,e,t,l),h[t]=Tl(s,t,l);return{begin:c,end:p,strides:h}}function Sl(e,t,n,r,a){const s=[...a],o=vl(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=kl(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function Il(e,t,n,r,a){const s=[...a],o=vl(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{const o=kl(t,n,a);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),s[a]=i}for(let e=0;e<s.length;e++){const t=a[e];s[e]<0&&(s[e]+=t),s[e]=h(0,s[e],a[e])}return s}function Tl(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function El(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[a];return o<0&&(o+=l),o=h(0,o,l-1),o}function $l(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[a];return o<0&&(o+=l),o=i>0?h(0,o,l):h(-1,o,l-1),o}function Cl(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function Al(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Rl(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{b(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(b(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,s]}function _l(e,t,n,r,a,s,o,i,l){let u;if(null==r?(u=new Array(t.length),u.fill(1)):u=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const a=[h.beginMask&1<<t,h.endMask&1<<t],s=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=Dl(h.begin[t],0,h.strides[t],r,a,s),h.end[t]=Dl(h.end[t],1,h.strides[t],r,a,s);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,l=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],l=!0):n?(i=1,l=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,l=!0),l){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function Dl(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}var Fl={};t(Fl,"Serializable",(()=>Ol)),t(Fl,"SerializationMap",(()=>Ml)),t(Fl,"registerClass",(()=>Ll));class Ol{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ml{constructor(){this.classNameMap={}}static getMap(){return null==Ml.instance&&(Ml.instance=new Ml),Ml.instance}static register(e){Ml.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ll(e){b(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),b("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),b(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ml.register(e)}
/** @license See the LICENSE file. */var zl={};t(zl,"fromUint8ToStringArray",(()=>Bc)),t(zl,"fromStringArrayToUint8",(()=>Pc)),t(zl,"slice_util",(()=>gl)),t(zl,"upcastType",(()=>ss)),t(zl,"segment_util",(()=>Bl));var Bl={};t(Bl,"segOpComputeOptimalWindowSize",(()=>Ul)),t(Bl,"computeOutShape",(()=>Gl)),t(Bl,"collectGatherOpShapeInfo",(()=>Hl));var Pl={};t(Pl,"PARALLELIZE_THRESHOLD",(()=>Vl)),t(Pl,"computeOptimalWindowSize",(()=>Wl));const Vl=30;function Wl(e){return e<=Vl?e:q(e,Math.floor(Math.sqrt(e)))}function Ul(e,t){let n,r=!1;for(e<=Vl?(n=e,r=!0):n=q(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=q(e,n+1);return n}function Gl(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function Hl(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var jl={};function ql(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Kl(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function Xl(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function Yl(e,t){return Kl(e,t.map((e=>1)),t)}function Zl(e,t,n){b(ql(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Jl(e,t){if(ql(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Ql(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function eu(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(jl,"axesAreInnerMostDims",(()=>ql)),t(jl,"combineLocations",(()=>Kl)),t(jl,"computeOutAndReduceShapes",(()=>Xl)),t(jl,"expandShapeToKeepDim",(()=>Yl)),t(jl,"assertAxesAreInnerMostDims",(()=>Zl)),t(jl,"getAxesPermutation",(()=>Jl)),t(jl,"getUndoAxesPermutation",(()=>Ql)),t(jl,"getInnerMostAxes",(()=>eu));var tu={};function nu(e,t){const n=e[0].length;e.forEach(((e,t)=>{b(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),b(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)b(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function ru(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(tu,"assertParamsConsistent",(()=>nu)),t(tu,"computeOutShape",(()=>ru));var au={};function su(e,t,n,r,a="NHWC",s){return lu(e,[...t,e[3]],n,s,r,null,null,yu(a))}function ou(e,t,n,r,a,s,o="channelsLast"){const[i,l]=pu(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return lu(e,u,n,r,a,s,!1,o)}function iu(e,t,n,r,a,s,o="NDHWC"){const[i,l,u]=hu(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,l,u,e[1],e[1]]}return uu(e,c,n,r,a,!1,p,s)}function lu(e,t,n,r,a,s,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=pu(n),[y,b]=pu(r),x=du(h,y),w=du(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,a,s,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=cu(e,t,n));const s=e[0],o=e[1],i=fu((s-t+2*r)/n+1,a),l=fu((o-t+2*r)/n+1,a);return[i,l]}([t,n],s,r,e,i);c=a[0],p=a[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/a);const e=Math.max(0,(c-1)*r+s-t),i=Math.max(0,(p-1)*a+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/r),p=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=fu((t-s+h+d)/r+1,i),p=fu((n-o+f+m)/a+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(a,u,c,m,g,x,w,s,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[l,S,v,N]:"channelsLast"===i&&(I=[l,v,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function uu(e,t,n,r,a,s=!1,o="channelsLast",i){let[l,u,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=hu(n),[w,k,v]=hu(r),N=du(d,w),S=du(f,k),I=du(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,a,s,o,i,l,u,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=cu(e,t,r));const o=e[0],i=e[1],l=e[2],u=fu((o-t+2*a)/r+1,s),c=fu((i-t+2*a)/r+1,s),p=fu((l-t+2*a)/r+1,s);return[u,c,p,n]}([t,n,r,1],i,1,a,e,c);h=s[0],d=s[1],f=s[2]}else if("same"===e){h=Math.ceil(t/a),d=Math.ceil(n/s),f=Math.ceil(r/o);const e=(h-1)*a+i-t,c=(d-1)*s+l-n,m=(f-1)*o+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/a),d=Math.ceil((n-l+1)/s),f=Math.ceil((r-u+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(a,u,c,p,y,b,x,N,S,I,i),A=s?g*h:g;let R;return"channelsFirst"===o?R=[l,A,E,$,C]:"channelsLast"===o&&(R=[l,E,$,C,A]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function cu(e,t,n,r=1){const a=du(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function pu(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function hu(e){return"number"==typeof e?[e,e,e]:e}function du(e,t){return t<=1?e:e+(e-1)*(t-1)}function fu(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function mu(e){const[t,n,r]=pu(e);return 1===t&&1===n&&1===r}function gu(e,t){return mu(e)||mu(t)}function yu(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function bu(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)b(I(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{b(I(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(au,"computeDilation2DInfo",(()=>su)),t(au,"convertConv2DDataFormat",(()=>yu)),t(au,"computeConv2DInfo",(()=>lu)),t(au,"computePool2DInfo",(()=>ou)),t(au,"computePool3DInfo",(()=>iu)),t(au,"computeConv3DInfo",(()=>uu)),t(au,"computeDefaultPad",(()=>cu)),t(au,"tupleValuesAreOne",(()=>mu)),t(au,"eitherStridesOrDilationsAreOne",(()=>gu)),t(au,"checkPadOnDimRoundingMode",(()=>bu));var xu={};t(xu,"getFusedDyActivation",(()=>Au)),t(xu,"getFusedBiasGradient",(()=>Ru)),t(xu,"applyActivation",(()=>_u)),t(xu,"shouldFuse",(()=>Du));const wu=Cs({elu_:function(e){const t={x:Es(e,"x","elu","float32")};return gs.runKernel(vt,t)}});const ku=Cs({leakyRelu_:function(e,t=.2){const n={x:Es(e,"x","leakyRelu")},r={alpha:t};return gs.runKernel(Ht,n,r)}});const vu=Cs({mul_:function(e,t){let n=Es(e,"a","mul"),r=Es(t,"b","mul");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(gn,a)}});const Nu=Cs({prelu_:function(e,t){const n={x:Es(e,"x","prelu"),alpha:Es(t,"alpha","prelu")};return gs.runKernel(En,n)}});const Su=Cs({relu_:function(e){const t={x:Es(e,"x","relu")};return gs.runKernel(_n,t)}});const Iu=Cs({relu6_:function(e){const t={x:Es(e,"x","relu6")};return gs.runKernel(zn,t)}});const Tu=Cs({reshape_:function(e,t){const n={x:Es(e,"x","reshape","string_or_numeric")},r={shape:t};return gs.runKernel(Dn,n,r)}});const Eu=Cs({sigmoid_:function(e){const t={x:Es(e,"x","sigmoid","float32")};return gs.runKernel(Xn,t)}});const $u=Cs({step_:function(e,t=0){const n={x:Es(e,"x","step")},r={alpha:t};return gs.runKernel(Sr,n,r)}});const Cu=Cs({sum_:function(e,t=null,n=!1){let r=Es(e,"x","sum");"bool"===r.dtype&&(r=Bi(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return gs.runKernel(Jn,a,s)}});function Au(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return vu(e,$u(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ru(e,t){let n=t;const r=il(e.shape,t.shape);return r.length>0&&(n=Cu(n,r)),Tu(n,e.shape)}function _u(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Su(e);if("elu"===t)return wu(e);if("relu6"===t)return Iu(e);if("prelu"===t)return Nu(e,n);if("leakyrelu"===t)return ku(e,r);if("sigmoid"===t)return Eu(e);throw new Error(`Unknown fused activation ${t}.`)}const Du=(e,t)=>!(e>0)||"linear"===t;var Fu={};function Ou(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(Fu,"getImageCenter",(()=>Ou));var Mu={};function Lu(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function zu(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function Bu(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function Pu(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Vu(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}t(Mu,"getReshaped",(()=>Lu)),t(Mu,"getPermuted",(()=>zu)),t(Mu,"getReshapedPermuted",(()=>Bu)),t(Mu,"getSliceBeginCoords",(()=>Pu)),t(Mu,"getSliceSize",(()=>Vu));var Wu={};function Uu(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===v(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,l=a.slice();l.pop();let u=1;for(let e=s;e<n;++e)u*=i[e],l.push(i[e]);const c=[...K(e.shape).map((e=>e/u)),1].slice(0,s);return[l,o,u,c]}t(Wu,"prepareAndValidate",(()=>Uu));var Gu={};function Hu(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function ju(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Hu(n,t,e)}function qu(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length;let o=1;for(let e=a;e<s;++e)o*=n[e];const i=a<1?1:a;return{sliceRank:a,numUpdates:v(t.shape)/i,sliceSize:o,strides:[...K(n.slice(0,a)),1],outputSize:v(n)}}t(Gu,"validateUpdateShape",(()=>Hu)),t(Gu,"validateInput",(()=>ju)),t(Gu,"calculateShapes",(()=>qu));var Ku={};t(Ku,"SELU_SCALEALPHA",(()=>Xu)),t(Ku,"SELU_SCALE",(()=>Yu));const Xu=1.7580993408473768,Yu=1.0507009873554805;var Zu={};t(Zu,"ERF_P",(()=>Ju)),t(Zu,"ERF_A1",(()=>Qu)),t(Zu,"ERF_A2",(()=>ec)),t(Zu,"ERF_A3",(()=>tc)),t(Zu,"ERF_A4",(()=>nc)),t(Zu,"ERF_A5",(()=>rc));const Ju=.3275911,Qu=.254829592,ec=-.284496736,tc=1.421413741,nc=-1.453152027,rc=1.061405429;var ac={};function sc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function oc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function ic(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function lc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function uc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function cc(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function pc(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function hc(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(ac,"mergeRealAndImagArrays",(()=>sc)),t(ac,"splitRealAndImagArrays",(()=>oc)),t(ac,"complexWithEvenIndex",(()=>ic)),t(ac,"complexWithOddIndex",(()=>lc)),t(ac,"getComplexWithIndex",(()=>uc)),t(ac,"assignToTypedArray",(()=>cc)),t(ac,"exponents",(()=>pc)),t(ac,"exponent",(()=>hc));var dc={};t(dc,"decodeEinsumEquation",(()=>gc)),t(dc,"getEinsumPermutation",(()=>yc)),t(dc,"checkEinsumDimSizes",(()=>bc)),t(dc,"getEinsumComputePath",(()=>xc)),t(dc,"isIdentityPermutation",(()=>wc));const fc="->",mc=/->/g;function gc(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(mc,"").length)/fc.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split(fc);b(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const l=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<s[e].length;++t)l[e].push(i.indexOf(s[e][t]))}const u=i.length,c=[];for(let e=a.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function yc(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function bc(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:b(r[t[e][n]]===a[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function xc(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=kc(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}}function wc(e){return e.every(((e,t)=>e===t))}function kc(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var vc={};function Nc(e,t,n=0){let r=[];if("number"==typeof t)b(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{b(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const r=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-r}b(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(vc,"prepareSplitSize",(()=>Nc));var Sc={};function Ic(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Tc(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Ec(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(Sc,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>Ic)),t(Sc,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>Tc)),t(Sc,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>Ec));var $c={};function Cc(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Ac(e,t){return`size ${e} must be non-negative, not ${t}`}function Rc(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function _c(e,t){return`Input to reshape is a SparseTensor with ${v(e)}\n  dense values, but the requested shape requires a multiple of ${v(t)}. inputShape=${e} outputShape= ${t}`}function Dc(e,t){return`Input to reshape is a tensor with ${v(e)} dense values, but the requested shape has ${v(t)}. inputShape=${e} outputShape=${t}`}t($c,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>Cc)),t($c,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>Ac)),t($c,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>Rc)),t($c,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>_c)),t($c,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>Dc));var Fc={};function Oc(){return"segment ids must be >= 0"}function Mc(){return"segment ids are not increasing"}function Lc(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function zc(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Bc(e){try{return e.map((e=>_a(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Pc(e){return e.map((e=>Ra(e)))}t(Fc,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>Oc)),t(Fc,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>Mc)),t(Fc,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>Lc)),t(Fc,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>zc)),n(zl,jl),n(zl,sl),n(zl,tu),n(zl,au),n(zl,xu),n(zl,Pl),n(zl,Fu),n(zl,Mu),n(zl,Wu),n(zl,Gu),n(zl,Ku),n(zl,Zu),n(zl,Ar),n(zl,ac),n(zl,dc),n(zl,vc),n(zl,Sc),n(zl,$c),n(zl,Fc);var Vc={};function Wc(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||Uc)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function Uc(e,t){return e>t?1:e<t?-1:0}function Gc(e,t,n,r,a){return qc(e,t,n,r,a,0)}function Hc(e,t,n,r,a,s){return qc(e,t,n,r,a,0,!1,s,!0)}function jc(e,t,n,r,a,s){return qc(e,t,n,r,a,s,!0)}function qc(e,t,n,r,a,s,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Yc);const c=s>0?-.5/s:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=Kc(e,s,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*Xc(r,c,o),t.score<=a)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(s),h.push(t.score)):t.score>a&&Wc(u,t,Yc))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function Kc(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),h=Math.max(a[1],a[3]),d=(i-s)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(s,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Xc(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Yc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function Zc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=zi(e,"int32"),a=zi([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),o=t*e.length;a.values.set(s,o)}return a.toTensor()}function Jc(){return gs}function Qc(){return gs.memory()}function ep(e,t){return gs.tidy(e,t)}function tp(e){cs(e).forEach((e=>e.dispose()))}function np(e){return gs.keep(e)}function rp(e,t,n=1){return gs.registerBackend(e,t,n)}function ap(e,t){b(j(e),(()=>"The f passed in variableGrads(f) must be a function")),b(null==t||Array.isArray(t)&&t.every((e=>e instanceof qa)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in gs.registeredVariables)t.push(gs.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,a=t.length;b((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`));const{value:s,grads:o}=gs.gradients(e,t,null,!0);b(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),b(0===s.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:s,grads:i}}function sp(e){return gs.customGrad(e)}t(Vc,"nonMaxSuppressionV3Impl",(()=>Gc)),t(Vc,"nonMaxSuppressionV4Impl",(()=>Hc)),t(Vc,"nonMaxSuppressionV5Impl",(()=>jc)),t(Vc,"whereImpl",(()=>Zc)),Ga=function(e){ie().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const op=Cs({concat_:function(e,t=0){b(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=$s(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Pi(n[0]);const r=n,a={axis:t};return gs.runKernel(et,r,a)}});const ip=Cs({imag_:function(e){const t={input:Es(e,"input","imag")};return gs.runKernel(Vt,t)}});const lp=Cs({real_:function(e){const t={input:Es(e,"input","real")};return gs.runKernel(An,t)}});const up=Cs({slice_:function(e,t,n){const r=Es(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const a={x:r},s={begin:t,size:n};return gs.runKernel(Hn,a,s)}});const cp=Cs({split_:function(e,t,n=0){const r={x:Es(e,"x","split")},a={numOrSizeSplits:t,axis:n};return gs.runKernel(er,r,a)}});function pp(e,t="float32"){if("complex64"===t){const t=pp(e,"float32"),n=pp(e,"float32");return As(t,n)}const n=J(v(e),t);return gs.makeTensor(n,e,t)}const hp=Cs({zerosLike_:function(e){const t={x:Es(e,"x","zerosLike")};return gs.runKernel(Nr,t)}});const dp=Cs({fft_:function(e){b("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return gs.runKernel(Ct,t)}});const fp=Cs({rfft_:function(e,t){b("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let a;if(null!=t&&t<n){const r=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,a=up(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,a=op([e,pp(r)],e.shape.length-1),n=t}else a=e;const s=hp(a),o=Tu(As(a,s),[r,n]),i=dp(o),l=Math.floor(n/2)+1,u=lp(i),c=ip(i),p=cp(u,[l,n-l],u.shape.length-1),h=cp(c,[l,n-l],c.shape.length-1),d=a.shape.slice();return d[a.shape.length-1]=l,Tu(As(p[0],h[0]),d)}});const mp=Cs({ifft_:function(e){b("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return gs.runKernel(Pt,t)}});const gp=Cs({reverse_:function(e,t){const n={x:Es(e,"x","reverse")},r={dims:t};return gs.runKernel(Bn,n,r)}});function yp(e,t){if((B(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&B(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Rs(e,[],[],t)}const bp=Cs({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const a=Tu(e,[n,t]);r=mp(a)}else{const a=[n,2*(t-1)],s=Tu(lp(e),[n,t]),o=Tu(ip(e),[n,t]),i=gp(up(s,[0,1],[n,t-2]),1),l=vu(gp(up(o,[0,1],[n,t-2]),1),yp(-1)),u=op([s,i],1),c=op([o,l],1),p=Tu(As(u,c),[a[0],a[1]]);r=mp(p)}if(r=lp(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Tu(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var xp={};t(xp,"conv2d",(()=>Sp)),t(xp,"depthwiseConv2d",(()=>$p)),t(xp,"matMul",(()=>Ap));const wp=Cs({add_:function(e,t){let n=Es(e,"a","add"),r=Es(t,"b","add");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(Ae,a)}});const kp=Cs({conv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const i=Es(e,"x","conv2d","float32"),l=Es(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Tu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),b(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),bu("conv2d",r,o);const p="NHWC"===a?u.shape[3]:u.shape[1];b(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),b(gu(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},f=gs.runKernel(tt,h,d);return c?Tu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const vp=Cs({conv2DBackpropFilter_:function(e,t,n,r,a,s="NHWC",o){let i=e;3===e.rank&&(i=Tu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Tu(t,[1,t.shape[0],t.shape[1],t.shape[2]])),b(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),b(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),b(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===s?i.shape[3]:i.shape[1],c="NHWC"===s?l.shape[3]:l.shape[1];b(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),b(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),bu("conv2dDerFilter",a,o);const p={x:i,dy:l},h={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,filterShape:n};return gs.runKernel(nt,p,h)}});const Np=Cs({conv2DBackpropInput_:function(e,t,n,r,a,s="NHWC",o){b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=Tu(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),b(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),b(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),b(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===s?i[3]:i[1],p="NHWC"===s?l.shape[3]:l.shape[1];b(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),b(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),bu("conv2dDerInput",a,o);const h={dy:l,filter:n},d={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,inputShape:i},f=gs.runKernel(rt,h,d);return u?Tu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Sp=Cs({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Du(gs.state.gradientDepth,l)){let p=kp(e,t,n,r,a,s,o);return null!=i&&(p=wp(p,i)),_u(p,l,u,c)}const p=Es(e,"x","conv2d","float32"),h=Es(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Tu(p,[1,p.shape[0],p.shape[1],p.shape[2]])),b(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),b(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),bu("fused conv2d",r,o),b(d.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),b(gu(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),b("NHWC"===a,(()=>`Error in conv2d: got dataFormat of ${a} but only NHWC is currently supported.`));const m=lu(d.shape,h.shape,n,s,r,o);let g,y;null!=i&&(g=Es(i,"bias","fused conv2d"),[g]=is(g,p),ll(m.outShape,g.shape)),null!=u&&(y=Es(u,"prelu weights","fused conv2d"));const x=(e,t)=>{const[a,o,i,u]=t,c=Au(e,i,l);b(mu(s),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const p=[Np(o.shape,c,a,n,r),vp(o,c,a.shape,n,r)];if(null!=u){const e=Ru(u,c);p.push(e)}return p},w={x:d,filter:h,bias:g,preluActivationWeights:y},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return sp(((e,t,n)=>{let r=gs.runKernel($r,w,k);return n([t,e,r]),f&&(r=Tu(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h)}return sp(((e,t,n,r)=>{let a=gs.runKernel($r,w,k);return r([t,e,a,n]),f&&(a=Tu(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}))(d,h,g)}});const Ip=Cs({depthwiseConv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const i=Es(e,"x","depthwiseConv2d","float32"),l=Es(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Tu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),b(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),b(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),bu("depthwiseConv2d",r,o);const p={x:u,filter:l},h={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},d=gs.runKernel(dt,p,h);return c?Tu(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Tp=Cs({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a,s=[1,1],o){let i=e;3===e.rank&&(i=Tu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Tu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:a,dimRoundingMode:o,dilations:s,filterShape:n};return gs.runKernel(ft,u,c)}});const Ep=Cs({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a,s=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=Tu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:a,dimRoundingMode:o,dilations:s,inputShape:e},p=gs.runKernel(mt,u,c);return l?Tu(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const $p=Cs({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Du(gs.state.gradientDepth,l)){let p=Ip(e,t,n,r,a,s,o);return null!=i&&(p=wp(p,i)),_u(p,l,u,c)}const p=Es(e,"x","depthwiseConv2d","float32"),h=Es(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Tu(p,[1,p.shape[0],p.shape[1],p.shape[2]])),b(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),b(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),b(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==s&&(s=[1,1]),b(gu(n,s),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),bu("fused depthwiseConv2d",r,o);const m=lu(d.shape,h.shape,n,s,r,o,!0);let g,y;null!=i&&(g=Es(i,"bias","fused conv2d"),[g]=is(g,p),ll(m.outShape,g.shape)),null!=u&&(y=Es(u,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{b(mu(s),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`));const[a,i,u,c]=t,p=Au(e,u,l),h=Ep(i.shape,p,a,n,r,s,o),d=Tp(i,p,a.shape,n,r,s,o);if(null!=c){return[h,d,Ru(g,p)]}return[h,d]},w={x:d,filter:h,bias:g,preluActivationWeights:y},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return sp(((e,t,n)=>{let r=gs.runKernel(Cr,w,k);return n([t,e,r]),f&&(r=Tu(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h)}return sp(((e,t,n,r)=>{let a=gs.runKernel(Cr,w,k);return r([t,e,a,n]),f&&(a=Tu(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}))(d,h,g)}});const Cp=Cs({matMul_:function(e,t,n=!1,r=!1){let a=Es(e,"a","matMul"),s=Es(t,"b","matMul");[a,s]=is(a,s);const o={a:a,b:s},i={transposeA:n,transposeB:r};return gs.runKernel(He,o,i)}});const Ap=Cs({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:i}){if(!1===Du(gs.state.gradientDepth,s)){let l=Cp(e,t,n,r);return null!=a&&(l=wp(l,a)),_u(l,s,o,i)}let l=Es(e,"a","fused matMul"),u=Es(t,"b","fused matMul");[l,u]=is(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=v(f),y=v(m);b(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=ll(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,d]),w=Tu(l,n?[g,c,h]:[g,h,c]),k=Tu(u,r?[y,d,p]:[y,p,d]);let N,S;null!=a&&(N=Es(a,"bias","fused matMul"),[N]=is(N,l),ll(x,N.shape)),null!=o&&(S=Es(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,l,u]=t,c=Au(Tu(e,l.shape),l,s);let p,h;if(n||r?!n&&r?(p=Cp(c,i,!1,!1),h=Cp(c,o,!0,!1)):n&&!r?(p=Cp(i,c,!1,!0),h=Cp(o,c,!1,!1)):(p=Cp(i,c,!0,!0),h=Cp(c,o,!0,!0)):(p=Cp(c,i,!1,!0),h=Cp(o,c,!0,!1)),null!=a){return[p,h,Ru(u,c)]}return[p,h]},T={a:w,b:k,bias:N,preluActivationWeights:S},E={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:i};if(null==a){return sp(((e,t,n)=>{const r=gs.runKernel(Er,T,E);return n([e,t,r]),{value:Tu(r,x),gradFunc:I}}))(w,k)}return sp(((e,t,n,r)=>{const a=gs.runKernel(Er,T,E);return r([e,t,a,n]),{value:Tu(a,x),gradFunc:I}}))(w,k,N)}});function Rp(e,t){w(e);const n=Ss(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Rs(e,null,n,t)}function _p(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return Rp(a,"float32")}Cs({hammingWindow_:function(e){return _p(e,.54,.46)}});const Dp=Cs({hannWindow_:function(e){return _p(e,.5,.5)}});function Fp(e,t,n){const r={shape:e,value:t,dtype:n};return gs.runKernel(At,{},r)}function Op(e,t,n){if(w(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Ss(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Rs(e,t,r,n)}const Mp=Cs({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push(up(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=op([up(e,s,t-r),Fp([r],a)]);o.push(i),s+=n}return 0===o.length?Op([],[0,t]):Tu(op(o),[o.length,t])}});Cs({stft_:function(e,t,n,r,a=Dp){var s;null==r&&(s=t,r=Math.floor(Math.pow(2,Math.ceil(Math.log(s)/Math.log(2)))));const o=Mp(e,t,n),i=vu(o,a(t));return fp(i,r)}});const Lp=Cs({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=Es(e,"image","cropAndResize"),i=Es(t,"boxes","cropAndResize","float32"),l=Es(n,"boxInd","cropAndResize","int32"),u=i.shape[0];b(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),b(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),b(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),b(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),b(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),b("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const c={image:o,boxes:i,boxInd:l},p={method:a,extrapolationValue:s,cropSize:r};return gs.runKernel(ct,c,p)}});const zp=Cs({flipLeftRight_:function(e){const t=Es(e,"image","flipLeftRight","float32");b(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return gs.runKernel(Rt,n,{})}});const Bp=Cs({tile_:function(e,t){const n=Es(e,"x","tile","string_or_numeric");b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},a={reps:t};return gs.runKernel(gr,r,a)}});const Pp=Cs({grayscaleToRGB_:function(e){const t=Es(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];b(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),b(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,Bp(t,a)}});const Vp=Cs({rotateWithOffset_:function(e,t,n=0,r=.5){const a=Es(e,"image","rotateWithOffset","float32");b(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const s={image:a},o={radians:t,fillValue:n,center:r};return gs.runKernel(Tr,s,o)}});function Wp(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),b(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),b(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),b(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),b(1===t.rank,(()=>"scores must be a 1D tensor")),b(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),b(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const Up=Cs({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=Es(e,"boxes","nonMaxSuppression","float32"),o=Es(t,"scores","nonMaxSuppression","float32"),i=Wp(s,o,n,r,a),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return gs.runKernel(xn,{boxes:s,scores:o},l)}});const Gp=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=Es(e,"boxes","nonMaxSuppressionAsync"),o=Es(t,"scores","nonMaxSuppressionAsync"),i=Wp(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const l=await Promise.all([s.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=Gc(u,c,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),Rp(p,"int32")};const Hp=Cs({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=Es(e,"boxes","nonMaxSuppression"),i=Es(t,"scores","nonMaxSuppression"),l=Wp(o,i,n,r,a,s),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:s=l.softNmsSigma},p=gs.runKernel(kn,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const jp=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=Es(e,"boxes","nonMaxSuppressionAsync"),i=Es(t,"scores","nonMaxSuppressionAsync"),l=Wp(o,i,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold,s=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=jc(c,p,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Rp(h,"int32"),selectedScores:Rp(d)}};const qp=Cs({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=Es(e,"boxes","nonMaxSuppression"),i=Es(t,"scores","nonMaxSuppression"),l=Wp(o,i,n,r,a,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:s},p=gs.runKernel(wn,u,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Kp=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=Es(e,"boxes","nonMaxSuppressionAsync"),i=Es(t,"scores","nonMaxSuppressionAsync"),l=Wp(o,i,n,r,a,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=Hc(h,d,u,c,p,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Rp(f,"int32"),validOutputs:yp(m,"int32")}};const Xp=Cs({resizeBilinear_:function(e,t,n=!1,r=!1){const a=Es(e,"images","resizeBilinear");b(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),b(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),b(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=Tu(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},l={alignCorners:n,halfPixelCenters:r,size:t},u=gs.runKernel(Mn,i,l);return o?Tu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Yp=Cs({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const a=Es(e,"images","resizeNearestNeighbor");b(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),b(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),b("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),b(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=Tu(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},l={alignCorners:n,halfPixelCenters:r,size:t},u=gs.runKernel(Fn,i,l);return o?Tu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Zp=Cs({bincount_:function(e,t,n){const r=Es(e,"x","bincount"),a=Es(t,"weights","bincount");b("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),b(a.size===r.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`));const s={x:r,weights:a},o={size:n};return gs.runKernel(qe,s,o)}});const Jp=Cs({lessEqual_:function(e,t){let n=Es(e,"a","lessEqual","string_or_numeric"),r=Es(t,"b","lessEqual","string_or_numeric");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(qt,a)}});const Qp=Cs({greater_:function(e,t){let n=Es(e,"a","greater","string_or_numeric"),r=Es(t,"b","greater","string_or_numeric");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(Lt,a)}});const eh=Cs({floorDiv_:function(e,t){let n=Es(e,"a","floorDiv"),r=Es(t,"b","floorDiv");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(Dt,a)}});const th=Cs({div_:function(e,t){let n=Es(e,"a","div"),r=Es(t,"b","div");if([n,r]=is(n,r),"int32"===n.dtype&&"int32"===r.dtype)return eh(n,r);const a={a:n,b:r};return gs.runKernel(wt,a,{})}});const nh=Cs({sub_:function(e,t){let n=Es(e,"a","sub"),r=Es(t,"b","sub");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(dr,a)}});const rh=Cs({round_:function(e){const t={x:Es(e,"x","round")};return gs.runKernel(Pn,t)}});const ah=Cs({broadcastTo_:function(e,t){let n=Es(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Tu(n,e)}const a=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===s.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Pi(n);const o={x:n},i={reps:s};return gs.runKernel(gr,o,i)}});const sh=Cs({where_:function(e,t,n){const r=Es(t,"a","where"),a=Es(n,"b","where"),s=Es(e,"condition","where","bool"),o=ll(ll(s.shape,r.shape),a.shape),i={condition:ah(s,o),t:ah(r,o),e:ah(a,o)};return gs.runKernel(Un,i)}});function oh(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return gs.runKernel(Cn,{},a)}const ih=Cs({threshold_:function(e,t="binary",n=!1,r=.5){const a=Es(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,i,l,u,c=vu(Rp([r]),255);if(b(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),b(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),b("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),b("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[o,i,l]=cp(a,[1,1,1],-1);const e=vu(o,.2989),t=vu(i,.587),n=vu(l,.114);u=wp(wp(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,r,a,s,o,i,l=Rp([-1]),u=Rp([0]),c=Rp([0]);for(let p=0;p<e.size-1;p++){n=up(e,0,p+1),r=up(e,p+1),o=th(Cu(n),t),i=th(Cu(r),t);const h=Cu(vu(n,oh(0,n.size)));a=th(h,Cu(n));const d=Fp(r.shape,n.size),f=wp(oh(0,r.size),d),m=vu(r,f);s=th(Cu(m),Cu(r));const g=nh(a,s),y=nh(a,s),b=vu(o,i);c=vu(vu(b,g),y);const x=Qp(c,u);u=sh(x,c,u),l=sh(x,Rp([p]),l)}return l}(Zp(Bi(rh(u),"int32"),_s([]),256),s)}const p=n?Jp(u,c):Qp(u,c);return Bi(vu(p,255),"int32")}});const lh=Cs({transform_:function(e,t,n="nearest",r="constant",a=0,s){const o=Es(e,"image","transform","float32"),i=Es(t,"transforms","transform","float32");b(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),b(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),b(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return gs.runKernel(br,l,u)}});const uh=Cs({greaterEqual_:function(e,t){let n=Es(e,"a","greaterEqual","string_or_numeric"),r=Es(t,"b","greaterEqual","string_or_numeric");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(zt,a)}});const ch=Cs({logicalAnd_:function(e,t){const n=Es(e,"a","logicalAnd","bool"),r=Es(t,"b","logicalAnd","bool");ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(Zt,a)}});const ph=Cs({stack_:function(e,t=0){const n=$s(e,"tensors","stack","string_or_numeric");b(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&b(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,a={axis:t};return gs.runKernel(Sn,r,a)}});const hh=Cs({unstack_:function(e,t=0){const n=Es(e,"x","unstack","string_or_numeric");b(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},a={axis:t};return gs.runKernel(kr,r,a)}});const dh=Cs({bandPart_:function(e,t,n){b(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),b(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Es(e,"a","bandPart");b(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=Tu(oh(0,s,1,"int32"),[-1,1]),l=oh(0,o,1,"int32"),u=nh(i,l),c=ch(Jp(u,yp(+t,"int32")),uh(u,yp(-n,"int32"))),p=pp([s,o],r.dtype);return Tu(ph(hh(Tu(r,[-1,s,o])).map((e=>sh(c,e,p)))),a)}});const fh=Cs({abs_:function(e){const t=Es(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return gs.runKernel(Qe,e)}{const e={x:t};return gs.runKernel(Ee,e)}}});const mh=Cs({max_:function(e,t=null,n=!1){const r={x:Es(e,"x","max")},a={reductionIndices:t,keepDims:n};return gs.runKernel(nn,r,a)}});const gh=Cs({min_:function(e,t=null,n=!1){const r={x:Es(e,"x","min")},a={axis:t,keepDims:n};return gs.runKernel(pn,r,a)}});const yh=Cs({pow_:function(e,t){let n=Es(e,"base","pow"),r=Es(t,"exp","pow");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(Tn,a)}});const bh=Cs({sqrt_:function(e){const t={x:Es(e,"x","sqrt","float32")};return gs.runKernel(Zn,t)}});const xh=Cs({square_:function(e){const t=Es(e,"x","square");return gs.runKernel("Square",{x:t},{})}});function wh(e,t,n=null){if(0===e.rank)return fh(e);if(1!==e.rank&&null===n)return wh(Tu(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Cu(fh(e),n);if(t===1/0)return mh(fh(e),n);if(t===-1/0)return gh(fh(e),n);if("euclidean"===t||2===t)return bh(Cu(yh(fh(e),yp(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return mh(Cu(fh(e),n[0]),n[1]-1);if(t===1/0)return mh(Cu(fh(e),n[1]),n[0]);if(t===-1/0)return gh(Cu(fh(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return bh(Cu(xh(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const kh=Cs({norm_:function(e,t="euclidean",n=null,r=!1){const a=wh(e=Es(e,"x","norm"),t,n);let s=a.shape;if(r){const t=_(n,e.shape);s=Yl(a.shape,t)}return Tu(a,s)}});const vh=Cs({squeeze_:function(e,t){const n=Es(e,"x","squeeze");return Tu(n,D(n.shape,t).newShape)}});const Nh=Cs({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,b(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)b(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=cp(e,e.shape[0],0).map((e=>vh(e,[0])));b(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(gs.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=vu(Cu(vu(n[r],e)),n[r]);e=nh(e,t)}return th(e,kh(e,"euclidean"))})));return t?ph(n,0):n}});const Sh=Cs({expandDims_:function(e,t=0){const n=Es(e,"x","expandDims","string_or_numeric");b(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},a={dim:t};return gs.runKernel(Et,r,a)}});const Ih=Cs({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=zi([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=Tu(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Bp(Sh(o,0),[n[0],1,1]);if(2===n.length)return Bp(Sh(Sh(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Bp(Sh(Sh(Sh(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Th=Cs({neg_:function(e){const t={x:Es(e,"x","neg")};return gs.runKernel(yn,t)}});const Eh=Cs({transpose_:function(e,t){const n=Es(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{b(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},a={perm:t};return gs.runKernel(xr,r,a)}});function $h(e,t=!1){return gs.tidy((()=>{b(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=Ih(n),s=Pi(e);const o=Op([[1]],[1,1]);let i=Pi(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=s,l=i,u=a;[i,s,a]=gs.tidy((()=>{const t=up(s,[e,e],[n-e,1]),l=kh(t),u=up(s,[e,e],[1,1]),c=sh(Qp(u,0),Op([[-1]]),Op([[1]])),p=nh(u,vu(c,l)),h=th(t,p);i=1===h.shape[0]?Pi(o):op([o,up(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=Th(th(Cp(c,p),l)),f=up(s,[e,0],[n-e,r]),m=vu(d,i),g=Eh(i);if(0===e)s=nh(f,Cp(m,Cp(g,f)));else{const t=nh(f,Cp(m,Cp(g,f)));s=op([up(s,[0,0],[e,r]),t],0)}const y=Eh(m),b=up(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=nh(b,Cp(Cp(b,i),y));else{const t=nh(b,Cp(Cp(b,i),y));a=op([up(a,[0,0],[n,e]),t],1)}return[i,s,a]})),tp([t,l,u])}return!t&&n>r&&(a=up(a,[0,0],[n,r]),s=up(s,[0,0],[r,r])),[a,s]}))}const Ch=Cs({qr_:function(e,t=!1){if(b(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return $h(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=hh(Tu(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach((e=>{const[n,r]=$h(e,t);a.push(n),s.push(r)}));return[Tu(ph(a,0),e.shape),Tu(ph(s,0),e.shape)]}}});var Ah;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ah||(Ah={}));const Rh=Cs({mean_:function(e,t=null,n=!1){const r={x:Es(e,"x","mean")},a={axis:t,keepDims:n};return gs.runKernel(cn,r,a)}});const _h=Cs({notEqual_:function(e,t){let n=Es(e,"a","notEqual","string_or_numeric"),r=Es(t,"b","notEqual","string_or_numeric");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(bn,a)}});function Dh(e,t="float32"){if("complex64"===t){const t=Dh(e,"float32"),n=pp(e,"float32");return As(t,n)}const n=Z(v(e),t);return gs.makeTensor(n,e,t)}const Fh=Cs({computeWeightedLoss_:function(e,t,n=Ah.SUM_BY_NONZERO_WEIGHTS){const r=Es(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=Es(t,"weights","computeWeightedLoss"));const s=null==a?r:vu(r,a);if(n===Ah.NONE)return s;if(n===Ah.SUM)return Cu(s);if(n===Ah.MEAN){if(null==a)return Rh(s);{const e=r.size/a.size,t=th(Cu(s),Cu(a));return e>1?th(t,yp(e)):t}}if(n===Ah.SUM_BY_NONZERO_WEIGHTS){if(null==a)return th(Cu(s),yp(r.size));{const e=vu(a,Dh(r.shape)),t=Bi(Cu(_h(e,yp(0))),"float32");return th(Cu(s),t)}}throw Error(`Unknown reduction: ${n}`)}});Cs({absoluteDifference_:function(e,t,n,r=Ah.SUM_BY_NONZERO_WEIGHTS){const a=Es(e,"labels","absoluteDifference"),s=Es(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Es(n,"weights","absoluteDifference")),x(a.shape,s.shape,"Error in absoluteDifference: ");const i=fh(nh(a,s));return Fh(i,o,r)}});Cs({cosineDistance_:function(e,t,n,r,a=Ah.SUM_BY_NONZERO_WEIGHTS){const s=Es(e,"labels","cosineDistance"),o=Es(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Es(r,"weights","cosineDistance")),x(s.shape,o.shape,"Error in cosineDistance: ");const l=yp(1),u=nh(l,Cu(vu(s,o),n,!0));return Fh(u,i,a)}});Cs({hingeLoss_:function(e,t,n,r=Ah.SUM_BY_NONZERO_WEIGHTS){let a=Es(e,"labels","hingeLoss");const s=Es(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Es(n,"weights","hingeLoss")),x(a.shape,s.shape,"Error in hingeLoss: ");const i=yp(1);a=nh(vu(yp(2),a),i);const l=Su(nh(i,vu(a,s)));return Fh(l,o,r)}});const Oh=Cs({minimum_:function(e,t){let n=Es(e,"a","minimum"),r=Es(t,"b","minimum");[n,r]=is(n,r),"bool"===n.dtype&&(n=Bi(n,"int32"),r=Bi(r,"int32")),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(hn,a)}});Cs({huberLoss_:function(e,t,n,r=1,a=Ah.SUM_BY_NONZERO_WEIGHTS){const s=Es(e,"labels","huberLoss"),o=Es(t,"predictions","huberLoss");let i=null;null!=n&&(i=Es(n,"weights","huberLoss")),x(s.shape,o.shape,"Error in huberLoss: ");const l=yp(r),u=fh(nh(o,s)),c=Oh(u,l),p=nh(u,c),h=wp(vu(yp(.5),xh(c)),vu(l,p));return Fh(h,i,a)}});const Mh=Cs({log_:function(e){const t={x:Es(e,"x","log","float32")};return gs.runKernel(Xt,t)}});Cs({logLoss_:function(e,t,n,r=1e-7,a=Ah.SUM_BY_NONZERO_WEIGHTS){const s=Es(e,"labels","logLoss"),o=Es(t,"predictions","logLoss");let i=null;null!=n&&(i=Es(n,"weights","logLoss")),x(s.shape,o.shape,"Error in logLoss: ");const l=yp(1),u=yp(r),c=Th(vu(s,Mh(wp(o,u)))),p=vu(nh(l,s),Mh(wp(nh(l,o),u))),h=nh(c,p);return Fh(h,i,a)}});const Lh=Cs({squaredDifference_:function(e,t){let n=Es(e,"a","squaredDifference"),r=Es(t,"b","squaredDifference");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(ir,a,{})}});Cs({meanSquaredError_:function(e,t,n,r=Ah.SUM_BY_NONZERO_WEIGHTS){const a=Es(e,"labels","meanSquaredError"),s=Es(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Es(n,"weights","meanSquaredError")),x(a.shape,s.shape,"Error in meanSquaredError: ");const i=Lh(a,s);return Fh(i,o,r)}});const zh=Cs({exp_:function(e){const t={x:Es(e,"x","exp")};return gs.runKernel(Tt,t)}});const Bh=Cs({log1p_:function(e){const t={x:Es(e,"x","log1p")};return gs.runKernel(Yt,t)}});Cs({sigmoidCrossEntropy_:function(e,t,n,r=0,a=Ah.SUM_BY_NONZERO_WEIGHTS){let s=Es(e,"multiClassLabels","sigmoidCrossEntropy");const o=Es(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Es(n,"weights","sigmoidCrossEntropy")),x(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=yp(r),t=yp(1),n=yp(.5);s=wp(vu(s,nh(t,e)),vu(n,e))}const l=function(e,t){const n=Es(e,"labels","sigmoidCrossEntropyWithLogits"),r=Es(t,"logits","sigmoidCrossEntropyWithLogits");x(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=Su(r),s=vu(r,n),o=Bh(zh(Th(fh(r))));return wp(nh(a,s),o)}(s,o);return Fh(l,i,a)}});const Ph=Cs({logSumExp_:function(e,t=null,n=!1){const r=Es(e,"x","logSumExp"),a=_(t,r.shape),s=mh(r,a,!0),o=nh(r,s),i=zh(o),l=Cu(i,a),u=Mh(l),c=wp(Tu(s,u.shape),u);if(n){const e=Yl(c.shape,a);return Tu(c,e)}return c}});Cs({softmaxCrossEntropy_:function(e,t,n,r=0,a=Ah.SUM_BY_NONZERO_WEIGHTS){let s=Es(e,"onehotLabels","softmaxCrossEntropy");const o=Es(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Es(n,"weights","softmaxCrossEntropy")),x(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=yp(r),t=yp(1),n=yp(s.shape[1]);s=wp(vu(s,nh(t,e)),th(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return sp(((e,t,r)=>{const a=Ph(t,[n],!0),s=nh(Bi(t,"float32"),a);r([e,s]);const o=Th(vu(s,e));return{value:Cu(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=Yl(e.shape,[n]);return[vu(Tu(e,s),nh(Bi(r,"float32"),zh(a))),vu(Tu(e,s),nh(zh(a),Bi(r,"float32")))]}}}))(e,t)}(s,o);return Fh(l,i,a)}});Cs({sparseFillEmptyRows_:function(e,t,n,r){const a=Es(e,"indices","sparseFillEmptyRows","int32"),s=Es(t,"values","sparseFillEmptyRows"),o=Es(n,"denseShape","sparseFillEmptyRows","int32"),i=Es(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:a,values:s,denseShape:o,defaultValue:i},u=gs.runKernel(nr,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});Cs({sparseReshape_:function(e,t,n){const r=Es(e,"inputIndices","sparseReshape","int32"),a=Es(t,"inputShape","sparseReshape","int32"),s=Es(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const o={inputIndices:r,inputShape:a,newShape:s},i=gs.runKernel(rr,o);return{outputIndices:i[0],outputShape:i[1]}}});Cs({sparseSegmentMean_:function(e,t,n){const r=Es(e,"data","sparseSegmentMean"),a=Es(t,"indices","sparseSegmentMean","int32"),s=Es(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return gs.runKernel(ar,o)}});Cs({sparseSegmentSum_:function(e,t,n){const r=Es(e,"data","sparseSegmentSum"),a=Es(t,"indices","sparseSegmentSum","int32"),s=Es(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return gs.runKernel(sr,o)}});Cs({stringNGrams_:function(e,t,n,r,a,s,o,i){const l=Es(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Es(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},p={data:l,dataSplits:u},h=gs.runKernel(cr,p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});Cs({stringSplit_:function(e,t,n=!0){const r=Es(e,"input","stringSplit","string"),a=Es(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const s={skipEmpty:n},o={input:r,delimiter:a},i=gs.runKernel(pr,o,s);return{indices:i[0],values:i[1],shape:i[2]}}});Cs({stringToHashBucketFast_:function(e,t){const n=Es(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return gs.runKernel(hr,a,r)}});const Vh=Cs({acos_:function(e){const t={x:Es(e,"x","acos")};return gs.runKernel($e,t)}});const Wh=Cs({acosh_:function(e){const t={x:Es(e,"x","acosh")};return gs.runKernel(Ce,t)}});Cs({addN_:function(e){b(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),b(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Es(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!S(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return gs.runKernel(Re,r)}});const Uh=Cs({all_:function(e,t=null,n=!1){const r={x:Es(e,"x","all","bool")},a={axis:t,keepDims:n};return gs.runKernel(_e,r,a)}});const Gh=Cs({any_:function(e,t=null,n=!1){const r={x:Es(e,"x","any","bool")},a={axis:t,keepDims:n};return gs.runKernel(De,r,a)}});const Hh=Cs({argMax_:function(e,t=0){const n={x:Es(e,"x","argMax")},r={axis:t};return gs.runKernel(Fe,n,r)}});const jh=Cs({argMin_:function(e,t=0){const n={x:Es(e,"x","argMin")},r={axis:t};return gs.runKernel(Oe,n,r)}});const qh=Cs({asin_:function(e){const t={x:Es(e,"x","asin")};return gs.runKernel(Me,t)}});const Kh=Cs({asinh_:function(e){const t={x:Es(e,"x","asinh")};return gs.runKernel(Le,t)}});const Xh=Cs({atan_:function(e){const t={x:Es(e,"x","atan")};return gs.runKernel(ze,t)}});const Yh=Cs({atan2_:function(e,t){let n=Es(e,"a","atan2"),r=Es(t,"b","atan2");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(Pe,a)}});const Zh=Cs({atanh_:function(e){const t={x:Es(e,"x","atanh")};return gs.runKernel(Be,t)}});const Jh=Cs({avgPool_:function(e,t,n,r,a){const s=Es(e,"x","avgPool","float32");b(gu(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=s,i=!1;3===s.rank&&(i=!0,o=Tu(s,[1,s.shape[0],s.shape[1],s.shape[2]])),b(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),bu("avgPool",r,a);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:a};let c=gs.runKernel(Ve,l,u);return c=Bi(c,s.dtype),i?Tu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qh=Cs({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){const o=Es(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=Tu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),b("NDHWC"===s,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),bu("avgPool3d",r,a);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s};let p=gs.runKernel(Ue,u,c);return p=Bi(p,i.dtype),l?Tu(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const ed=Cs({batchToSpaceND_:function(e,t,n){const r=Es(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));b(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),b(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),b(r.shape[0]%a==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const s={x:r},o={blockShape:t,crops:n};return gs.runKernel(je,s,o)}});const td=Cs({batchNorm_:function(e,t,n,r,a,s){null==s&&(s=.001);const o=Es(e,"x","batchNorm"),i=Es(t,"mean","batchNorm"),l=Es(n,"variance","batchNorm");let u,c;null!=a&&(u=Es(a,"scale","batchNorm")),null!=r&&(c=Es(r,"offset","batchNorm")),b(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),b(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),b(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p=function(e){let t;return t=0===e.rank||1===e.rank?Tu(e,[1,1,1,e.size]):2===e.rank?Tu(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Tu(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),h={x:p,scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:s},f=gs.runKernel(Ft,h,d);return Tu(f,o.shape)}});const nd=Cs({batchNorm2d_:function(e,t,n,r,a,s){const o=Es(e,"x","batchNorm"),i=Es(t,"mean","batchNorm"),l=Es(n,"variance","batchNorm");let u,c;return null!=a&&(u=Es(a,"scale","batchNorm")),null!=r&&(c=Es(r,"offset","batchNorm")),b(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),b(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),b(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),td(o,i,l,c,u,s)}});const rd=Cs({batchNorm3d_:function(e,t,n,r,a,s){const o=Es(e,"x","batchNorm"),i=Es(t,"mean","batchNorm"),l=Es(n,"variance","batchNorm");let u,c;return null!=a&&(u=Es(a,"scale","batchNorm")),null!=r&&(c=Es(r,"offset","batchNorm")),b(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),b(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),b(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),td(o,i,l,c,u,s)}});const ad=Cs({batchNorm4d_:function(e,t,n,r,a,s){const o=Es(e,"x","batchNorm"),i=Es(t,"mean","batchNorm"),l=Es(n,"variance","batchNorm");let u,c;return null!=a&&(u=Es(a,"scale","batchNorm")),null!=r&&(c=Es(r,"offset","batchNorm")),b(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),b(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),b(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),td(o,i,l,c,u,s)}});Cs({broadcastArgs_:function(e,t){const n=Es(e,"s0","broadcastArgs","int32"),r=Es(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const a={s0:n,s1:r};return gs.runKernel(Ke,a)}});const sd=Cs({ceil_:function(e){const t={x:Es(e,"x","ceil","float32")};return gs.runKernel(Ye,t)}});const od=Cs({clipByValue_:function(e,t,n){const r=Es(e,"x","clipByValue");b(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const a={x:r},s={clipValueMin:t,clipValueMax:n};return gs.runKernel(Ze,a,s)}});const id=Cs({concat1d_:function(e){return op(e,0)}});const ld=Cs({concat2d_:function(e,t){return op(e,t)}});const ud=Cs({concat3d_:function(e,t){return op(e,t)}});const cd=Cs({concat4d_:function(e,t){return op(e,t)}});const pd=Cs({conv1d_:function(e,t,n,r,a="NWC",s=1,o){const i=Es(e,"x","conv1d"),l=Es(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=Tu(i,[1,i.shape[0],i.shape[1]])),b(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),b(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),bu("conv1d",r,o),b(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),b(gu(n,s),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`)),b("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const p=Tu(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=Tu(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=kp(h,p,[1,n],r,"NHWC",[1,s],o);return Tu(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const hd=Cs({conv2dTranspose_:function(e,t,n,r,a,s){const o=Es(e,"x","conv2dTranspose"),i=Es(t,"filter","conv2dTranspose");return Np(n,o,i,r,a,"NHWC",s)}});const dd=Cs({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){const o=Es(e,"x","conv3d"),i=Es(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Tu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),b(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),b(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),b(gu(n,s),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),b("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:a,dilations:s},h=gs.runKernel(at,c,p);return u?Tu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const fd=Cs({conv3DBackpropInput_:function(e,t,n,r,a){b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let s=e,o=t,i=!1;4===t.rank&&(i=!0,o=Tu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const l=s[4],u=o.shape[4];b(5===s.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`)),b(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),b(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),b(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),b(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:a,strides:r,inputShape:s},h=gs.runKernel(ot,c,p);return i?Tu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const md=Cs({conv3dTranspose_:function(e,t,n,r,a){const s=Es(e,"x","conv3dTranspose"),o=Es(t,"filter","conv3dTranspose");return fd(n,s,o,r,a)}});const gd=Cs({cos_:function(e){const t={x:Es(e,"x","cos","float32")};return gs.runKernel(it,t)}});const yd=Cs({cosh_:function(e){const t={x:Es(e,"x","cosh","float32")};return gs.runKernel(lt,t)}});const bd=Cs({cumsum_:function(e,t=0,n=!1,r=!1){const a={x:Es(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:r};return gs.runKernel(ut,a,s)}});Cs({denseBincount_:function(e,t,n,r=!1){const a=Es(e,"x","denseBincount"),s=Es(t,"weights","denseBincount");b("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),b(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),b(s.size===a.size||0===s.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`));const o={x:a,weights:s},i={size:n,binaryOutput:r};return gs.runKernel(pt,o,i)}});const xd=Cs({depthToSpace_:function(e,t,n="NHWC"){const r=Es(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];b(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),b(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),b(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),b(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return gs.runKernel(ht,i,l)}});const wd=Cs({dilation2d_:function(e,t,n,r,a=[1,1],s="NHWC"){const o=Es(e,"x","dilation2d"),i=Es(t,"filter","dilation2d");b(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),b(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),b("NHWC"===s,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`));let l=o,u=!1;3===o.rank&&(l=Tu(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);const c={x:l,filter:i},p={strides:n,pad:r,dilations:a},h=gs.runKernel(yt,c,p);return u?Tu(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const kd=Cs({equal_:function(e,t){let n=Es(e,"a","equal","string_or_numeric"),r=Es(t,"b","equal","string_or_numeric");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(It,a)}});const vd=Cs({divNoNan_:function(e,t){let n=Es(e,"a","div"),r=Es(t,"b","div");[n,r]=is(n,r);const a=th(n,r),s=hp(a),o=kd(r,s);return sh(o,s,a)}});Cs({einsum_:function(e,...t){const n=t.map(((e,t)=>Es(e,`tensors${t}`,"einsum"))),r={equation:e};return gs.runKernel(kt,n,r)}});const Nd=Cs({erf_:function(e){let t=Es(e,"x","erf");b("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Bi(t,"float32"));const n={x:t};return gs.runKernel(St,n)}});const Sd=Cs({expm1_:function(e){const t={x:Es(e,"x","expm1")};return gs.runKernel($t,t)}});const Id=Cs({floor_:function(e){const t={x:Es(e,"x","floor","float32")};return gs.runKernel(_t,t)}});const Td=Cs({gather_:function(e,t,n=0,r=0){const a={x:Es(e,"x","gather"),indices:Es(t,"indices","gather","int32")},s={axis:n,batchDims:r};return gs.runKernel(Ot,a,s)}});const Ed=Cs({isFinite_:function(e){const t={x:Es(e,"x","isFinite")};return gs.runKernel(Wt,t)}});const $d=Cs({isInf_:function(e){const t={x:Es(e,"x","isInf")};return gs.runKernel(Ut,t)}});const Cd=Cs({isNaN_:function(e){const t={x:Es(e,"x","isNaN")};return gs.runKernel(Gt,t)}});const Ad=Cs({less_:function(e,t){let n=Es(e,"a","less","string_or_numeric"),r=Es(t,"b","less","string_or_numeric");[n,r]=is(n,r),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(jt,a)}});const Rd=Cs({localResponseNormalization_:function(e,t=5,n=1,r=1,a=.5){const s=Es(e,"x","localResponseNormalization");b(4===s.rank||3===s.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`)),b(I(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=s,i=!1;3===s.rank&&(i=!0,o=Tu(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:a},c=gs.runKernel(en,l,u);return i?Tu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const _d=Cs({softplus_:function(e){const t={x:Es(e,"x","softplus")};return gs.runKernel(Yn,t)}});const Dd=Cs({logSigmoid_:function(e){const t=Es(e,"x","logSigmoid");return sp((e=>({value:Th(_d(Th(e))),gradFunc:t=>vu(t,Eu(Th(e)))})))(t)}});const Fd=Cs({logSoftmax_:function(e,t=-1){const n=Es(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return sp(((e,n)=>{const r=mh(e,t,!0),a=nh(e,r),s=nh(Bi(a,"float32"),Mh(Cu(zh(a),t,!0)));n([s]);return{value:s,gradFunc:(e,n)=>{const[r]=n,a=zh(r);return nh(e,vu(Cu(e,t,!0),a))}}}))(n)}});const Od=Cs({logicalNot_:function(e){const t={x:Es(e,"x","logicalNot","bool")};return gs.runKernel(Jt,t)}});const Md=Cs({logicalOr_:function(e,t){const n=Es(e,"a","logicalOr","bool"),r=Es(t,"b","logicalOr","bool");ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(Qt,a)}});const Ld=Cs({maxPool_:function(e,t,n,r,a){const s=Es(e,"x","maxPool");let o=s,i=!1;3===s.rank&&(i=!0,o=Tu(s,[1,s.shape[0],s.shape[1],s.shape[2]])),b(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),b(gu(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),bu("maxPool",r,a);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:a},c=gs.runKernel(an,l,u);return i?Tu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const zd=Cs({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){const o=Es(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=Tu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),b("NDHWC"===s,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),bu("maxPool3d",r,a);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s},p=gs.runKernel(on,u,c);return l?Tu(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});Cs({maxPoolWithArgmax_:function(e,t,n,r,a=!1){const s={x:Es(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},i=gs.runKernel(un,s,o);return{result:i[0],indexes:i[1]}}});const Bd=Cs({maximum_:function(e,t){let n=Es(e,"a","maximum"),r=Es(t,"b","maximum");[n,r]=is(n,r),"bool"===n.dtype&&(n=Bi(n,"int32"),r=Bi(r,"int32")),ll(n.shape,r.shape);const a={a:n,b:r};return gs.runKernel(rn,a)}});const Pd=Cs({mirrorPad_:function(e,t,n){b("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Es(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");b(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let e=0;e<r.rank;e++)b(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),b(t[e][0]>=0&&t[e][0]<=r.shape[e]-a&&t[e][1]>=0&&t[e][1]<=r.shape[e]-a,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-a} or less than 0 for input of shape ${r.shape}`));const s={paddings:t,mode:n},o={x:r};return gs.runKernel(dn,o,s)}});const Vd=Cs({mod_:function(e,t){let n=Es(e,"a","mod"),r=Es(t,"b","mod");[n,r]=is(n,r);const a={a:n,b:r};return gs.runKernel(fn,a)}});const Wd=Cs({moments_:function(e,t=null,n=!1){const r=_(t,(e=Es(e,"x","moments")).shape),a=Rh(e,r,n);let s=a.shape;n||(s=Yl(a.shape,r));const o=xh(nh(Bi(e,"float32"),Tu(a,s)));return{mean:a,variance:Rh(o,r,n)}}});Cs({multinomial_:function(e,t,n,r=!1){const a=Es(e,"logits","multinomial"),s=a.size,o=a.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Tu(a,[1,-1]):a},l={numSamples:t,seed:n,normalized:r},u=gs.runKernel(mn,i,l);return 1===o?Tu(u,[u.size]):u}});const Ud=Cs({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Es(e,"indices","oneHot","int32")},s={depth:t,onValue:n,offValue:r};return gs.runKernel(Nn,a,s)}});const Gd=Cs({onesLike_:function(e){const t={x:Es(e,"x","onesLike")};return gs.runKernel(vn,t)}});const Hd=Cs({pad_:function(e,t,n=0){const r=Es(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},s={x:r};return gs.runKernel(In,s,a)}});const jd=Cs({prod_:function(e,t=null,n=!1){let r=Es(e,"x","prod");"bool"===r.dtype&&(r=Bi(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return gs.runKernel($n,a,s)}});var qd={},Kd=s("hZ5cD"),Xd=s("i0FBE"),Yd=s("6vxF6"),Zd=s("gjQE6"),Jd=s("i6RlM"),Qd=s("8D147"),ef={};!function(e,t){var n,r=this,a=256,o=t.pow(a,6),i=t.pow(2,52),l=2*i,u=255;function c(s,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[s,m(e)]:null==s?function(){try{var t;return n&&(t=n.randomBytes)?t=t(a):(t=new Uint8Array(a),(r.crypto||r.msCrypto).getRandomValues(t)),m(t)}catch(t){var s=r.navigator,o=s&&s.plugins;return[+new Date,r,o,r.screen,m(e)]}}():s,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),e),(u.pass||c||function(e,n,r,a){return a&&(a.S&&h(a,b),e.state=function(){return h(b,{})}),r?(t.random=e,n):e})(x,y,"global"in u?u.global:this==t,u.state)}function p(e){var t,n=e.length,r=this,s=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<a;)i[s]=s++;for(s=0;s<a;s++)i[s]=i[o=u&o+e[s%n]+(t=i[s])],i[o]=t;(r.g=function(e){for(var t,n=0,s=r.i,o=r.j,i=r.S;e--;)t=i[s=u&s+1],n=n*a+i[u&(i[s]=i[o=u&o+t])+(i[o]=t)];return r.i=s,r.j=o,n})(a)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function f(e,t){for(var n,r=e+"",a=0;a<r.length;)t[u&a]=u&(n^=19*t[u&a])+r.charCodeAt(a++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(t.seedrandom=c,f(t.random(),e),ef){ef=c;try{n=s("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd&&define((function(){return c}))}([],Math),ef.alea=Kd,ef.xor128=Xd,ef.xorwow=Yd,ef.xorshift7=Zd,ef.xor4096=Jd,ef.tychei=Qd,qd=ef;class tf{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=qd.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class nf{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=qd.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const rf=Cs({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new tf(t,n,r,!1,a),o=zi(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const af=Cs({randomUniform_:function(e,t=0,n=1,r="float32",a){const s=zi(e,r),o=new nf(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=o.nextValue();return s.toTensor()}});const sf=Cs({reciprocal_:function(e){const t={x:Es(e,"x","reciprocal")};return gs.runKernel(Rn,t)}});const of=Cs({rsqrt_:function(e){const t={x:Es(e,"x","rsqrt","float32")};return gs.runKernel(Vn,t)}});const lf=Cs({selu_:function(e){const t={x:Es(e,"x","selu")};return gs.runKernel(Gn,t)}});const uf=Cs({separableConv2d_:function(e,t,n,r,a,s=[1,1],o="NHWC"){const i=Es(e,"x","separableConv2d"),l=Es(t,"depthwiseFilter","separableConv2d"),u=Es(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Tu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),b(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),b(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),b(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),b(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];b(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=Ip(c,l,r,a,o,s),m=kp(f,u,1,"valid",o);return p?Tu(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const cf=Cs({sign_:function(e){const t={x:Es(e,"x","sign")};return gs.runKernel(Kn,t)}});const pf=Cs({sin_:function(e){const t={x:Es(e,"x","sin","float32")};return gs.runKernel(jn,t)}});const hf=Cs({sinh_:function(e){const t={x:Es(e,"x","sinh")};return gs.runKernel(qn,t)}});const df=Cs({slice1d_:function(e,t,n){const r=Es(e,"x","slice1d");return b(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),up(r,[t],[n])}});const ff=Cs({slice2d_:function(e,t,n){const r=Es(e,"x","slice2d");return b(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),up(r,t,n)}});const mf=Cs({slice3d_:function(e,t,n){const r=Es(e,"x","slice3d");return b(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),up(r,t,n)}});const gf=Cs({slice4d_:function(e,t,n){const r=Es(e,"x","slice4d");return b(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),up(r,t,n)}});const yf=Cs({softmax_:function(e,t=-1){const n=Es(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},a={dim:t};return gs.runKernel(tr,r,a)}});const bf=Cs({spaceToBatchND_:function(e,t,n){const r=Es(e,"x","spaceToBatchND");b(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),b(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),b(r.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:r},s={blockShape:t,paddings:n};return gs.runKernel(Qn,a,s)}});const xf=Cs({stridedSlice_:function(e,t,n,r,a=0,s=0,o=0,i=0,l=0){const u={x:Es(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return gs.runKernel(ur,u,c)}});const wf=Cs({tan_:function(e){const t={x:Es(e,"x","tan","float32")};return gs.runKernel(fr,t)}});const kf=Cs({tanh_:function(e){const t={x:Es(e,"x","tanh","float32")};return gs.runKernel(mr,t)}});const vf=Cs({topk_:function(e,t=1,n=!0){const r=Es(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const s={x:r},o={k:t,sorted:n},[i,l]=gs.runKernel(yr,s,o);return{values:i,indices:l}}});const Nf=Cs({truncatedNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new tf(t,n,r,!0,a),o=zi(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const Sf=Cs({unique_:function(e,t=0){const n=Es(e,"x","unique","string_or_numeric");b(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},a={axis:t},[s,o]=gs.runKernel(wr,r,a);return{values:s,indices:o}}});Cs({scatterND_:function(e,t,n){const r=Es(e,"indices","scatterND","int32"),a=Es(t,"updates","scatterND");ju(a,r,n);const s={indices:r,updates:a},o={shape:n};return gs.runKernel(Wn,s,o)}});Cs({sparseToDense_:function(e,t,n,r=0){const a=Es(e,"sparseIndices","sparseToDense","int32"),s=Es(t,"sparseValues","sparseToDense"),o=Es(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,o);const i={sparseIndices:a,sparseValues:s,defaultValue:o},l={outputShape:n};return gs.runKernel(or,i,l)}});Cs({gatherND_:function(e,t){const n=Es(t,"indices","gatherND","int32"),r={params:Es(e,"x","gatherND","string_or_numeric"),indices:n};return gs.runKernel(Mt,r)}});const If=Cs({dropout_:function(e,t,n,r){const a=Es(e,"x","dropout");if(b("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),b(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Ha?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(S(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,i=th(Id(wp(af(s,0,1,"float32",r),o)),o);return vu(a,i)}}),Tf={flipLeftRight:zp,grayscaleToRGB:Pp,resizeNearestNeighbor:Yp,resizeBilinear:Xp,rotateWithOffset:Vp,cropAndResize:Lp,nonMaxSuppression:Up,nonMaxSuppressionAsync:Gp,nonMaxSuppressionWithScore:Hp,nonMaxSuppressionWithScoreAsync:jp,nonMaxSuppressionPadded:qp,nonMaxSuppressionPaddedAsync:Kp,threshold:ih,transform:lh},Ef={bandPart:dh,gramSchmidt:Nh,qr:Ch};class $f extends Ol{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return tp(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return ap(e,t)}dispose(){null!=this.iterations_&&tp(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:yp(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty($f,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Cf extends $f{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=gs.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=gs.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:ep((()=>hp(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:ep((()=>hp(r).variable(false)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;ep((()=>{const e=wp(vu(s,this.rho),vu(xh(a),1-this.rho)),t=vu(th(bh(wp(o,this.epsilon)),bh(wp(s,this.epsilon))),a),n=wp(vu(o,this.rho),vu(xh(t),1-this.rho));s.assign(e),o.assign(n);const i=wp(vu(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(tp(this.accumulatedGrads.map((e=>e.variable))),tp(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Cf.className="Adadelta",Ll(Cf);class Af extends $f{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=gs.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:ep((()=>Fp(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;ep((()=>{const e=wp(s,xh(a));s.assign(e);const t=wp(vu(th(a,bh(wp(e,gs.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&tp(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Af.className="Adagrad",Ll(Af);class Rf extends $f{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ep((()=>{this.accBeta1=yp(t).variable(),this.accBeta2=yp(n).variable()})),null==r&&(this.epsilon=gs.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ep((()=>{const n=nh(1,this.accBeta1),r=nh(1,this.accBeta2);t.forEach(((t,a)=>{const s=gs.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:ep((()=>hp(s).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:ep((()=>hp(s).variable(false)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=wp(vu(i,this.beta1),vu(o,1-this.beta1)),c=wp(vu(l,this.beta2),vu(xh(o),1-this.beta2)),p=th(u,n),h=th(c,r);i.assign(u),l.assign(c);const d=wp(vu(th(p,wp(bh(h),this.epsilon)),-this.learningRate),s);s.assign(d)})),this.accBeta1.assign(vu(this.accBeta1,this.beta1)),this.accBeta2.assign(vu(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&tp(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&tp(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),ep((()=>{this.accBeta1.assign(yh(this.beta1,this.iterations_+1)),this.accBeta2.assign(yh(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Rf.className="Adam",Ll(Rf);class _f extends $f{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ep((()=>{this.iteration=yp(0).variable(),this.accBeta1=yp(t).variable()})),null==r&&(this.epsilon=gs.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ep((()=>{const n=nh(1,this.accBeta1),r=th(-this.learningRate,wp(vu(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=gs.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:hp(s).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:hp(s).variable(false)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=wp(vu(i,this.beta1),vu(o,1-this.beta1)),c=vu(l,this.beta2),p=fh(o),h=Bd(c,p);i.assign(u),l.assign(h);const d=wp(vu(th(r,n),th(u,wp(h,this.epsilon))),s);s.assign(d)})),this.iteration.assign(wp(this.iteration,1)),this.accBeta1.assign(vu(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&tp(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&tp(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}_f.className="Adamax",Ll(_f);class Df extends $f{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=gs.registeredVariables[t];ep((()=>{const e=wp(vu(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=np(yp(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Df.className="SGD",Ll(Df);class Ff extends Df{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=yp(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=gs.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:ep((()=>hp(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&ep((()=>{let e;const t=wp(vu(this.m,a),s);e=this.useNesterov?wp(vu(this.c,wp(s,vu(t,this.m))),r):wp(vu(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&tp(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Ff.className="Momentum",Ll(Ff);class Of extends $f{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=gs.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=gs.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:ep((()=>hp(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:ep((()=>hp(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:ep((()=>hp(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;ep((()=>{const e=wp(vu(o,this.decay),vu(xh(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=wp(vu(t,this.decay),vu(s,1-this.decay)),l=th(vu(s,this.learningRate),bh(nh(e,wp(xh(a),this.epsilon)))),u=wp(vu(i,this.momentum),l);o.assign(e),t.assign(a),i.assign(u);const c=nh(r,u);r.assign(c)}else{const e=wp(vu(o,this.decay),vu(xh(s),1-this.decay)),t=wp(vu(i,this.momentum),th(vu(s,this.learningRate),bh(wp(e,this.epsilon))));o.assign(e),i.assign(t);const n=nh(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&tp(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&tp(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&tp(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Of.className="RMSProp",Ll(Of);class Mf{static sgd(e){return new Df(e)}static momentum(e,t,n=!1){return new Ff(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new Of(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new Rf(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Cf(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new _f(e,t,n,r,a)}static adagrad(e,t=.1){return new Af(e,t)}}const Lf={sgd:Mf.sgd,momentum:Mf.momentum,adadelta:Mf.adadelta,adagrad:Mf.adagrad,rmsprop:Mf.rmsprop,adamax:Mf.adamax,adam:Mf.adam},zf="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function Bf(){return new Promise((e=>zf((()=>e()))))}const Pf={kernelName:Ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,$u(Bi(n,"float32"),-1))}}},Vf={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=xh(Bi(n,"float32")),r=bh(nh(yp(1),t));return Th(th(e,r))}}}},Wf={kernelName:Ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=bh(nh(xh(Bi(n,"float32")),1));return th(e,t)}}}},Uf={kernelName:Ae,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{let t=e;const r=il(n.shape,a);return r.length>0&&(t=Cu(t,r)),Tu(t,n.shape)},b:()=>{let t=e;const n=il(r.shape,a);return n.length>0&&(t=Cu(t,n)),Tu(t,r.shape)}}}},Gf={kernelName:Re,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},Hf={kernelName:Fe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>hp(n)}}},jf={kernelName:Oe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>hp(n)}}},qf={kernelName:Me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,bh(nh(yp(1),xh(Bi(n,"float32")))))}}},Kf={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=bh(wp(yp(1),xh(Bi(n,"float32"))));return th(e,t)}}}},Xf={kernelName:Pe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{const t=wp(xh(n),xh(r));let s=vu(e,th(r,t));const o=il(n.shape,a);return o.length>0&&(s=Cu(s,o)),Tu(s,n.shape)},b:()=>{const t=wp(xh(n),xh(r));let s=Th(vu(e,th(n,t)));const o=il(r.shape,a);return o.length>0&&(s=Cu(s,o)),Tu(s,r.shape)}}}},Yf={kernelName:ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,wp(xh(Bi(n,"float32")),1))}}},Zf={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,nh(yp(1),xh(Bi(n,"float32"))))}}};const Jf=Cs({avgPool3dGrad_:function(e,t,n,r,a,s){const o=Es(e,"dy","avgPool3dGrad"),i=Es(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=Tu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=Tu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),b(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),bu("avgPool3dGrad",a,s);const p={dy:l,input:u},h={filterSize:n,strides:r,pad:a,dimRoundingMode:s},d=gs.runKernel(Ge,p,h);return c?Tu(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Qf={kernelName:Ue,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:a,strides:s,pad:o,dimRoundingMode:i}=n;return{x:()=>Jf(e,r,a,s,o,i)}}};const em=Cs({avgPoolGrad_:function(e,t,n,r,a){const s=Es(e,"dy","avgPoolGrad"),o=Es(t,"input","avgPoolGrad");b(o.rank===s.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${s.rank})`));let i=o,l=s,u=!1;3===o.rank&&(u=!0,i=Tu(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=Tu(s,[1,s.shape[0],s.shape[1],s.shape[2]])),b(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),b(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},p={filterSize:n,strides:r,pad:a},h=gs.runKernel(We,c,p);return u?Tu(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),tm={kernelName:Ve,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:a,strides:s,pad:o}=n;return{x:()=>em(e,r,a,s,o)}}},nm={kernelName:He,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,a]=t,{transposeA:s,transposeB:o}=n;return s||o?!s&&o?{a:()=>Cp(e,a,!1,!1),b:()=>Cp(e,r,!0,!1)}:s&&!o?{a:()=>Cp(a,e,!1,!0),b:()=>Cp(r,e,!1,!1)}:{a:()=>Cp(a,e,!0,!0),b:()=>Cp(e,r,!0,!0)}:{a:()=>Cp(e,a,!1,!0),b:()=>Cp(r,e,!0,!1)}}},rm={kernelName:je,gradFunc:(e,t,n)=>{const{blockShape:r,crops:a}=n;return{x:()=>bf(e,r,a)}}},am={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,a=r.inputShape,s=r.shape,o=Array.from(s);for(let e=a.length-1;e>=0;e--)if(a[e]===s[e])o[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${s}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>Cu(e,i,!0)}}},sm={kernelName:Xe,gradFunc:e=>({x:()=>e.clone()})},om={kernelName:Ye,gradFunc:e=>({x:()=>hp(e)})},im={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:a,clipValueMax:s}=n;return{x:()=>sh(ch(uh(r,a),Jp(r,s)),e,hp(e))}}},lm={kernelName:Qe,inputsToSave:["x"],gradFunc:Pf.gradFunc},um={kernelName:et,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:a}=n,s=_(a,t[0].shape)[0],o=r.map((e=>e[s]));return cp(e,o,s).map((e=>()=>e))}},cm={kernelName:tt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,a]=t,{dilations:s,strides:o,pad:i,dataFormat:l}=n;return b(mu(s),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`)),{x:()=>Np(r.shape,e,a,o,i,l),filter:()=>vp(r,e,a.shape,o,i,l)}}},pm={kernelName:rt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,a]=t,{strides:s,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>kp(e,a,s,o,i,1,l),filter:()=>vp(e,r,a.shape,s,o,i,l)}}};const hm=Cs({conv3DBackpropFilter_:function(e,t,n,r,a){let s=e;4===e.rank&&(s=Tu(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Tu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),b(5===s.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`)),b(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),b(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),b(s.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`)),b(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:s,dy:o},l={strides:r,pad:a,filterShape:n};return gs.runKernel(st,i,l)}}),dm={kernelName:at,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:a,pad:s}=n;b(mu(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>fd(o.shape,e,i,a,s),filter:()=>hm(o,e,i.shape,a,s)}}},fm={kernelName:it,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(Th(pf(Bi(n,"float32"))),e)}}},mm={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(hf(Bi(n,"float32")),e)}}},gm={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:a,exclusive:s,reverse:o}=n;return{x:()=>{const t=Jl([a],r.rank);let n=bd(e,a,s,!o);return null!=t&&(n=Eh(n,t)),n}}}},ym={kernelName:dt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:a,pad:s,dimRoundingMode:o}=n,i=null==r?[1,1]:r;b(mu(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return b(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),b(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),b(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),b(gu(a,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${i}'.`)),bu("depthwiseConv2d",s,o),{x:()=>Ep(l.shape,e,u,a,s,i,o),filter:()=>Tp(l,e,u.shape,a,s,i,o)}}},bm={kernelName:yt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,a]=t,s={x:r,filter:a,dy:e},o={x:r,filter:a,dy:e};return{x:()=>gs.runKernel(bt,s,n),filter:()=>gs.runKernel(xt,o,n)}}},xm={kernelName:vt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>gs.runKernel(Nt,r)}}},wm={kernelName:St,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=vu(zh(Th(xh(n))),2/Math.sqrt(Math.PI));return{x:()=>vu(e,r)}}},km={kernelName:Tt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,n)}}},vm={kernelName:Et,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Tu(e,n.shape)}}},Nm={kernelName:$t,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,zh(n))}}},Sm={kernelName:_t,gradFunc:e=>({x:()=>hp(e)})},Im={kernelName:Dt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{const t=th(e,Bi(r,"float32")),s=il(n.shape,a);return s.length>0?Tu(Cu(t,s),n.shape):t},b:()=>{let t=vu(e,Bi(n,"float32"));const s=il(r.shape,a);s.length>0&&(t=Tu(Cu(t,s),r.shape));const o=xh(r);return Th(th(t,Bi(o,"float32")))}}}},Tm={kernelName:Ft,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[a,s,o,i]=t,l=null==i?yp(1):i,u=il(s.shape,a.shape),c=[];if(1===s.rank){for(let e=0;e<a.shape.length-1;++e)c.push(a.shape[e]);c.push(1)}const p=nh(a,s),h=vu(e,l),d=of(wp(o,yp(r))),f=vu(vu(vu(d,d),d),yp(-.5));return{x:()=>1===s.rank?Tu(vu(vu(e,Bp(Tu(d,[1,1,1,s.shape[0]]),c)),l),a.shape):Tu(vu(vu(e,d),l),a.shape),mean:()=>{let e=vu(vu(d,yp(-1)),h);return 1===s.rank&&(e=Cu(e,u)),Tu(e,s.shape)},variance:()=>{let e=vu(vu(f,p),h);return 1===s.rank&&(e=Cu(e,u)),Tu(e,s.shape)},scale:()=>{const t=vu(p,d);let n=vu(e,t);return 1===s.rank&&(n=Cu(n,u)),Tu(n,s.shape)},offset:()=>{let t=e;return 1===s.rank&&(t=Cu(t,u)),Tu(t,s.shape)}}}};const Em=Cs({unsortedSegmentSum_:function(e,t,n){const r=Es(e,"x","unsortedSegmentSum"),a=Es(t,"segmentIds","unsortedSegmentSum","int32");b(I(n),(()=>"numSegments must be of dtype int"));const s={x:r,segmentIds:a},o={numSegments:n};return gs.runKernel(vr,s,o)}}),$m={kernelName:Ot,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,a]=t,{axis:s}=n,o=_(s,r.shape)[0];return{x:()=>{const t=r.shape,n=a.size,i=t.slice(0,o),l=i.length,u=t.slice(s,t.length).slice(1),c=u.length,p=Cm(0,l),h=Cm(l+1,l+1+c),d=Am([i,[n],u]),f=Tu(e,d),m=Tu(a,[n]),g=Am([[l],p,h]),y=Eh(f,g);let b=Em(y,m,r.shape[o]);const x=Ql(g);return b=Eh(b,x),b},indices:()=>a}}};function Cm(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Am(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Rm={kernelName:zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>hp(n),b:()=>hp(r)}}},_m={kernelName:Bt,gradFunc:e=>({x:()=>Bi(e,"float32")})},Dm={kernelName:Wt,gradFunc:e=>({x:()=>hp(e)})},Fm={kernelName:Ut,gradFunc:e=>({x:()=>hp(e)})},Om={kernelName:Gt,gradFunc:e=>({x:()=>hp(e)})},Mm={kernelName:Ht,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:a}=n,s=Qp(r,0);return{x:()=>sh(s,e,vu(e,a))}}},Lm={kernelName:Yt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,wp(n,1))}}},zm={kernelName:Xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,Bi(n,"float32"))}}},Bm={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:a}=n;return{logits:()=>{const t=zh(r);return nh(e,vu(Cu(e,a,!0),t))}}}};const Pm=Cs({localResponseNormalizationBackprop_:function(e,t,n,r=5,a=1,s=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:r,bias:a,alpha:s,beta:o};return gs.runKernel(tn,i,l)}}),Vm={kernelName:en,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,a]=t,{depthRadius:s,bias:o,alpha:i,beta:l}=n;return{x:()=>Pm(r,a,e,s,o,i,l)}}};function Wm(e,t,n,r){return t.rank<n.rank&&(t=Tu(t,Yl(t.shape,r))),e.rank<n.rank&&(e=Tu(e,Yl(e.shape,r))),{x:()=>vu(e,Bi(kd(n,t),e.dtype))}}const Um={kernelName:nn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:a}=r,s=t[0],o=Wm(e,t[1],s,_(a,s.shape));return{x:()=>o.x()}}},Gm={kernelName:rn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>vu(e,Bi(uh(n,r),"float32")),b:()=>vu(e,Bi(Ad(n,r),"float32"))}}};const Hm=Cs({maxPool3dGrad_:function(e,t,n,r,a,s,o){const i=Es(e,"dy","maxPool3dGrad"),l=Es(t,"input","maxPool3dGrad"),u=Es(n,"output","maxPool3dGrad");let c=i,p=l,h=u,d=!1;4===l.rank&&(d=!0,c=Tu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),p=Tu(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=Tu(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),b(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),b(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),b(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),bu("maxPool3dGrad",s,o);const f={dy:c,input:p,output:h},m={filterSize:r,strides:a,pad:s,dimRoundingMode:o},g=gs.runKernel(ln,f,m);return d?Tu(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),jm={kernelName:on,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,a]=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>Hm(e,r,a,s,o,i,l)}}};const qm=Cs({maxPoolGrad_:function(e,t,n,r,a,s,o){const i=Es(e,"dy","maxPoolGrad"),l=Es(t,"input","maxPoolGrad"),u=Es(n,"output","maxPoolGrad");b(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),b(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),b(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),bu("maxPoolGrad",s,o);const c={dy:i,input:l,output:u},p={filterSize:r,strides:a,pad:s,dimRoundingMode:o};return gs.runKernel(sn,c,p)}}),Km={kernelName:In,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:a}=n,s=a.map((e=>e[0]));return{x:()=>up(e,s,r.shape)}}},Xm={kernelName:Qn,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:a}=n;return{x:()=>ed(e,r,a)}}},Ym={kernelName:er,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>op(e,r)}}};const Zm=[Pf,Vf,Wf,Uf,Gf,Hf,jf,qf,Kf,Xf,Yf,Zf,Qf,tm,nm,rm,am,sm,om,im,lm,um,pm,cm,dm,fm,mm,gm,ym,bm,{kernelName:wt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{const t=th(e,Bi(r,"float32")),s=il(n.shape,a);return s.length>0?Tu(Cu(t,s),n.shape):t},b:()=>{let t=vu(e,Bi(n,"float32"));const s=il(r.shape,a);s.length>0&&(t=Tu(Cu(t,s),r.shape));const o=xh(r);return Th(th(t,Bi(o,"float32")))}}}},xm,wm,km,vm,Nm,Im,Sm,Tm,$m,Rm,_m,Dm,Fm,Om,Mm,Lm,zm,Bm,Vm,Um,Um,Gm,jm,{kernelName:an,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,a]=t,{filterSize:s,strides:o,pad:i}=n;return{x:()=>qm(e,r,a,s,o,i)}}},{kernelName:cn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:a}=n,s=_(a,r.shape),o=v(Xl(r.shape,s)[1]);return{x:()=>{const t=r.shape.slice();s.forEach((e=>{t[e]=1}));const n=Tu(e,t);return th(vu(n,Dh(r.shape,"float32")),o)}}}},{kernelName:pn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:a}=r,[s,o]=t,i=Wm(e,o,s,_(a,s.shape));return{x:()=>i.x()}}},{kernelName:hn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>vu(e,Bi(Jp(n,r),"float32")),b:()=>vu(e,Bi(Qp(n,r),"float32"))}}},{kernelName:dn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:a}=n,s=a.map((e=>e[0]));return{x:()=>up(e,s,r.shape)}}},{kernelName:fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{const t=il(n.shape,a);return t.length>0?Tu(Cu(e,t),n.shape):e},b:()=>{const t=vu(e,Th(Id(th(n,r)))),s=il(r.shape,a);return s.length>0?Tu(Cu(t,s),r.shape):t}}}},{kernelName:gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{const t=vu(e,Bi(r,"float32")),s=il(n.shape,a);return s.length>0?Tu(Cu(t,s),n.shape):t},b:()=>{const t=vu(e,Bi(n,"float32")),s=il(r.shape,a);return s.length>0?Tu(Cu(t,s),r.shape):t}}}},{kernelName:yn,gradFunc:e=>({x:()=>Th(e)})},{kernelName:Nn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>pp(n.shape,"float32")}}},{kernelName:vn,gradFunc:e=>({x:()=>hp(e)})},{kernelName:Sn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return hh(e,r).map((e=>()=>e))}},Km,Km,{kernelName:Tn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,a]=t,s=n,o=r,i=ll(s.shape,o.shape);return{a:()=>{const t=Bi(o,"float32");let n=vu(e,vu(t,yh(s,nh(t,yp(1)))));const r=il(s.shape,i);return r.length>0&&(n=Cu(n,r)),Tu(n,s.shape)},b:()=>{const t=Qp(s,0),n=sh(t,Mh(s),hp(s));let r=vu(e,vu(a,n));const l=il(o.shape,i);return l.length>0&&(r=Cu(r,l)),Tu(r,o.shape)}}}},{kernelName:En,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,a=Qp(n,0);return{x:()=>sh(a,e,vu(e,r)),alpha:()=>{let t=sh(a,hp(e),vu(e,n));const s=il(r.shape,e.shape);return s.length>0&&(t=Cu(t,s)),Tu(t,r.shape)}}}},{kernelName:Rn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,Th(xh(n)))}}},{kernelName:zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=vu(Jp(n,6),$u(n));return{x:()=>vu(e,Bi(r,"float32"))}}},{kernelName:_n,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,Bi($u(n),"float32"))}}},{kernelName:Dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Tu(e,n.shape)}}},{kernelName:Mn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,a={dy:e,images:r};return{images:()=>gs.runKernel(Ln,a,n)}}},{kernelName:Fn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,a={dy:e,images:r};return{images:()=>gs.runKernel(On,a,n)}}},{kernelName:Bn,gradFunc:(e,t,n)=>{const{dims:r}=n,a=_(r,e.shape);return{x:()=>gp(e,a)}}},{kernelName:Pn,gradFunc:e=>({x:()=>hp(e)})},{kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Th(th(e,vu(yh(n,1.5),2)))}}},{kernelName:Un,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Bi(hp(n),"float32"),t:()=>vu(e,Bi(n,e.dtype)),e:()=>vu(e,Bi(Od(n),e.dtype))}}},{kernelName:Gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Qp(n,yp(0)),r=yp(Xu),a=yp(Yu),s=vu(e,a),o=vu(vu(e,r),zh(Bi(n,"float32")));return sh(t,s,o)}}}},{kernelName:Xn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,vu(n,nh(yp(1),n)))}}},{kernelName:Kn,gradFunc:e=>({x:()=>hp(e)})},{kernelName:jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(gd(Bi(n,"float32")),e)}}},{kernelName:qn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(yd(Bi(n,"float32")),e)}}},{kernelName:Hn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:a,size:s}=n,o=r.shape,[i,l]=Rl(r,a,s),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>Hd(e,u)}}},{kernelName:tr,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:a}=n,s=vu(e,r);return{logits:()=>nh(s,vu(Cu(s,[a],true),r))}}},{kernelName:Yn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,Eu(n))}}},Xm,Xm,Ym,Ym,{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,vu(bh(Bi(n,"float32")),2))}}},{kernelName:ir,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=yp(2);return{a:()=>vu(e,vu(a,nh(n,r))),b:()=>vu(e,vu(a,nh(r,n)))}}},{kernelName:lr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(e,vu(Bi(n,"float32"),2))}}},{kernelName:Sr,gradFunc:e=>({x:()=>hp(e)})},{kernelName:dr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=ll(n.shape,r.shape);return{a:()=>{let t=e;const r=il(n.shape,a);return r.length>0&&(t=Cu(t,r)),Tu(t,n.shape)},b:()=>{let t=e;const n=il(r.shape,a);return n.length>0&&(t=Cu(t,n)),Tu(Th(t),r.shape)}}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,a=r.shape.slice(),{axis:s}=n;_(s,r.shape).forEach((e=>{a[e]=1}));const o=Tu(e,a),i=vu(o,Dh(r.shape,"float32"));return{x:()=>i}}},{kernelName:fr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>th(e,xh(gd(n)))}}},{kernelName:mr,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vu(nh(yp(1),xh(n)),e)}}},{kernelName:gr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:a}=n;return{x:()=>{let t=hp(r);if(1===r.rank)for(let n=0;n<a[0];++n)t=wp(t,up(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)t=wp(t,up(e,[n*r.shape[0],s*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let o=0;o<a[2];++o)t=wp(t,up(e,[n*r.shape[0],s*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let o=0;o<a[2];++o)for(let i=0;i<a[3];++i)t=wp(t,up(e,[n*r.shape[0],s*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:xr,gradFunc:(e,t,n)=>{const r=n,{perm:a}=r,s=Ql(a);return{x:()=>Eh(e,s)}}},{kernelName:kr,gradFunc:(e,t,n)=>{const r=n,{axis:a}=r;return{value:()=>ph(e,a)}}},{kernelName:vr,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Bd(t,hp(t)),r=Td(e,n);let a=uh(t,yp(0,"int32"));const s=r.rank-a.rank;for(let e=0;e<s;++e)a=Sh(a,e+1);a=ch(a,Dh(r.shape,"bool"));const o=hp(r);return sh(a,r,o)}(e,n)}}},{kernelName:Nr,gradFunc:e=>({x:()=>hp(e)})}];for(const e of Zm)Br(e);ja().prototype.abs=function(){return this.throwIfDisposed(),fh(this)},ja().prototype.acos=function(){return this.throwIfDisposed(),Vh(this)},ja().prototype.acosh=function(){return this.throwIfDisposed(),Wh(this)},ja().prototype.add=function(e){return this.throwIfDisposed(),wp(this,e)},ja().prototype.all=function(e,t){return this.throwIfDisposed(),Uh(this,e,t)},ja().prototype.any=function(e,t){return this.throwIfDisposed(),Gh(this,e,t)},ja().prototype.argMax=function(e){return this.throwIfDisposed(),Hh(this,e)},ja().prototype.argMin=function(e){return this.throwIfDisposed(),jh(this,e)},ja().prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,(()=>"The array must have only 1 element.")),Tu(this,[])},ja().prototype.asType=function(e){return this.throwIfDisposed(),Bi(this,e)},ja().prototype.as1D=function(){return this.throwIfDisposed(),Tu(this,[this.size])},ja().prototype.as2D=function(e,t){return this.throwIfDisposed(),Tu(this,[e,t])},ja().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Tu(this,[e,t,n])},ja().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Tu(this,[e,t,n,r])},ja().prototype.as5D=function(e,t,n,r,a){return this.throwIfDisposed(),Tu(this,[e,t,n,r,a])},ja().prototype.asin=function(){return this.throwIfDisposed(),qh(this)},ja().prototype.asinh=function(){return this.throwIfDisposed(),Kh(this)},ja().prototype.atan=function(){return this.throwIfDisposed(),Xh(this)},ja().prototype.atan2=function(e){return this.throwIfDisposed(),Yh(this,e)},ja().prototype.atanh=function(){return this.throwIfDisposed(),Zh(this)},ja().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),Jh(this,e,t,n,r)},ja().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),ed(this,e,t)},ja().prototype.batchNorm=function(e,t,n,r,a){return this.throwIfDisposed(),td(this,e,t,n,r,a)},ja().prototype.broadcastTo=function(e){return this.throwIfDisposed(),ah(this,e)},ja().prototype.cast=function(e){return this.throwIfDisposed(),Bi(this,e)},ja().prototype.ceil=function(){return this.throwIfDisposed(),sd(this)},ja().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),od(this,e,t)},ja().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Ha&&(e=[e]),op([this,...e],t)},ja().prototype.conv1d=function(e,t,n,r,a,s){return this.throwIfDisposed(),pd(this,e,t,n,r,a,s)},ja().prototype.conv2dTranspose=function(e,t,n,r,a){return this.throwIfDisposed(),hd(this,e,t,n,r,a)},ja().prototype.conv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),kp(this,e,t,n,r,a,s)},ja().prototype.cos=function(){return this.throwIfDisposed(),gd(this)},ja().prototype.cosh=function(){return this.throwIfDisposed(),yd(this)},ja().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),bd(this,e,t,n)},ja().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),xd(this,e,t)},ja().prototype.depthwiseConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),Ip(this,e,t,n,r,a,s)},ja().prototype.dilation2d=function(e,t,n,r,a){return this.throwIfDisposed(),wd(this,e,t,n,r,a)},ja().prototype.divNoNan=function(e){return this.throwIfDisposed(),vd(this,e)},ja().prototype.div=function(e){return this.throwIfDisposed(),th(this,e)};const Jm=Cs({dot_:function(e,t){const n=Es(e,"t1","dot"),r=Es(t,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(b(a===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`)),1===n.rank&&1===r.rank){const e=Tu(n,[1,-1]),t=Tu(r,[-1,1]),a=Cp(e,t);return Tu(a,[])}if(1===n.rank&&2===r.rank){const e=Tu(n,[1,-1]),t=Tu(r,[r.shape[0],r.shape[1]]),a=Cp(e,t);return Tu(a,[a.size])}if(2===n.rank&&1===r.rank){const e=Tu(r,[-1,1]),t=Cp(n,e);return Tu(t,[t.size])}{const e=Tu(r,[r.shape[0],r.shape[1]]);return Cp(n,e)}}});ja().prototype.dot=function(e){return this.throwIfDisposed(),Jm(this,e)},ja().prototype.elu=function(){return this.throwIfDisposed(),wu(this)},ja().prototype.equal=function(e){return this.throwIfDisposed(),kd(this,e)},ja().prototype.erf=function(){return this.throwIfDisposed(),Nd(this)},ja().prototype.exp=function(){return this.throwIfDisposed(),zh(this)},ja().prototype.expandDims=function(e){return this.throwIfDisposed(),Sh(this,e)},ja().prototype.expm1=function(){return this.throwIfDisposed(),Sd(this)},ja().prototype.fft=function(){return this.throwIfDisposed(),dp(this)},ja().prototype.flatten=function(){return this.throwIfDisposed(),Tu(this,[this.size])},ja().prototype.floor=function(){return this.throwIfDisposed(),Id(this)},ja().prototype.floorDiv=function(e){return this.throwIfDisposed(),eh(this,e)},ja().prototype.gather=function(e,t){return this.throwIfDisposed(),Td(this,e,t)},ja().prototype.greaterEqual=function(e){return this.throwIfDisposed(),uh(this,e)},ja().prototype.greater=function(e){return this.throwIfDisposed(),Qp(this,e)},ja().prototype.ifft=function(){return this.throwIfDisposed(),mp(this)},ja().prototype.irfft=function(){return this.throwIfDisposed(),bp(this)},ja().prototype.isFinite=function(){return this.throwIfDisposed(),Ed(this)},ja().prototype.isInf=function(){return this.throwIfDisposed(),$d(this)},ja().prototype.isNaN=function(){return this.throwIfDisposed(),Cd(this)},ja().prototype.leakyRelu=function(e){return this.throwIfDisposed(),ku(this,e)},ja().prototype.lessEqual=function(e){return this.throwIfDisposed(),Jp(this,e)},ja().prototype.less=function(e){return this.throwIfDisposed(),Ad(this,e)},ja().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Rd(this,e,t,n,r)},ja().prototype.logSigmoid=function(){return this.throwIfDisposed(),Dd(this)},ja().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Fd(this,e)},ja().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Ph(this,e,t)},ja().prototype.log=function(){return this.throwIfDisposed(),Mh(this)},ja().prototype.log1p=function(){return this.throwIfDisposed(),Bh(this)},ja().prototype.logicalAnd=function(e){return this.throwIfDisposed(),ch(this,e)},ja().prototype.logicalNot=function(){return this.throwIfDisposed(),Od(this)},ja().prototype.logicalOr=function(e){return this.throwIfDisposed(),Md(this,e)};const Qm=Cs({logicalXor_:function(e,t){const n=Es(e,"a","logicalXor","bool"),r=Es(t,"b","logicalXor","bool");return ll(n.shape,r.shape),ch(Md(e,t),Od(ch(e,t)))}});ja().prototype.logicalXor=function(e){return this.throwIfDisposed(),Qm(this,e)},ja().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Cp(this,e,t,n)},ja().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Ld(this,e,t,n,r)},ja().prototype.max=function(e,t){return this.throwIfDisposed(),mh(this,e,t)},ja().prototype.maximum=function(e){return this.throwIfDisposed(),Bd(this,e)},ja().prototype.mean=function(e,t){return this.throwIfDisposed(),Rh(this,e,t)},ja().prototype.min=function(e,t){return this.throwIfDisposed(),gh(this,e,t)},ja().prototype.minimum=function(e){return this.throwIfDisposed(),Oh(this,e)},ja().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Pd(this,e,t)},ja().prototype.mod=function(e){return this.throwIfDisposed(),Vd(this,e)},ja().prototype.mul=function(e){return this.throwIfDisposed(),vu(this,e)},ja().prototype.neg=function(){return this.throwIfDisposed(),Th(this)},ja().prototype.norm=function(e,t,n){return this.throwIfDisposed(),kh(this,e,t,n)},ja().prototype.notEqual=function(e){return this.throwIfDisposed(),_h(this,e)},ja().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Ud(this,e,t,n)},ja().prototype.onesLike=function(){return this.throwIfDisposed(),Gd(this)},ja().prototype.pad=function(e,t){return this.throwIfDisposed(),Hd(this,e,t)};const eg=Cs({pool_:function(e,t,n,r,a,s,o){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const i=Es(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=Tu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(gu(s,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`));const c=ou(l.shape,t,s,a,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[r[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?l:bf(l,p,f),x=("avg"===n?()=>Jh(y,t,s,g,o):()=>Ld(y,t,s,g,o))(),w=d?x:ed(x,p,m);return u?Tu(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});function tg(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(sg(e)){const a=Array.isArray(e)?[]:{};r.add(e);for(const s in e){const o=tg(e[s],t,n,r);a[s]=o}return r.delete(e),e.__proto__&&(a.__proto__=e.__proto__),a}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,a.value),a.value}function ng(e,t=ag){return rg(e,t)}function rg(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(sg(r)){const a=Array.isArray(r)?[]:{};n.add(r);for(const s in r){const r=rg(e.map((e=>e[s])),t,n);a[s]=r}return n.delete(r),a}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return a.value}function ag(e){return null===e?null:sg(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function sg(e){let t=!1;if(ie().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=s("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Ha)&&!(e instanceof Promise)&&!t)}function og(e){return tg(e,ig)}function ig(e){return e instanceof Ha?{value:e.clone(),recurse:!1}:sg(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}ja().prototype.pool=function(e,t,n,r,a,s){return this.throwIfDisposed(),eg(this,e,t,n,r,a,s)},ja().prototype.pow=function(e){return this.throwIfDisposed(),yh(this,e)},ja().prototype.prelu=function(e){return this.throwIfDisposed(),Nu(this,e)},ja().prototype.prod=function(e,t){return this.throwIfDisposed(),jd(this,e,t)},ja().prototype.reciprocal=function(){return this.throwIfDisposed(),sf(this)},ja().prototype.relu=function(){return this.throwIfDisposed(),Su(this)},ja().prototype.relu6=function(){return this.throwIfDisposed(),Iu(this)},ja().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Tu(this,e.shape)},ja().prototype.reshape=function(e){return this.throwIfDisposed(),Tu(this,e)},ja().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Xp(this,e,t,n)},ja().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Yp(this,e,t,n)},ja().prototype.reverse=function(e){return this.throwIfDisposed(),gp(this,e)},ja().prototype.rfft=function(){return this.throwIfDisposed(),fp(this)},ja().prototype.round=function(){return this.throwIfDisposed(),rh(this)},ja().prototype.rsqrt=function(){return this.throwIfDisposed(),of(this)},ja().prototype.selu=function(){return this.throwIfDisposed(),lf(this)},ja().prototype.separableConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),uf(this,e,t,n,r,a,s)},ja().prototype.sigmoid=function(){return this.throwIfDisposed(),Eu(this)},ja().prototype.sign=function(){return this.throwIfDisposed(),cf(this)},ja().prototype.sin=function(){return this.throwIfDisposed(),pf(this)},ja().prototype.sinh=function(){return this.throwIfDisposed(),hf(this)},ja().prototype.slice=function(e,t){return this.throwIfDisposed(),up(this,e,t)},ja().prototype.softmax=function(e){return this.throwIfDisposed(),yf(this,e)},ja().prototype.softplus=function(){return this.throwIfDisposed(),_d(this)},ja().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),bf(this,e,t)},ja().prototype.split=function(e,t){return this.throwIfDisposed(),cp(this,e,t)},ja().prototype.sqrt=function(){return this.throwIfDisposed(),bh(this)},ja().prototype.square=function(){return this.throwIfDisposed(),xh(this)},ja().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Lh(this,e)},ja().prototype.squeeze=function(e){return this.throwIfDisposed(),vh(this,e)},ja().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Ha?[this,e]:[this,...e];return ph(n,t)},ja().prototype.step=function(e){return this.throwIfDisposed(),$u(this,e)},ja().prototype.stridedSlice=function(e,t,n,r,a,s,o,i){return this.throwIfDisposed(),xf(this,e,t,n,r,a,s,o,i)},ja().prototype.sub=function(e){return this.throwIfDisposed(),nh(this,e)},ja().prototype.sum=function(e,t){return this.throwIfDisposed(),Cu(this,e,t)},ja().prototype.tan=function(){return this.throwIfDisposed(),wf(this)},ja().prototype.tanh=function(){return this.throwIfDisposed(),kf(this)},ja().prototype.tile=function(e){return this.throwIfDisposed(),Bp(this,e)},ja().prototype.toBool=function(){return this.throwIfDisposed(),Bi(this,"bool")},ja().prototype.toFloat=function(){return this.throwIfDisposed(),Bi(this,"float32")},ja().prototype.toInt=function(){return this.throwIfDisposed(),Bi(this,"int32")},ja().prototype.topk=function(e,t){return this.throwIfDisposed(),vf(this,e,t)},ja().prototype.transpose=function(e){return this.throwIfDisposed(),Eh(this,e)},ja().prototype.unique=function(e){return this.throwIfDisposed(),Sf(this,e)},ja().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Em(this,e,t)},ja().prototype.unstack=function(e){return this.throwIfDisposed(),hh(this,e)},ja().prototype.where=function(e,t){return this.throwIfDisposed(),sh(e,this,t)},ja().prototype.zerosLike=function(){return this.throwIfDisposed(),hp(this)};class lg{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class ug extends lg{constructor(){super(ug.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function cg(e){return new fg(e)}function pg(e){return new mg(e)}function hg(e,t){return new Tg(e,t)}ug.INITIAL_CAPACITY=32;class dg{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new vg(this,e)}filter(e){return new wg(this,e)}map(e){return new kg(this,e)}mapAsync(e){return new Ng(this,e)}serialMapAsync(e){return new Ng(this,e).serial()}flatmap(e){return new Ig(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new xg(this,e,t)}columnMajorBatch(e,t=!0,n=ag){return this.rowMajorBatch(e,t).map((e=>ng(e,n)))}concatenate(e,t){return new Tg(cg([this,e]),t)}take(e){return e<0||null==e?this:new bg(this,e)}skip(e){return e<0||null==e?this:new yg(this,e)}prefetch(e){return new $g(this,e)}shuffle(e,t){return new Cg(this,e,t)}serial(){return new gg(this)}}class fg extends dg{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:og(e),done:!1}}}class mg extends dg{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class gg extends dg{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class yg extends dg{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;tp(e.value)}return this.upstream.next()}}class bg extends dg{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class xg extends dg{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class wg extends dg{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;tp(e.value)}}}class kg extends dg{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=rs.getTensorsInContainer(e.value),n=this.transform(e.value),r=rs.getTensorsInContainer(n);for(const e of t)rs.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class vg extends dg{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Ng extends dg{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=rs.getTensorsInContainer(e.value),n=await this.transform(e.value),r=rs.getTensorsInContainer(n);for(const e of t)rs.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class Sg extends dg{constructor(){super(),this.outputQueue=new ug,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Ig extends Sg{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=rs.getTensorsInContainer(e.value),n=this.transform(e.value),r=rs.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)rs.isTensorInList(e,r)||e.dispose();return!0}}class Tg extends dg{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Eg;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Eg||(Eg={}));class $g extends dg{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new lg(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Cg extends $g{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=qd.alea(n||Vr.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Ag{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return Vr.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Rg((async()=>(await n.iterator()).columnMajorBatch(e,t,_g)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Rg((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Rg((async()=>(await t.iterator()).filter((t=>ep((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Rg((async()=>(await t.iterator()).map((t=>ep((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Rg((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Rg((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Rg((async()=>hg(pg((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Rg((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,a=qd.alea(t||Vr.now().toString());return Rg((async()=>{let t=a.int32();return n&&(t+=a.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Rg((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Rg(e,t=null){return new class extends Ag{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function _g(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof Ha||Vr.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Ha?ph(e):_s(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}Ag.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function Dg(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Vr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Fg(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(Dg(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,l=i.data.get(o.dataId).values,u=Vr.sizeFromShape(o.shape),c=n||o.dtype,p=Vr.getArrayFromDType(c,u);for(let e=0;e<u;++e)p[e]=t(l[e],a);return i.makeTensorInfo(o.shape,c,p)}}function Og(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(Dg(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,l=i.data.get(o.dataId).values,u=n||o.dtype,c=t(l,u,a);return i.makeTensorInfo(o.shape,u,c)}}const Mg=Fg(vt,(e=>e>=0?e:Math.exp(e)-1)),Lg={kernelName:vt,backendName:"cpu",kernelFunc:Mg};function zg(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Bg={kernelName:Bt,backendName:"cpu",kernelFunc:zg};function Pg(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r;Dg([a],"leakyRelu");const o=Vr.sizeFromShape(a.shape),i=n.data.get(a.dataId).values,l=Vr.getTypedArrayFromDType("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?s*i[e]:i[e];return n.makeTensorInfo(a.shape,"float32",l)}const Vg={kernelName:Ht,backendName:"cpu",kernelFunc:Pg};function Wg(e){return(t,n,r,a,s)=>{const o=zl.assertAndGetBroadcastShape(t,n),i=o.length,l=Vr.computeStrides(o),u=Vr.sizeFromShape(o),c=Vr.getTypedArrayFromDType(s,u),p=t.length,h=n.length,d=Vr.computeStrides(t),f=Vr.computeStrides(n),m=zl.getBroadcastDims(t,o),g=zl.getBroadcastDims(n,o);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],a[t%a.length]);else for(let t=0;t<c.length;++t){const n=Vr.indexToLoc(t,i,l),s=n.slice(-p);m.forEach((e=>s[e]=0));const o=Vr.locToIndex(s,p,d),u=n.slice(-h);g.forEach((e=>u[e]=0));const y=Vr.locToIndex(u,h,f);c[t]=e(r[o],a[y])}return[c,o]}}const Ug=Wg(((e,t)=>e<0?t*e:e));function Gg(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t;Dg([r,a],"prelu");const s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,[i,l]=Ug(r.shape,a.shape,s,o,"float32");return n.makeTensorInfo(l,"float32",i)}const Hg={kernelName:En,backendName:"cpu",kernelFunc:Gg},jg=Fg(_n,(e=>Math.max(0,e))),qg={kernelName:_n,backendName:"cpu",kernelFunc:jg},Kg=Fg(zn,(e=>Math.min(Math.max(0,e),6))),Xg={kernelName:zn,backendName:"cpu",kernelFunc:Kg};function Yg(e){return(t,n,r)=>{const a=Vr.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],r);return a}}const Zg=Yg((e=>1/(1+Math.exp(-e)))),Jg=Fg(Xn,(e=>1/(1+Math.exp(-e)))),Qg={kernelName:Xn,backendName:"cpu",kernelFunc:Jg};function ey(e,t,n,r,a){if("linear"===n)return zg({inputs:{x:t},backend:e});if("relu"===n)return jg({inputs:{x:t},backend:e});if("elu"===n)return Mg({inputs:{x:t},backend:e});if("relu6"===n)return Kg({inputs:{x:t},backend:e});if("prelu"===n)return Gg({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return Pg({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Jg({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function ty(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}const ny={kernelName:Je,backendName:"cpu",kernelFunc:ty};function ry(e,t,n="float32"){if("complex64"===n){return ty({inputs:{real:ry(e,t,"float32"),imag:ry(e,t,"float32")},backend:e})}const r=Vr.makeZerosTypedArray(Vr.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function ay(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const sy={kernelName:An,backendName:"cpu",kernelFunc:ay};function oy(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:s}=r;if("complex64"===s){if("complex64"===a.dtype)return zg({inputs:{x:a},backend:n});const e=ry(n,a.shape,a.dtype),t=oy({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=ty({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=ay({inputs:{input:a},backend:n}),t=oy({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!Vr.hasEncodingLoss(a.dtype,s)){const e=zg({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if("int32"===s){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===s){const e=n.data.get(a.dataId).values,t=Vr.toTypedArray([0],a.dtype),[r,s]=Wg(((e,t)=>e!==t?1:0))(a.shape,[],e,t,"bool");return n.makeTensorInfo(s,"bool",r)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${s}`)}const iy={kernelName:Xe,backendName:"cpu",kernelFunc:oy};function ly(e,t,n,r){return null==n?({inputs:n,backend:a})=>{const{a:s,b:o}=n,i=a;Dg([s,o],e);const l=i.data.get(s.dataId).values,u=i.data.get(o.dataId).values,c="string"===s.dtype?zl.fromUint8ToStringArray(l):l,p="string"===s.dtype?zl.fromUint8ToStringArray(u):u,h=r||s.dtype,[d,f]=t(s.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:a})=>{const{a:s,b:o}=e,i=a;if("complex64"===s.dtype||"complex64"===o.dtype){const e=oy({inputs:{x:s},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=i.data.get(r.dataId).values,u=i.data.get(a.dataId).values,c=oy({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,b]=n(s.shape,o.shape,l,u,f,m),x=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),k=ty({inputs:{real:x,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(w),k}{const e=i.data.get(s.dataId).values,n=i.data.get(o.dataId).values,a=r||s.dtype,[l,u]=t(s.shape,o.shape,e,n,a);return i.makeTensorInfo(u,a,l)}}}function uy(e){return(t,n,r,a,s,o)=>{const i=zl.assertAndGetBroadcastShape(t,n),l=Vr.sizeFromShape(i),u=i.length,c=Vr.computeStrides(i),p=Vr.getTypedArrayFromDType("float32",l),h=Vr.getTypedArrayFromDType("float32",l),d=zl.getBroadcastDims(t,i),f=zl.getBroadcastDims(n,i),m=zl.mergeRealAndImagArrays(r,a),g=zl.mergeRealAndImagArrays(s,o),y=t.length,b=Vr.computeStrides(t),x=n.length,w=Vr.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,a=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=a.real,h[t]=a.imag}else for(let t=0;t<p.length;t++){const n=Vr.indexToLoc(t,u,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const a=Vr.locToIndex(r,y,b),s=n.slice(-x);f.forEach((e=>s[e]=0));const o=Vr.locToIndex(s,x,w),i=e(m[2*a],m[2*a+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const cy=Wg(((e,t)=>e+t)),py=uy(((e,t,n,r)=>({real:e+n,imag:t+r}))),hy=ly(Ae,cy,py),dy={kernelName:Ae,backendName:"cpu",kernelFunc:hy};function fy(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,o=Vr.sizeFromShape(a.shape),i=Vr.inferFromImplicitShape(s,o),l=Vr.sizeFromShape(i);Vr.assert(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const u=n.data.get(a.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:a.dataId,shape:i,dtype:a.dtype}}const my={kernelName:Dn,backendName:"cpu",kernelFunc:fy};function gy(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:o,transposeB:i}=r;Dg([a,s],"matMul");const l=a.shape.length,u=s.shape.length,c=o?a.shape[l-2]:a.shape[l-1],p=i?s.shape[u-1]:s.shape[u-2],h=o?a.shape[l-1]:a.shape[l-2],d=i?s.shape[u-2]:s.shape[u-1],f=a.shape.slice(0,-2),m=s.shape.slice(0,-2),g=Vr.sizeFromShape(f),y=Vr.sizeFromShape(m),b=sl.assertAndGetBroadcastShape(a.shape.slice(0,-2),s.shape.slice(0,-2)).concat([h,d]);Vr.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${a.shape} and ${s.shape} and transposeA=${o} and transposeB=${i} must match.`));const x=i?[y,d,p]:[y,p,d],w=fy({inputs:{x:a},backend:n,attrs:{shape:o?[g,c,h]:[g,h,c]}}),k=fy({inputs:{x:s},backend:n,attrs:{shape:x}}),v=o?w.shape[1]:w.shape[2],N=o?w.shape[2]:w.shape[1],S=i?k.shape[1]:k.shape[2],I=Math.max(g,y),T=n.data.get(w.dataId).values,E=n.data.get(k.dataId).values,$=Vr.computeStrides(w.shape),C=Vr.computeStrides(k.shape),[A,R,_]=o?[$[0],1,$[1]]:[$[0],$[1],1],[D,F,O]=i?[1,C[1],C[0]]:[C[1],1,C[0]],M=N*S,L=zi([I,N,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<N;t+=B)for(let n=0;n<S;n+=B)for(let r=0;r<v;r+=B){const a=Math.min(t+B,N),s=Math.min(n+B,S),o=Math.min(r+B,v);for(let i=t;i<a;i++)for(let t=n;t<s;t++){let n=0;for(let a=r;a<o;a++){const r=Math.min(e,g-1)*A,s=Math.min(e,y-1)*O;n+=T[r+i*R+a*_]*E[a*D+t*F+s]}z[e*M+(i*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const yy={kernelName:He,backendName:"cpu",kernelFunc:gy};const by={kernelName:Er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;let h,d,f;const m=[];h=gy({inputs:{a:a,b:s},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(d=hy({inputs:{a:h,b:o},backend:n}),m.push(h),h=d),c&&(f=ey(n,h,c,i,p),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}};function xy(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const wy={kernelName:Ee,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Dg(t,"abs");let r=new Float32Array(Vr.sizeFromShape(t.shape));return r=xy(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},ky=Fg($e,(e=>Math.acos(e))),vy={kernelName:$e,backendName:"cpu",kernelFunc:ky},Ny=Fg(Ce,(e=>Math.acosh(e))),Sy={kernelName:Ce,backendName:"cpu",kernelFunc:Ny};const Iy={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;Dg(t,"addN");const a=r.map((e=>n.data.get(e.dataId).values)),s=zi(r[0].shape,r[0].dtype),o=s.values;for(let e=0;e<r.length;e++){const t=a[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(s.shape,s.dtype,s.values)}};function Ty(e,t,n,r,a){const s=t.length,o=Vr.sizeFromShape(t),i=Vr.computeStrides(t),l=Vr.computeStrides(a),u=Vr.getTypedArrayFromDType(n,Vr.sizeFromShape(a));for(let t=0;t<o;++t){const n=Vr.indexToLoc(t,s,i),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[r[e]];u[Vr.locToIndex(a,s,l)]=e[t]}return u}function Ey(e){const{inputs:t,attrs:n,backend:r}=e,{x:a}=t,{perm:s}=n;Dg(a,"transpose");const o=a.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=a.shape[s[e]];const l=Ty(r.data.get(a.dataId).values,a.shape,a.dtype,s,i);return{dataId:r.write(l,i,a.dtype),shape:i,dtype:a.dtype}}const $y={kernelName:xr,backendName:"cpu",kernelFunc:Ey};const Cy={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Dg(a,"all");const i=Vr.parseAxisParam(s,a.shape);let l=i;const u=zl.getAxesPermutation(l,a.shape.length);let c=a;null!=u&&(c=Ey({inputs:{x:a},backend:n,attrs:{perm:u}}),l=zl.getInnerMostAxes(l.length,a.shape.length)),zl.assertAxesAreInnerMostDims("all",l,c.shape.length);const[p,h]=zl.computeOutAndReduceShapes(c.shape,l),d=Vr.sizeFromShape(h),f=Vr.makeZerosTypedArray(Vr.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=fy({inputs:{x:g},backend:n,attrs:{shape:zl.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Ay={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Dg(a,"any");const i=Vr.parseAxisParam(s,a.shape);let l=i;const u=zl.getAxesPermutation(l,a.shape.length);let c=a;null!=u&&(c=Ey({inputs:{x:a},backend:n,attrs:{perm:u}}),l=zl.getInnerMostAxes(l.length,a.shape.length)),zl.assertAxesAreInnerMostDims("any",l,c.shape.length);const[p,h]=zl.computeOutAndReduceShapes(c.shape,l),d=Vr.sizeFromShape(h),f=Vr.makeZerosTypedArray(Vr.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=fy({inputs:{x:g},backend:n,attrs:{shape:zl.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Ry={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;Dg(a,"argMax");let o=Vr.parseAxisParam(s,a.shape);const i=zl.getAxesPermutation(o,a.shape.length);let l=a;const u=[];null!=i&&(l=Ey({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=zl.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],zl.assertAxesAreInnerMostDims("argMax",o,l.shape.length);const[c,p]=zl.computeOutAndReduceShapes(l.shape,o),h=Vr.sizeFromShape(c),d=Vr.makeZerosTypedArray(h,"int32"),f=Vr.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const a=m[t+e];a>n&&(n=a,r=e)}d[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const _y={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;Dg(a,"argMin");let o=Vr.parseAxisParam(s,a.shape);const i=zl.getAxesPermutation(o,a.shape.length);let l=a;const u=[];null!=i&&(l=Ey({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=zl.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],zl.assertAxesAreInnerMostDims("argMin",o,l.shape.length);const[c,p]=zl.computeOutAndReduceShapes(l.shape,o),h=Vr.sizeFromShape(c),d=Vr.makeZerosTypedArray(h,"int32"),f=Vr.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const a=m[t+e];a<n&&(n=a,r=e)}d[e]=r}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},Dy=Fg(Me,(e=>Math.asin(e))),Fy={kernelName:Me,backendName:"cpu",kernelFunc:Dy},Oy=Fg(Le,(e=>Math.asinh(e))),My={kernelName:Le,backendName:"cpu",kernelFunc:Oy},Ly=Fg(ze,(e=>Math.atan(e))),zy={kernelName:ze,backendName:"cpu",kernelFunc:Ly},By=Wg(((e,t)=>Math.atan2(e,t))),Py=ly(Pe,By),Vy={kernelName:Pe,backendName:"cpu",kernelFunc:Py},Wy=Fg(Be,(e=>Math.atanh(e))),Uy={kernelName:Be,backendName:"cpu",kernelFunc:Wy};function Gy(e,t,n,r,a,s){const o=a.strideHeight,i=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,c=a.effectiveFilterHeight,p=a.effectiveFilterWidth,h=a.padInfo.top,d=a.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=zi(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],x=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){const w=y*o-h,k=Math.max(0,w),v=Math.min(a.inHeight,c+w),N=n+y*b;for(let n=0;n<a.outWidth;++n){const o=n*i-d,c=Math.max(0,o),h=Math.min(a.inWidth,p+o);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const a=m+n*r[1];for(let n=c;n<h;n+=u){const o=e[a+n*r[2]+t];"max"===s&&o>y?y=o:"avg"===s&&(b+=o,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===s?b/w:y}}}return m}function Hy(e,t,n,r,a=!1,s=!1){const o=zi(r.outShape,"int32"),i=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,p=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=zi(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,p+g);for(let i=0;i<r.outWidth;++i){const p=i*l-f;let d=p;for(;d<0;)d+=c;const x=Math.min(r.inWidth,h+p);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const o=n-g;for(let i=d;i<x;i+=c){const l=i-p,u=m.get(e,n,i,t);u>w&&(w=u,k=a?s?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*h+l)}}o.set(k,e,n,i,t)}}return o}function jy(e,t,n,r,a,s){const o=a.strideDepth,i=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,c=a.dilationHeight,p=a.dilationWidth,h=a.effectiveFilterDepth,d=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=zi(a.outShape,n),w=x.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],v=a.outShape[2]*a.outShape[3]*a.outShape[4],N=a.outShape[3]*a.outShape[4],S=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,x=t*r[0];for(let t=0;t<a.inChannels;++t)for(let k=0;k<a.outDepth;++k){const I=k*o-m;let T=I;for(;T<0;)T+=u;const E=Math.min(a.inDepth,h+I),$=n+k*v;for(let n=0;n<a.outHeight;++n){const o=n*i-g;let h=o;for(;h<0;)h+=c;const m=Math.min(a.inHeight,d+o),k=$+n*N;for(let n=0;n<a.outWidth;++n){const o=n*l-y;let i=o;for(;i<0;)i+=p;const d=Math.min(a.inWidth,f+o),g=k+n*S;let v=b,N=0,I=0;for(let n=T;n<E;n+=u){const a=x+n*r[1];for(let n=h;n<m;n+=c){const o=a+n*r[2];for(let n=i;n<d;n+=p){const a=e[o+n*r[3]+t];if("max"===s&&a>v?v=a:"avg"===s&&(N+=a,I++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===s?N/I:v}}}}return x}const qy={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;Dg(a,"avgPool");const{filterSize:s,strides:o,pad:i,dimRoundingMode:l}=r;Vr.assert(zl.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=zl.computePool2DInfo(a.shape,s,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Vr.arraysEqual(u.inShape,u.outShape))c=zg({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=Vr.computeStrides(a.shape),r=Gy(e,a.shape,a.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,a.dtype,r.values)}return c}};const Ky={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;Dg(a,"avgPool3d");const c=zl.computePool3DInfo(a.shape,s,o,1,i,l,u),p=jy(n.data.get(a.dataId).values,a.shape,a.dtype,Vr.computeStrides(a.shape),c,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}};const Xy={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;Dg([a,s],"avgPool3DGrad");const c=zl.computePool3DInfo(s.shape,o,i,1,l,u),p=c.strideDepth,h=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,S=v-1-c.padInfo.left,I=k-1-c.padInfo.top,T=zi(s.shape,"float32"),E=1/(f*m*g),$=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let a=0;a<c.inWidth;++a){const s=n-N,o=r-I,i=a-S;let l=0;for(let n=0;n<w;n+=y){const r=(s+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=b){const a=(o+n)/h;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<v;n+=x){const s=(i+n)/d;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;l+=$.get(e,r,a,s,t)}}}T.set(l*E,e,n,r,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Yy={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,o=s;Dg([a,s],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=zl.computePool2DInfo(o.shape,i,l,1,u),p=c.strideHeight,h=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=zi(o.shape,"float32"),v=1/(d*f),N=n.data.get(a.dataId).values,S=zi(a.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const a=n-w,s=r-x;let o=0;for(let n=0;n<y;n+=m){const r=(a+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const a=(s+n)/h;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;o+=S.get(e,r,a,t)}}k.set(o*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const Zy={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,scale:s,offset:o,mean:i,variance:l}=t;Vr.assert(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Vr.assert(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Vr.assert(null==s||i.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Dg([a,i,l,s,o],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);const c=n.data.get(a.dataId).values,p=n.data.get(i.dataId).values,h=n.data.get(l.dataId).values,d=s?n.data.get(s.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=h.length,x=p.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-p[k++])*d[v++]/Math.sqrt(h[N++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(a.shape,a.dtype,m)}};function Jy(e,t,n,r,a){const s=gl.isSliceContinous(r,t,n),o=Vr.sizeFromShape(n),i=Vr.computeStrides(r);if(s){const n=gl.computeFlatOffset(t,i);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const l=zi(r,a,"string"===a?zl.fromUint8ToStringArray(e):e),u=zi(n,a);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));u.set(l.get(...r),...n)}return"string"===a?zl.fromStringArrayToUint8(u.values):u.values}function Qy(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:o}=r;Dg(a,"slice");const[i,l]=gl.parseSliceParams(a,s,o);gl.assertParamsValid(a,i,l);const u=Jy(n.data.get(a.dataId).values,i,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,u)}const eb={kernelName:Hn,backendName:"cpu",kernelFunc:Qy};const tb={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:o}=r;Dg([a],"batchToSpaceND");const i=s.reduce(((e,t)=>e*t)),l=zl.getReshaped(a.shape,s,i),u=zl.getPermuted(l.length,s.length),c=zl.getReshapedPermuted(a.shape,s,i),p=zl.getSliceBeginCoords(o,s.length),h=zl.getSliceSize(c,o,s.length),d=fy({inputs:{x:a},backend:n,attrs:{shape:l}}),f=Ey({inputs:{x:d},backend:n,attrs:{perm:u}}),m=fy({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Qy({inputs:{x:m},backend:n,attrs:{begin:p,size:h}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function nb(e,t,n,r,a){const s=Vr.sizeFromShape(r),o=Vr.makeZerosTypedArray(a,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=a||(o[r]+=s>0?t[n]:1)}return o}function rb(e,t,n,r=!1){const a=e.shape[0],s=e.shape[1],o=zi([a,n],t.dtype);for(let i=0;i<a;i++)for(let a=0;a<s;a++){const s=e.get(i,a);if(s<0)throw new Error("Input x must be non-negative!");s>=n||(r?o.set(1,i,s):t.size>0?o.set(o.get(i,s)+t.get(i,a),i,s):o.set(o.get(i,s)+1,i,s))}return o}const ab={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=nb(n.data.get(a.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,i)}};const sb={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=zl.assertAndGetBroadcastShape(Array.from(s),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},ob=Yg((e=>Math.ceil(e))),ib=Og(Ye,ob),lb={kernelName:Ye,backendName:"cpu",kernelFunc:ib},ub=Fg(Ze,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),cb={kernelName:Ze,backendName:"cpu",kernelFunc:ub},pb={kernelName:Qe,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(Vr.sizeFromShape(t.shape)),a=n.data.get(t.dataId),s=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,i=n.data.get(s.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function hb(e,t,n,r){const a=Vr.getArrayFromDType(n,Vr.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=Vr.sizeFromShape(e.shape);a.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const s="string"===n?zl.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[i+t]=s[o++]}r+=e.shape[1]}))}return a}function db(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const fb={kernelName:Vt,backendName:"cpu",kernelFunc:db};function mb(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=Vr.parseAxisParam(a,t[0].shape)[0];let o=zl.computeOutShape(t.map((e=>e.shape)),s);if(0===Vr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>Vr.sizeFromShape(e.shape)>0));if(1===i.length)return zg({inputs:{x:i[0]},backend:n});const l=i.map((e=>e.shape));if(zl.assertParamsConsistent(l,s),"complex64"===i[0].dtype){const e=i.map((e=>ay({inputs:{input:e},backend:n}))),t=i.map((e=>db({inputs:{input:e},backend:n}))),r=mb({inputs:e,backend:n,attrs:{axis:s}}),a=mb({inputs:t,backend:n,attrs:{axis:s}}),o=ty({inputs:{real:r,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}const u=i.map((e=>{const t=Vr.sizeFromShape(e.shape.slice(s));return fy({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=zl.computeOutShape(u.map((e=>e.shape)),1);const p=1===u[0].shape[0],h=hb(c,o,t[0].dtype,p),d=zl.computeOutShape(i.map((e=>e.shape)),s),f=n.makeTensorInfo(d,t[0].dtype,h);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const gb={kernelName:et,backendName:"cpu",kernelFunc:mb};function yb(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r;Dg([a,s],"conv2d");const p=zl.convertConv2DDataFormat(l),h=zl.computeConv2DInfo(a.shape,s.shape,o,u,i,c,!1,p),d=h.filterHeight,f=h.filterWidth,m=h.dilationHeight,g=h.dilationWidth,y=h.padInfo.left,b=h.padInfo.top,x="channelsLast"===h.dataFormat,w=new Va(h.outShape,a.dtype),k=Vr.computeStrides(a.shape),v=Vr.computeStrides(s.shape),N=k[0],S=x?k[1]:k[2],I=x?k[2]:1,T=x?1:k[1],E=w.strides[0],$=x?w.strides[1]:w.strides[2],C=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(a.dataId).values,_=n.data.get(s.dataId).values,D=w.values;for(let e=0;e<h.batchSize;++e){const t=e*N,n=e*E;for(let e=0;e<h.outHeight;++e){const r=n+e*$,a=e*h.strideHeight-b;for(let e=0;e<d;++e){const n=a+e*m;if(n<0||n>=h.inHeight)continue;const s=e*v[0],o=t+n*S;for(let e=0;e<h.outWidth;++e){const t=r+e*C,n=e*h.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=h.inWidth)continue;const a=o+r*I;let i=s+e*v[1];for(let e=0;e<h.inChannels;++e){const n=R[a+e*T];for(let e=0;e<h.outChannels;++e)D[t+e*A]+=n*_[i+e];i+=h.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const bb={kernelName:tt,backendName:"cpu",kernelFunc:yb};const xb={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;Dg([a,s],"conv2dBackpropFilter");const p=zl.convertConv2DDataFormat(l),h=zl.computeConv2DInfo(a.shape,c,o,1,i,u,!1,p),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y="channelsLast"===h.dataFormat,b=new Va(h.filterShape,"float32"),x=h.padInfo.left,w=h.padInfo.top,k=n.data.get(a.dataId).values,v=n.data.get(s.dataId).values,N=new Va(a.shape,a.dtype,k),S=new Va(s.shape,s.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(h.outHeight,(h.inHeight+w-e)/d);for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((x-r)/f)),s=Math.min(h.outWidth,(h.inWidth+x-r)/f);for(let o=0;o<h.inChannels;++o)for(let i=0;i<h.outChannels;++i){let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=a;e<s;++e){const n=r+e*f-x;l+=y?N.get(u,t,n,o)*S.get(u,c,e,i):N.get(u,o,t,n)*S.get(u,i,c,e)}}b.set(l,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const wb={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r;Dg([a,s],"conv2dBackpropInput");const p=Vr.computeStrides(s.shape),h=Vr.computeStrides(a.shape);let d=zl.convertConv2DDataFormat(u);const f=zl.computeConv2DInfo(o,s.shape,i,1,l,c,!1,d),m=new Va(f.inShape,"float32"),g=m.values,y=n.data.get(a.dataId).values,b=n.data.get(s.dataId).values,[x,w,k]=p,{batchSize:v,filterHeight:N,filterWidth:S,inChannels:I,inHeight:T,inWidth:E,outChannels:$,outHeight:C,outWidth:A,strideHeight:R,strideWidth:_}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,F=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=h[0],V=O?h[1]:h[2],W=O?h[2]:1,U=O?1:h[1];for(let e=0;e<v;++e)for(let t=0;t<I;++t)for(let n=0;n<T;++n){const r=n-D,a=Math.max(0,Math.ceil(r/R)),s=Math.min(C,(N+r)/R);for(let o=0;o<E;++o){const i=o-F,l=Math.max(0,Math.ceil(i/_)),u=Math.min(A,(S+i)/_);let c=0;for(let n=a;n<s;++n){const a=n*R-r;for(let r=l;r<u;++r){const s=P*e+V*n+W*r,o=x*(N-1-a)+w*(S-1-(r*_-i))+k*t;for(let e=0;e<$;++e){c+=y[s+U*e]*b[o+e]}}}g[M*e+L*n+z*o+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const kb={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:l}=r;Dg([a,s],"conv3d");const u=zl.computeConv3DInfo(a.shape,s.shape,o,l,i),{filterDepth:c,filterHeight:p,filterWidth:h,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Va(u.outShape,a.dtype),k=n.data.get(a.dataId).values,v=n.data.get(s.dataId).values,N=w.values,S=Vr.computeStrides(a.shape),I=Vr.computeStrides(s.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const r=n+e*w.strides[1],a=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=a+e*d;if(n<0||n>=u.inDepth)continue;const s=e*I[0],o=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=r+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){const r=n+e*f;if(r<0||r>=u.inHeight)continue;const a=s+e*I[1],i=o+r*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<h;++e){const t=r+e*m;if(t<0||t>=u.inWidth)continue;const s=a+e*I[2],o=i+t*u.inChannels;let l=s;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const vb={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,pad:i,filterShape:l}=r;Dg([a,s],"conv3dBackpropFilterV2");const u=Vr.computeStrides(a.shape),c=Vr.computeStrides(s.shape),p=zl.computeConv3DInfo(a.shape,l,o,1,i),h=p.strideDepth,d=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new Va(p.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,S=n.data.get(s.dataId).values,[I,T,E,$]=c,C=n.data.get(a.dataId).values,[A,R,_,D]=u,F=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((F-e)/h)),n=Math.min(p.outDepth,(p.inDepth+F-e)/h),r=e*w;for(let a=0;a<g;++a){const s=Math.max(0,Math.ceil((M-a)/d)),o=Math.min(p.outHeight,(p.inHeight+M-a)/d),i=a*k+r;for(let r=0;r<y;++r){const l=Math.max(0,Math.ceil((O-r)/f)),u=Math.min(p.outWidth,(p.inWidth+O-r)/f),c=r*v+i;for(let i=0;i<p.inChannels;++i){const m=i*N+c;for(let c=0;c<p.outChannels;++c){let g=0;for(let m=0;m<p.batchSize;++m){const p=m*A,y=m*I;for(let m=t;m<n;++m){const t=(e+m*h-F)*R+p,n=m*T+y;for(let e=s;e<o;++e){const s=(a+e*d-M)*_+t,o=e*E+n;for(let e=l;e<u;++e){const t=e*$+o;g+=C[(r+e*f-O)*D+s+i]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Nb={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:o,strides:i,inputShape:l}=r;Dg([a],"conv3dBackpropInputV2");const u=Vr.computeStrides(a.shape),c=Vr.computeStrides(s.shape),p=zl.computeConv3DInfo(l,s.shape,i,1,o),h=new Va(p.inShape,"float32"),d=h.values,[f,m,g,y]=h.strides,b=n.data.get(a.dataId).values,[x,w,k,v]=u,N=n.data.get(s.dataId).values,[S,I,T,E]=c,{batchSize:$,filterDepth:C,filterHeight:A,filterWidth:R,inChannels:_,inDepth:D,inHeight:F,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:V,strideWidth:W}=p,U=C-1-p.padInfo.front,G=A-1-p.padInfo.top,H=R-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<_;++t)for(let n=0;n<D;++n){const r=n-U,a=Math.max(0,Math.ceil(r/P)),s=Math.min(L,(C+r)/P);for(let o=0;o<F;++o){const i=o-G,l=Math.max(0,Math.ceil(i/V)),u=Math.min(z,(A+i)/V);for(let c=0;c<O;++c){const p=c-H,h=Math.max(0,Math.ceil(p/W)),$=Math.min(B,(R+p)/W);let _=0;for(let n=a;n<s;++n){const a=n*P-r;for(let r=l;r<u;++r){const s=r*V-i;for(let o=h;o<$;++o){const i=x*e+w*n+k*r+v*o,l=S*(C-1-a)+I*(A-1-s)+T*(R-1-(o*W-p))+E*t;for(let e=0;e<M;++e){_+=b[i+e]*N[l+e]}}}}d[f*e+m*n+g*o+y*c+t]=_}}}return n.makeTensorInfo(h.shape,h.dtype,h.values)}},Sb=Fg(it,(e=>Math.cos(e))),Ib={kernelName:it,backendName:"cpu",kernelFunc:Sb},Tb=Fg(lt,(e=>Math.cosh(e))),Eb={kernelName:lt,backendName:"cpu",kernelFunc:Tb};const $b={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,[c,p,h,d]=a.shape,f=s.shape[0],[m,g]=i,y=zi([f,m,g,d],"float32"),b=n.data.get(s.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(a.dataId).values,k=Vr.computeStrides(a.shape),v=Vr.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],a=b[t+2],s=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(a-n)*(p-1)/(m-1):0,f=g>1?(s-r)*(h-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+a)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=u}else if("bilinear"===l){const n=Math.floor(c),a=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?r*(h-1)+l*f:.5*(r+s)*(h-1);if(c<0||c>h-1){for(let n=0;n<d;n++){const r=n+l*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const p=Math.floor(c),m=Math.ceil(c),b=c-p;for(let r=0;r<d;r++){let s=r+p*k[2]+n*k[1]+o*k[0];const u=w[s];s=r+m*k[2]+n*k[1]+o*k[0];const c=w[s];s=r+p*k[2]+a*k[1]+o*k[0];const h=w[s];s=r+m*k[2]+a*k[1]+o*k[0];const d=u+(c-u)*b,f=h+(w[s]-h)*b;s=r+l*v[2]+t*v[1]+e*v[0],y.values[s]=d+(f-d)*i}}}else for(let n=0;n<g;++n){const a=g>1?r*(h-1)+n*f:.5*(r+s)*(h-1);if(a<0||a>h-1){for(let r=0;r<d;r++){const a=r+n*v[2]+t*v[1]+e*v[0];y.values[a]=u}continue}const i=Math.round(a),l=Math.round(c);for(let r=0;r<d;r++){const a=r+i*k[2]+l*k[1]+o*k[0],s=r+n*v[2]+t*v[1]+e*v[0];y.values[s]=w[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Cb={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;Dg(a,"cumsum");const l=zl.getAxesPermutation([s],a.shape.length);let u=a;null!=l&&(u=Ey({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=zl.getInnerMostAxes(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=ss(u.dtype,"int32"),h=Vr.makeZerosTypedArray(Vr.sizeFromShape(u.shape),p),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)h[n]=o?0:d[n];else{const r=m(e,t-1);h[n]=o?d[r]+h[r]:d[n]+h[r]}}const g=n.makeTensorInfo(u.shape,p,h);if(null!=l){const e=Ey({inputs:{x:g},backend:n,attrs:{perm:zl.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const Ab={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=nb(n.data.get(a.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,e)}if(2===a.shape.length){const e=rb(n.bufferSync(a),n.bufferSync(s),o,i);return n.makeTensorInfo(e.shape,s.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};const Rb={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:o}=r;Vr.assert("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=a.shape[0],l=a.shape[1],u=a.shape[2],c=a.shape[3],p=l*s,h=u*s,d=c/(s*s),f=n.data.get(a.dataId).values,m=new Float32Array(i*p*h*d);let g=0;for(let e=0;e<i;++e)for(let t=0;t<p;++t){const n=Math.floor(t/s),r=t%s;for(let t=0;t<h;++t){const a=Math.floor(t/s),o=(r*s+t%s)*d;for(let t=0;t<d;++t){const r=t+o+c*(a+u*(n+l*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,p,h,d],a.dtype,m)}};function _b(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;Dg([a,s],"depthwiseConv2DNative");const c=Vr.computeStrides(a.shape),p=Vr.computeStrides(s.shape);let h=l;null==h&&(h=[1,1]),Vr.assert(zl.eitherStridesOrDilationsAreOne(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const d=zl.computeConv2DInfo(a.shape,s.shape,o,h,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new Va(d.outShape,a.dtype),N=n.data.get(a.dataId).values,S=n.data.get(s.dataId).values,I=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*v.strides[1],a=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=a+e*g;if(n<0||n>=d.inHeight)continue;const s=e*p[0],o=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const a=s+e*p[1],i=o+r*d.inChannels;let l=t,u=a;for(let e=0;e<d.inChannels;++e){const t=N[i+e];for(let e=0;e<k;++e)I[l+e]+=t*S[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const Db={kernelName:dt,backendName:"cpu",kernelFunc:_b};const Fb={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r;Dg([a,s],"depthwiseConv2dNativeBackpropFilter");const p=zl.computeConv2DInfo(a.shape,c,o,i,l,u,!0),{strideHeight:h,strideWidth:d,filterHeight:f,filterWidth:m}=p,g=new Va(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,w=n.data.get(a.dataId).values,k=new Va(a.shape,a.dtype,w),v=n.data.get(s.dataId).values,N=new Va(s.shape,s.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/h)),n=Math.min(p.outHeight,(p.inHeight+b-e)/h);for(let r=0;r<m;++r){const a=Math.max(0,Math.ceil((y-r)/d)),s=Math.min(p.outWidth,(p.inWidth+y-r)/d);for(let o=0;o<p.outChannels;++o){const i=Math.trunc(o/x),l=o%x;let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*h-b;for(let e=a;e<s;++e){const n=r+e*d-y;u+=k.get(l,t,n,i)*N.get(l,c,e,o)}}g.set(u,e,r,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const Ob={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r;Dg([a,s],"depthwiseConv2DNativeBackpropInput");const p=Vr.computeStrides(a.shape),h=Vr.computeStrides(s.shape),d=zl.computeConv2DInfo(c,s.shape,o,i,l,u,!0),f=new Va(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(a.dataId).values,[w,k,v]=p,N=n.data.get(s.dataId).values,[S,I,T]=h,{batchSize:E,filterHeight:$,filterWidth:C,inChannels:A,inHeight:R,inWidth:_,outChannels:D,outHeight:F,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=C-1-d.padInfo.left,P=D/A;for(let e=0;e<E;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const r=n-z,a=Math.max(0,Math.ceil(r/M)),s=Math.min(F,($+r)/M);for(let o=0;o<_;++o){const i=o-B,l=Math.max(0,Math.ceil(i/L)),u=Math.min(O,(C+i)/L);let c=0;for(let n=a;n<s;++n){const a=n*M-r;for(let r=l;r<u;++r){const s=w*e+k*n+v*r,o=S*($-1-a)+I*(C-1-(r*L-i))+T*t;for(let e=0;e<P;++e){c+=x[s+(t*P+e)]*N[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const Mb={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=Vr.sizeFromShape(r.shape),s=n.data.get(r.dataId).values,o=zi([a,a],r.dtype),i=o.values;for(let e=0;e<s.length;e++)i[e*a+e]=s[e];const l=[...r.shape,...r.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},Lb={kernelName:yt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a}=e,{strides:s,pad:o,dilations:i}=n,l=t,u=l.data.get(r.dataId).values,c=r.shape.length,p=l.data.get(a.dataId).values,h=a.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:S,dilationWidth:I,outShape:T}=zl.computeDilation2DInfo(r.shape,a.shape,s,o,"NHWC",i),E=Vr.sizeFromShape(T),$=T.length,C=Vr.getArrayFromDType(r.dtype,E);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const o=s*k-x.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<N;++n){const d=o+n*I;if(d>=0&&d<m){const o=Vr.locToIndex([e,s,d,i],c,Vr.computeStrides(r.shape)),f=Vr.locToIndex([t,n,i],h,Vr.computeStrides(a.shape)),m=u[o]+p[f];m>l&&(l=m)}}}C[Vr.locToIndex([e,t,s,i],$,Vr.computeStrides(T))]=l}}}return{dataId:l.write(Vr.toTypedArray(C,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},zb={kernelName:xt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:s}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Vr.toNestedArray(r.shape,u.data.get(r.dataId).values),p=Vr.toNestedArray(a.shape,u.data.get(a.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=zl.computeDilation2DInfo(r.shape,a.shape,o,i,"NHWC",l);Vr.assert(s.rank===I.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got ${s.rank}`));const T=Vr.toNestedArray(I,u.data.get(s.dataId).values),E=Vr.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const a=r*w-b.left;for(let s=0;s<m;++s){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const u=a+n*S;if(u>=0&&u<f){const a=c[e][r][u][s]+p[t][n][s];a>o&&(o=a,i=t,l=n)}}}E[i][l][s]+=T[e][t][r][s]}}}return{dataId:u.write(Vr.toTypedArray(E,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},Bb={kernelName:bt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:s}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=Vr.toNestedArray(r.shape,u.data.get(r.dataId).values),p=Vr.toNestedArray(a.shape,u.data.get(a.dataId).values),{batchSize:h,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:S,outShape:I}=zl.computeDilation2DInfo(r.shape,a.shape,o,i,"NHWC",l);Vr.assert(s.rank===I.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got ${s.rank}`));const T=Vr.toNestedArray(I,u.data.get(s.dataId).values),E=Vr.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const a=r*w-b.left;for(let s=0;s<m;++s){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=a<0?0:a;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<d)for(let n=0;n<v;++n){const u=a+n*S;if(u>=0&&u<f){const a=c[e][r][u][s]+p[t][n][s];a>o&&(o=a,i=r,l=u)}}}E[e][i][l][s]+=T[e][t][r][s]}}}return{dataId:u.write(Vr.toTypedArray(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Pb=Wg(((e,t)=>e*t)),Vb=uy(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),Wb=ly(gn,Pb,Vb),Ub={kernelName:gn,backendName:"cpu",kernelFunc:Wb};function Gb(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;let i;Dg(a,"sum"),i="bool"===a.dtype?oy({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):zg({inputs:{x:a},backend:n});const l=i.shape.length,u=Vr.parseAxisParam(s,i.shape),c=zl.getAxesPermutation(u,l);let p=u,h=i;null!=c&&(h=Ey({inputs:{x:i},backend:n,attrs:{perm:c}}),p=zl.getInnerMostAxes(p.length,l)),zl.assertAxesAreInnerMostDims("sum",p,h.shape.length);const[d,f]=zl.computeOutAndReduceShapes(h.shape,p);let m=ry(n,d,zl.upcastType(h.dtype,"int32"));const g=Vr.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(h.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=fy({inputs:{x:m},backend:n,attrs:{shape:zl.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),m}const Hb={kernelName:Jn,backendName:"cpu",kernelFunc:Gb};const jb={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,s=t,{allDims:o,summedDims:i,idDims:l}=zl.decodeEinsumEquation(a,s.length);zl.checkEinsumDimSizes(o.length,l,s);const{path:u,steps:c}=zl.getEinsumComputePath(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=zl.getEinsumPermutation(d,l[t]);let a;zl.isIdentityPermutation(e)?a=s[t]:(a=Ey({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),f.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Vr.arraysEqual(a.shape,o)||(a=fy({inputs:{x:a},backend:n,attrs:{shape:o}}),f.push(a)),null===h?h=a:(h=Wb({inputs:{a:a,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=Gb({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const qb={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:a}=t;Dg([r,a],"eluGrad");const s=new Float32Array(Vr.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];s[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",s)}},Kb=Wg(((e,t)=>e===t?1:0)),Xb=ly(It,Kb,null,"bool"),Yb={kernelName:It,backendName:"cpu",kernelFunc:Xb},Zb=zl.ERF_P,Jb=zl.ERF_A1,Qb=zl.ERF_A2,ex=zl.ERF_A3,tx=zl.ERF_A4,nx=zl.ERF_A5,rx=Fg(St,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+Zb*n);return t*(1-((((nx*r+tx)*r+ex)*r+Qb)*r+Jb)*r*Math.exp(-n*n))})),ax={kernelName:St,backendName:"cpu",kernelFunc:rx},sx=Yg((e=>Math.exp(e))),ox=Og(Tt,sx,"float32"),ix={kernelName:Tt,backendName:"cpu",kernelFunc:ox};function lx(e){const{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:s}=r,o=a.shape.length,i=a.shape.slice();let l=s;return s<0&&(Vr.assert(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+s+1),i.splice(l,0,1),fy({inputs:{x:a},backend:n,attrs:{shape:i}})}const ux={kernelName:Et,backendName:"cpu",kernelFunc:lx},cx=Yg((e=>Math.expm1(e))),px=Og($t,cx),hx={kernelName:$t,backendName:"cpu",kernelFunc:px},dx=Wg(((e,t)=>e/t)),fx=ly(wt,dx),mx={kernelName:wt,backendName:"cpu",kernelFunc:fx},gx=Wg(((e,t)=>e-t)),yx=uy(((e,t,n,r)=>({real:e-n,imag:t-r}))),bx=ly(dr,gx,yx),xx={kernelName:dr,backendName:"cpu",kernelFunc:bx};function wx(e,t,n){const r=e.shape,a=r[0],s=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[a,s],c=Vr.sizeFromShape(u),p=Vr.getTypedArrayFromDType("float32",c),h=Vr.getTypedArrayFromDType("float32",c);for(let e=0;e<a;e++){const r=Qy({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,s]}}),a=Qy({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,s]}}),o=ty({inputs:{real:r,imag:a},backend:n}),{real:u,imag:c}=kx(o,t,n),d=zl.mergeRealAndImagArrays(u,c);for(let t=0;t<s;t++){const n=zl.getComplexWithIndex(d,t);p[e*s+t]=n.real,h[e*s+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o)}const d=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",h),m=ty({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function kx(e,t,n){const r=Vr.sizeFromShape(e.shape),a=n.data.get(e.dataId),s=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((i=r)&i-1)){const a=vx(s,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",a.real),t=n.makeTensorInfo(i,"float32",a.imag),s=n.makeTensorInfo([],"float32",Vr.createScalarValue(r,"float32")),o=zg({inputs:{x:s},backend:n}),l=mx.kernelFunc({inputs:{a:e,b:s},backend:n}),u=mx.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:p}}return a}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let a=0;a<t;a++){let s=0,o=0;for(let r=0;r<t;r++){const i=zl.exponent(a*r,t,n),l=zl.getComplexWithIndex(e,r);s+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(s/=t,o/=t),zl.assignToTypedArray(r,s,o,a)}return r}(zl.mergeRealAndImagArrays(s,o),r,t);return zl.splitRealAndImagArrays(e)}var i}function vx(e,t,n,r,a){if(1===n)return{real:e,imag:t};const s=zl.mergeRealAndImagArrays(e,t),o=n/2,i=zl.complexWithEvenIndex(s),l=i.real,u=i.imag,c=[l.length],p=a.makeTensorInfo(c,"float32",l),h=a.makeTensorInfo(c,"float32",u),d=ty({inputs:{real:p,imag:h},backend:a}),f=zl.complexWithOddIndex(s),m=f.real,g=f.imag,y=[m.length],b=a.makeTensorInfo(y,"float32",m),x=a.makeTensorInfo(y,"float32",g),w=ty({inputs:{real:b,imag:x},backend:a}),k=vx(l,u,o,r,a),v=k.real,N=k.imag,S=[v.length],I=a.makeTensorInfo(S,"float32",v),T=a.makeTensorInfo(S,"float32",N),E=ty({inputs:{real:I,imag:T},backend:a}),$=vx(m,g,o,r,a),C=$.real,A=$.imag,R=[C.length],_=a.makeTensorInfo(R,"float32",C),D=a.makeTensorInfo(R,"float32",A),F=ty({inputs:{real:_,imag:D},backend:a}),O=zl.exponents(n,r),M=[O.real.length],L=a.makeTensorInfo(M,"float32",O.real),z=a.makeTensorInfo(M,"float32",O.imag),B=ty({inputs:{real:L,imag:z},backend:a}),P=Wb({inputs:{a:B,b:F},backend:a}),V=hy({inputs:{a:E,b:P},backend:a}),W=bx({inputs:{a:E,b:P},backend:a}),U=ay({inputs:{input:V},backend:a}),G=ay({inputs:{input:W},backend:a}),H=db({inputs:{input:V},backend:a}),j=db({inputs:{input:W},backend:a}),q=mb({inputs:[U,G],backend:a,attrs:{axis:0}}),K=mb({inputs:[H,j],backend:a,attrs:{axis:0}}),X=a.data.get(q.dataId).values,Y=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(I),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(E),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const Nx={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=Vr.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],o=fy({inputs:{x:r},backend:n,attrs:{shape:[a/s,s]}}),i=wx(o,!1,n),l=fy({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function Sx(e){const{backend:t,attrs:n}=e,{shape:r,value:a,dtype:s}=n,o=s||Vr.inferDtype(a),i=Vr.getArrayFromDType(o,Vr.sizeFromShape(r));return function(e,t,n){e.fill(t)}(i,a),t.makeTensorInfo(r,o,i)}const Ix={kernelName:At,backendName:"cpu",kernelFunc:Sx};const Tx={kernelName:Rt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,a=n,s=Vr.getTypedArrayFromDType(r.dtype,Vr.sizeFromShape(r.shape)),[o,i,l,u]=r.shape,c=a.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const r=e*u;for(let a=0;a<u;a++){const o=Math.round(l-e-1),i=t+n+r+a;let p=c[i];if(o>=0&&o<l){p=c[t+n+o*u+a]}s[i]=p}}}}return{dataId:a.write(s,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Ex=Yg((e=>Math.floor(e))),$x=Og(_t,Ex),Cx={kernelName:_t,backendName:"cpu",kernelFunc:$x},Ax=Wg(((e,t)=>Math.floor(e/t))),Rx=ly(Dt,Ax,null,"int32"),_x={kernelName:Dt,backendName:"cpu",kernelFunc:Rx};const Dx={kernelName:$r,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=yb({inputs:{x:a,filter:s},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=hy({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=ey(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const Fx={kernelName:Cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r;let m=_b({inputs:{x:a,filter:s},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h}});if(o){const e=m;m=hy({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=ey(n,m,d,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function Ox(e,t,n,r,a,s,o,i,l){const u=zi([r,s],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<a;t++){const s=e[n*a+t];c+=s*o[t],r.push(s)}if(c<0||c>=l/s)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<s;e++)u.values[n*s+e]=t.get(...t.indexToLoc(c*s+e))}return u}const Mx={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=Vr.sizeFromShape(r.shape),o=a.shape,i=o[o.length-1],[l,u,c,p]=zl.prepareAndValidate(r,a);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);const h=Ox(n.data.get(a.dataId).values,n.bufferSync(r),r.dtype,u,i,c,p,r.shape,s);return n.makeTensorInfo(l,r.dtype,h.values)}};function Lx(e,t,n){const r=zi(n,e.dtype);for(let n=0;n<r.size;++n){const a=r.indexToLoc(n).slice(),s=a[0],o=a[2],i=t.locToIndex([s,o]);a[2]=t.values[i];const l=e.locToIndex(a);0<=l&&l<e.values.length&&(r.values[n]=e.values[l])}return r}const zx={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:o,batchDims:i}=r;Dg([a,s],"gatherV2");const l=Vr.parseAxisParam(o,a.shape)[0],u=n.data.get(s.dataId).values,c=a.shape[l];for(let e=0;e<u.length;++e){const t=u[e];Vr.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let p=i;null==i&&(p=0);const h=Vr.sizeFromShape(s.shape),d=zl.segment_util.collectGatherOpShapeInfo(a,s,l,p),f=fy({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=fy({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,h/d.batchSize]}}),g=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=Lx(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},Bx=Wg(((e,t)=>e>t?1:0)),Px=ly(Lt,Bx,null,"bool"),Vx={kernelName:Lt,backendName:"cpu",kernelFunc:Px},Wx=Wg(((e,t)=>e>=t?1:0)),Ux=ly(zt,Wx,null,"bool"),Gx={kernelName:zt,backendName:"cpu",kernelFunc:Ux};const Hx={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=Vr.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],o=fy({inputs:{x:r},backend:n,attrs:{shape:[a/s,s]}}),i=wx(o,!0,n),l=fy({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},jx=Fg(Wt,(e=>Number.isFinite(e)?1:0),"bool"),qx={kernelName:Wt,backendName:"cpu",kernelFunc:jx},Kx=Fg(Ut,(e=>Math.abs(e)===1/0?1:0),"bool"),Xx={kernelName:Ut,backendName:"cpu",kernelFunc:Kx},Yx=Fg(Gt,(e=>Number.isNaN(e)?1:0),"bool"),Zx={kernelName:Gt,backendName:"cpu",kernelFunc:Yx},Jx=Wg(((e,t)=>e<t?1:0)),Qx=ly(jt,Jx,null,"bool"),ew={kernelName:jt,backendName:"cpu",kernelFunc:Qx},tw=Wg(((e,t)=>e<=t?1:0)),nw=ly(qt,tw,null,"bool"),rw={kernelName:qt,backendName:"cpu",kernelFunc:nw};function aw(e,t,n){const r=(t-e)/(n-1),a=Vr.makeZerosTypedArray(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a}const sw={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=aw(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},ow=Yg((e=>Math.log(e))),iw=Og(Xt,ow),lw={kernelName:Xt,backendName:"cpu",kernelFunc:iw},uw=Fg(Yt,(e=>Math.log1p(e))),cw={kernelName:Yt,backendName:"cpu",kernelFunc:uw},pw=Wg(((e,t)=>e&&t)),hw=ly(Zt,pw,null,"bool"),dw={kernelName:Zt,backendName:"cpu",kernelFunc:hw},fw=Fg(Jt,(e=>e?0:1),"bool"),mw={kernelName:Jt,backendName:"cpu",kernelFunc:fw},gw=Wg(((e,t)=>e||t)),yw=ly(Qt,gw,null,"bool"),bw={kernelName:Qt,backendName:"cpu",kernelFunc:yw};const xw={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:o,alpha:i,beta:l}=r;Dg(a,"LRN");const u=a.shape[3],c=u-1,p=n.data.get(a.dataId).values,h=Vr.sizeFromShape(a.shape),d=new Float32Array(h);function f(e){const t=e%u;let n=e-t+Math.max(0,t-s);const r=e-t+Math.min(t+s,c);let a=0;for(;n<=r;n++){const e=p[n];a+=e*e}return a}for(let e=0;e<h;e++){const t=f(e),n=p[e]*Math.pow(o+i*t,-l);d[e]=n}return n.makeTensorInfo(a.shape,a.dtype,d)}};const ww={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r;Dg(o,"LRNGrad");const p=Vr.sizeFromShape(o.shape),h=o.shape[3],d=n.data.get(o.dataId).values,f=n.data.get(a.dataId).values,m=n.data.get(s.dataId).values,g=new Float32Array(p),y=p;for(let e=0;e<y;e++){const t=e%h,n=e-t+Math.max(0,t-i),r=e-t+Math.min(h,t+i+1);let a=0;for(let e=n;e<r;e++)a+=Math.pow(f[e],2);a=u*a+l;for(let t=n;t<r;t++){let n=-2*u*c*f[t]*m[e]/a;e===t&&(n+=Math.pow(a,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(o.shape,a.dtype,g)}};function kw(e,t,n,r){const a=Vr.getTypedArrayFromDType(r,Vr.sizeFromShape(n));for(let n=0;n<a.length;++n){const r=n*t;let s=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>s)&&(s=t)}a[n]=s}return a}function vw(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:s,keepDims:o}=r,i=n;let l=a.shape;const u=l.length,c=Vr.parseAxisParam(s,l);let p=c;const h=zl.getAxesPermutation(p,u);let d=i.data.get(a.dataId).values;if(null!=h){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[h[t]];d=Ty(d,l,a.dtype,h,e),p=zl.getInnerMostAxes(p.length,u),l=e}Dg(a,"max"),zl.assertAxesAreInnerMostDims("max",p,u);const[f,m]=zl.computeOutAndReduceShapes(l,p),g=kw(d,Vr.sizeFromShape(m),f,a.dtype),y=i.write(g,f,a.dtype);let b=f;if(o){b=zl.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:a.dtype}}const Nw={kernelName:nn,backendName:"cpu",kernelFunc:vw},Sw=Wg(((e,t)=>Math.max(e,t))),Iw=ly(rn,Sw),Tw={kernelName:rn,backendName:"cpu",kernelFunc:Iw};const Ew={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;Dg(a,"maxPool");const{filterSize:s,strides:o,pad:i,dimRoundingMode:l}=r;Vr.assert(zl.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=zl.computePool2DInfo(a.shape,s,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Vr.arraysEqual(u.inShape,u.outShape))c=zg({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=Vr.computeStrides(a.shape),r=Gy(e,a.shape,a.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,a.dtype,r.values)}return c}};const $w={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r;Dg(a,"maxPool3d");const c=zl.computePool3DInfo(a.shape,s,o,1,i,l,u),p=jy(n.data.get(a.dataId).values,a.shape,a.dtype,Vr.computeStrides(a.shape),c,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}};const Cw={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=r;Dg([a,s],"maxPool3DGrad");const c=zl.computePool3DInfo(s.shape,o,i,1,l,u),p=function(e,t){const n=zi(t.outShape,"int32"),r=t.strideDepth,a=t.strideHeight,s=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,h=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-h;let x=b;for(;x<0;)x+=o;const w=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){const u=r*a-d;let h=u;for(;h<0;)h+=i;const k=Math.min(t.inHeight,c+u);for(let a=0;a<t.outWidth;++a){const d=a*s-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,p+d);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=x;t<w;t+=o){const n=t-b;for(let r=h;r<k;r+=i){const a=r-u;for(let s=v;s<N;s+=l){const o=s-d,i=e.get(m,t,r,s,g);i>=S&&(S=i,I=n*c*p+a*c+o)}}}n.set(I,m,y,r,a,g)}}}return n}(n.bufferSync(s),c),h=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,S=zi(s.shape,"float32"),I=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let a=0;a<c.inWidth;++a){const s=n-k,o=r-N,i=a-v;let l=0;for(let n=0;n<b;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let a=0;a<x;a+=g){const s=(o+a)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let o=0;o<w;o+=y){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const h=b*x*w-1-p.get(e,r,s,u,t)===n*x*w+a*w+o?1:0;if(0===h)continue;l+=I.get(e,r,s,u,t)*h}}}S.set(l,e,n,r,a,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Aw={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:o}=t,i=s;Dg([s,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=zl.computePool2DInfo(i.shape,l,u,1,c,p),d=n.data.get(i.dataId).values,f=zi(h.outShape,i.dtype,Hy(d,i.shape,i.dtype,h).values),m=h.strideHeight,g=h.strideWidth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterHeight,w=h.effectiveFilterWidth,k=w-1-h.padInfo.left,v=x-1-h.padInfo.top,N=zi(i.shape,"float32"),S=n.data.get(a.dataId).values,I=zi(a.shape,"float32",S);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const a=n-v,s=r-k;let o=0;for(let n=0;n<x;n+=y){const r=(a+n)/m;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let a=0;a<w;a+=b){const i=(s+a)/g;if(i<0||i>=h.outWidth||Math.floor(i)!==i)continue;const l=x*w-1-f.get(e,r,i,t)===n*w+a?1:0;if(0===l)continue;o+=I.get(e,r,i,t)*l}}N.set(o,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Rw={kernelName:un,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:s,pad:o,includeBatchInIndex:i}=t,l=n;Dg(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=zl.computePool2DInfo(r.shape,a,s,[1,1],o),[p,h]=function(e,t,n,r,a){const s=Gy(e,0,n,Vr.computeStrides(t),a,"max"),o=Hy(e,t,n,a,!0,r);return[s.values,o.values]}(u,r.shape,r.dtype,i,c),d=l.write(p,c.outShape,r.dtype),f=l.write(h,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const _w={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r,i=Vr.parseAxisParam(s,a.shape),l=zl.computeOutAndReduceShapes(a.shape,i)[1],u=Vr.sizeFromShape(l),c=[],p=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(p);const h=oy({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});c.push(h);const d=fx({inputs:{a:h,b:p},backend:n});c.push(d);const f=Gb({inputs:{x:d},backend:n,attrs:{axis:s,keepDims:o}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Dw={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Dg(a,"min");const i=Vr.parseAxisParam(s,a.shape);let l=i;const u=zl.getAxesPermutation(l,a.shape.length);let c=a;null!=u&&(c=Ey({inputs:{x:a},backend:n,attrs:{perm:u}}),l=zl.getInnerMostAxes(l.length,a.shape.length)),zl.assertAxesAreInnerMostDims("min",l,c.shape.length);const[p,h]=zl.computeOutAndReduceShapes(c.shape,l),d=Vr.sizeFromShape(h),f=Vr.makeZerosTypedArray(Vr.sizeFromShape(p),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(p,c.dtype,f);if(o){const e=fy({inputs:{x:g},backend:n,attrs:{shape:zl.expandShapeToKeepDim(p,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},Fw=Wg(((e,t)=>Math.min(e,t))),Ow=ly(hn,Fw),Mw={kernelName:hn,backendName:"cpu",kernelFunc:Ow};const Lw={kernelName:dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,mode:o}=r;Dg(a,"mirrorPad");const i=s.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=s.map((e=>e[0])),u=s.map(((e,t)=>e[0]+a.shape[t])),c="reflect"===o?0:1,p=n.data.get(a.dataId).values,h=a.shape.length,d=Vr.computeStrides(a.shape),f=Vr.sizeFromShape(i),m=i.length,g=Vr.computeStrides(i),y=Vr.getTypedArrayFromDType(a.dtype,f);for(let e=0;e<f;e++){let t=Vr.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Vr.locToIndex(t,h,d);y[e]=p[n]}return{dataId:n.write(y,i,a.dtype),shape:i,dtype:a.dtype}}},zw=Wg(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Bw=ly(fn,zw),Pw={kernelName:fn,backendName:"cpu",kernelFunc:Bw};function Vw(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,o=a.shape.length;let i=s;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=Vr.parseAxisParam([i],a.shape),u=vw({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=zl.expandShapeToKeepDim(u.shape,l),p=fy({inputs:{x:u},backend:n,attrs:{shape:c}}),h=bx({inputs:{a:a,b:p},backend:n}),d=ox({inputs:{x:h},backend:n}),f=Gb({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=fy({inputs:{x:f},backend:n,attrs:{shape:c}}),g=fx({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Ww={kernelName:tr,backendName:"cpu",kernelFunc:Vw};const Uw={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r;Dg(a,"multinomial");const l=i?a:Vw({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=n.data.get(l.dataId).values,h=[u,s],d=Vr.makeZerosTypedArray(Vr.sizeFromShape(h),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const r=qd.alea(o.toString()),a=e*s;for(let e=0;e<s;++e){const t=r();d[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[a+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(h,"int32",d)}};function Gw(e,t,n){const r=Vr.createScalarValue(-1,n);return Pb([],t,r,e,n)}const Hw={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;Dg(r,"neg");const a=n.data.get(r.dataId).values,[s,o]=Gw(a,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,s)}},jw=Vc.nonMaxSuppressionV3Impl;const qw={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r;Dg(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,{selectedIndices:p}=jw(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Kw=Vc.nonMaxSuppressionV4Impl;const Xw={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r;Dg(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,p=n.data.get(s.dataId).values,{selectedIndices:h,validOutputs:d}=Kw(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},Yw=Vc.nonMaxSuppressionV5Impl;const Zw={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r;Dg(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,p=n.data.get(s.dataId).values,h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=Yw(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},Jw=Wg(((e,t)=>e!==t?1:0)),Qw=ly(bn,Jw,null,"bool"),ek={kernelName:bn,backendName:"cpu",kernelFunc:Qw};const tk={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{depth:s,onValue:o,offValue:i}=r;Dg(a,"oneHot");const l=Vr.sizeFromShape(a.shape),u=new Float32Array(l*s);u.fill(i);const c=n.data.get(a.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<s&&(u[e*s+c[e]]=o);return n.makeTensorInfo([...a.shape,s],"int32",u)}};function nk(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=ay({inputs:{input:r},backend:n}),t=nk({inputs:{x:e},backend:n}),a=db({inputs:{input:r},backend:n}),s=nk({inputs:{x:a},backend:n}),o=ty({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return Sx({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const rk={kernelName:Nr,backendName:"cpu",kernelFunc:nk};const ak={kernelName:vn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=ay({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=db({inputs:{input:a},backend:r}),o=nk({inputs:{x:s},backend:r}),i=ty({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return Sx({backend:r,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function sk(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return lx({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const s=t[0].shape,o=t[0].dtype;t.forEach((e=>{Vr.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),Vr.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=mb({inputs:t.map((e=>{const t=lx({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t})),backend:n,attrs:{axis:a}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const ok={kernelName:Sn,backendName:"cpu",kernelFunc:sk};const ik={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:o}=r;Dg(a,"pad");const i=s.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=s.map((e=>e[0])),u=n.data.get(a.dataId).values,c=Vr.sizeFromShape(a.shape),p=a.shape.length,h=Vr.computeStrides(a.shape),d=Vr.sizeFromShape(i),f=i.length,m=Vr.computeStrides(i),g=Vr.getTypedArrayFromDType(a.dtype,d);0!==o&&g.fill(o);for(let e=0;e<c;e++){const t=Vr.indexToLoc(e,p,h).map(((e,t)=>e+l[t]));g[Vr.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,i,a.dtype),shape:i,dtype:a.dtype}}},lk=Wg(((e,t)=>Math.pow(e,t))),uk=ly(Tn,lk),ck={kernelName:Tn,backendName:"cpu",kernelFunc:uk};function pk(e,t,n,r){const[a,s]=zl.computeOutAndReduceShapes(e,r),o=ss(t,"int32"),i=Vr.makeZerosTypedArray(Vr.sizeFromShape(a),o),l=Vr.sizeFromShape(s);for(let e=0;e<i.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:a,outDtype:o}}const hk={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Dg(a,"prod");const i=a.shape.length,l=Vr.parseAxisParam(s,a.shape),u=zl.getAxesPermutation(l,i);let c=l,p=a;const h=[];null!=u&&(p=Ey({inputs:{x:a},backend:n,attrs:{perm:u}}),h.push(p),c=zl.getInnerMostAxes(c.length,i));const d=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=pk(p.shape,p.dtype,d,c);let y=m;return o&&(y=zl.expandShapeToKeepDim(m,l)),h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function dk(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Vr.makeZerosTypedArray(0,r);const a=Math.abs(Math.ceil((t-e)/n)),s=Vr.makeZerosTypedArray(a,r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const fk={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:o}=n,i=dk(r,a,o,s);return t.makeTensorInfo([i.length],s,i)}},mk=Fg(Rn,(e=>1/e)),gk={kernelName:Rn,backendName:"cpu",kernelFunc:mk};const yk={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r;Dg(a,"resizeBilinear");const l=Vr.computeStrides(a.shape),[u,c]=i,[p,h,d,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(Vr.sizeFromShape([p,u,c,f])),y=[s&&u>1?h-1:h,s&&c>1?d-1:d],b=[s&&u>1?u-1:u,s&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(h-1,Math.ceil(n)),i=e*l[0]+r*l[1],u=e*l[0]+s*l[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(d-1,Math.ceil(t)),c=i+n*l[2],p=u+n*l[2],h=i+s*l[2],y=u+s*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[p+e],s=t+(m[h+e]-t)*r,o=s+(n+(m[y+e]-n)*r-s)*a;g[x++]=o}}}return n.makeTensorInfo([p,u,c,f],"float32",g)}};const bk={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r;Dg([s,a],"resizeBilinearGrad");const i=Vr.computeStrides(a.shape),[l,u,c,p]=a.shape,[,h,d]=s.shape,f=new Float32Array(l*u*c*p),m=[o&&h>1?u-1:u,o&&d>1?c-1:c],g=[o&&h>1?h-1:h,o&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(s.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<h;e++){const n=e*y,r=Math.floor(n),a=Math.min(Math.ceil(n),u-1),s=t+r*i[1],o=t+a*i[1],l=n-r,h=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),a=t-n,u=1-a,d=s+n*i[2],m=s+r*i[2],g=o+n*i[2],y=o+r*i[2],k=h*u,v=h*a,N=l*u,S=l*a;for(let e=0;e<p;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,p],"float32",f)}};const xk={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r;Dg(a,"resizeNearestNeighbor");const l=Vr.computeStrides(a.shape),[u,c]=i,[p,h,d,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(p*u*c*f),y=[s&&u>1?h-1:h,s&&c>1?d-1:d],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<p;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?x*(e+.5):x*e;let r=Math.min(h-1,s?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const a=t+r*l[1];for(let e=0;e<c;e++){const t=o?w*(e+.5):w*e;let n=Math.min(d-1,s?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=a+n*l[2];for(let e=0;e<f;e++){const t=m[r+e];g[k++]=t}}}}return n.makeTensorInfo([p,u,c,f],a.dtype,g)}};const wk={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r;Dg([s,a],"resizeNearestNeighborGrad");const i=Vr.computeStrides(a.shape),l=Vr.computeStrides(s.shape),[u,c,p,h]=a.shape,[,d,f]=s.shape,m=new Float32Array(u*c*p*h),g=n.data.get(s.dataId).values,y=[o&&d>1?c-1:c,o&&f>1?p-1:p],b=[o&&d>1?d-1:d,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,S=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],r=Math.floor(e*k),a=Math.floor(r-N/2);for(let r=0;r<p;r++){const s=n+r*i[2],u=Math.floor(r*v),y=Math.floor(u-S/2);for(let n=0;n<h;n++){let i=0;for(let s=0;s<N;s++){const u=s+a;if(u<0||u>=d)continue;const h=t+u*l[1],m=u*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const a=h+t*l[2],s=t*w;r===Math.min(p-1,o?Math.round(s):Math.floor(s))&&(i+=g[a+n])}}m[s+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}};const kk={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r;Dg(a,"reverse");const o=a.shape.length,i=Vr.parseAxisParam(s,a.shape);if(0===o)return zg({inputs:{x:a},backend:n});const l=new Va(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=a.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},vk={kernelName:Tr,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:o}=t,i=n,l=Vr.getTypedArrayFromDType(r.dtype,Vr.sizeFromShape(r.shape)),[u,c,p,h]=r.shape,[d,f]=zl.getImageCenter(o,c,p),m=Math.sin(a),g=Math.cos(a),y=i.data.get(r.dataId).values;for(let e=0;e<u;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let r=0;r<p;r++){const a=r*h;for(let o=0;o<h;o++){const i=[u,e,r,o],b=i[2],x=i[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=s;if("number"!=typeof s&&(v=3===o?255:s[o]),w>=0&&w<p&&k>=0&&k<c){v=y[t+k*(p*h)+w*h+o]}l[t+n+a+o]=v}}}}return{dataId:i.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Nk=Fg(Pn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),Sk={kernelName:Pn,backendName:"cpu",kernelFunc:Nk},Ik=Yg((e=>1/Math.sqrt(e))),Tk=Og(Vn,Ik),Ek={kernelName:Vn,backendName:"cpu",kernelFunc:Tk};function $k(e,t,n,r,a,s,o,i,l,u){const c=[r/a,a],p=e.values,h=t.values;if(0===r)return zi(n,t.dtype);const d=zi(c,t.dtype);d.values.fill(l);for(let e=0;e<s;e++){const s=[];let l=0;for(let t=0;t<o;t++){const n=p[e*o+t];s.push(n),l+=n*i[t]}if(l<0||l>=r/a)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<a;n++)u?d.values[l*a+n]+=h[e*a+n]:d.values[l*a+n]=0===t.rank?h[0]:h[e*a+n]}return d}const Ck={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=zl.calculateShapes(s,a,o),h=$k(n.bufferSync(a),n.bufferSync(s),o,p,u,l,i,c,0,!0);return n.makeTensorInfo(o,h.dtype,h.values)}};const Ak={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t;Dg([r,a,s],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,c=ss(a.dtype,s.dtype),p=Vr.makeZerosTypedArray(Vr.sizeFromShape(a.shape),c);let h=0;const d=0===o||o>1||1===a.shape.length?1:Vr.sizeFromShape(a.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<d;t++)1===i[e]?p[h++]=l[e]:p[h++]=u[e];return n.makeTensorInfo(a.shape,c,p)}},Rk=zl.SELU_SCALEALPHA,_k=zl.SELU_SCALE,Dk=Fg(Gn,(e=>e>=0?_k*e:Rk*(Math.exp(e)-1))),Fk={kernelName:Gn,backendName:"cpu",kernelFunc:Dk},Ok=Fg(Kn,(e=>e<0?-1:e>0?1:0)),Mk={kernelName:Kn,backendName:"cpu",kernelFunc:Ok},Lk=Fg(jn,(e=>Math.sin(e))),zk={kernelName:jn,backendName:"cpu",kernelFunc:Lk},Bk=Fg(qn,(e=>Math.sinh(e))),Pk={kernelName:qn,backendName:"cpu",kernelFunc:Bk},Vk=Math.log(1.1920928955078125e-7)+2,Wk=Fg(Yn,(e=>{const t=e>-Vk,n=e<Vk,r=Math.exp(e);let a;return a=n?r:t?e:Math.log(1+r),a})),Uk={kernelName:Yn,backendName:"cpu",kernelFunc:Wk};const Gk={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:o}=r;Dg([a],"spaceToBatchND");const i=Vr.sizeFromShape(s),l=[[0,0]];l.push(...o);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);const u=ik.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),c=zl.getReshaped(u.shape,s,i,!1),p=zl.getPermuted(c.length,s.length,!1),h=zl.getReshapedPermuted(u.shape,s,i,!1),d=fy({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Ey({inputs:{x:d},backend:n,attrs:{perm:p}}),m=fy({inputs:{x:f},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function Hk(e,t,n,r,a,s,o){const i=t[0],l=s[0],u=new Array(l),c=new Array(i),p=t[1];if(0===l){if(0!==i)throw new Error(zl.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));return[Vr.getArrayFromDType(n,0),[0,p],Vr.getArrayFromDType(a,0),u,c]}let h=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(zl.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(zl.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,u,c]}{const t=f[l-1],s=Vr.getArrayFromDType(n,t*p),h=Vr.getArrayFromDType(a,t),d=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*p],a=d[n],o=(0===n?0:f[n-1])+a;d[n]++;for(let n=0;n<p;++n)s[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];s[t*p+0]=e;for(let e=1;e<p;++e)s[t*p+e]=0;h[t]=o}}return[s,[t,p],h,u,c]}}const jk={kernelName:nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${s.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values[0],[p,h,d,f,m]=Hk(i,r.shape,r.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],a.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function qk(e,t,n,r,a){const s=Vr.sizeFromShape(r),o=t[0],i=a.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=a[e];if(-1===t){if(-1!==c)throw new Error(zl.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(zl.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(zl.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(s/u);if(u*e!==s)throw new Error(zl.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[c]=e}if(Vr.sizeFromShape(l)!==s)throw new Error(zl.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Vr.getArrayFromDType(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],l]}const Kk={kernelName:rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.data.get(a.dataId).values),i=n.data.get(r.dataId).values,l=Array.from(n.data.get(s.dataId).values),[u,c,p]=qk(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}};function Xk(e,t,n,r,a,s=!1,o=0){const i=r.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?a[i-1]+1:0;if(c<0)throw new Error(zl.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=c;const h=p.reduce(((e,t)=>e*t),1),d=Vr.getArrayFromDType(n,h);if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error(zl.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=a[f];for(;;){let t=0;if(m<i){if(t=a[m],y===t){++m;continue}if(y>=t)throw new Error(zl.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(zl.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(o,g*u,y*u);for(let t=f;t<m;++t){const n=r[t];if(n<0||n>=l[0])throw new Error(zl.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(s)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>i)break}return g<c&&d.fill(o,g*u,c*u),[d,p]}const Yk={kernelName:ar,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${s.shape}`);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,[u,c]=Xk(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}};const Zk={kernelName:sr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${s.shape}`);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,[u,c]=Xk(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}};const Jk={kernelName:or,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:s,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:h}=zl.calculateShapes(s,a,i),d=$k(n.bufferSync(a),n.bufferSync(s),i,h,c,u,l,p,n.data.get(o.dataId).values[0],!1);return n.makeTensorInfo(i,d.dtype,d.values)}};const Qk={kernelName:er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:o}=r,i=Vr.parseAxisParam(o,a.shape)[0],l=zl.prepareSplitSize(a,s,i),u=new Array(a.shape.length).fill(0),c=a.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const r=Qy({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,r}))}},ev=Yg((e=>Math.sqrt(e))),tv=Fg(Zn,(e=>Math.sqrt(e))),nv={kernelName:Zn,backendName:"cpu",kernelFunc:tv},rv={kernelName:lr,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;Dg(n,"square");const a=r.data.get(n.dataId).values,s=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];s[e]=t*t}return{dataId:r.write(s,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},av=Wg(((e,t)=>{const n=e-t;return n*n})),sv=ly(ir,av),ov={kernelName:ir,backendName:"cpu",kernelFunc:sv},iv=Fg(Sr,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),lv={kernelName:Sr,backendName:"cpu",kernelFunc:iv};function uv(e,t,n,r){const a=zi(e,t.dtype);for(let e=0;e<a.size;e++){const s=a.indexToLoc(e),o=new Array(s.length);for(let e=0;e<o.length;e++)o[e]=s[e]*n[e]+r[e];a.set(t.get(...o),...s)}return a}const cv={kernelName:ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r;Dg(a,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=gl.sliceInfo(a.shape,s,o,i,l,u,c,p,h);let k;if(m)k=fy({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||y){Vr.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=gl.computeOutShape(b,x,w),t=Qy({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=fy({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=uv(d,n.bufferSync(a),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class pv{constructor(e,t,n,r,a,s){this.separator=Vr.encodeString(e),this.nGramWidths=t,this.leftPad=Vr.encodeString(n),this.rightPad=Vr.encodeString(r),this.padWidth=a,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),l=Math.max(0,i-o),u=Math.max(0,i-(a-(o+1))),c=s-(l+u),p=t+(l>0?0:o-i);let h=0;h+=l*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=u*this.rightPad.length;h+=(l+u+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(r=r&&t[a]<=n,!r)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=r-1,s=Vr.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=a;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),s[e]=s[e-1]+r}const o=new Array(s[a]);for(let n=0;n<a;++n){const r=t[n];let a=s[n];if(this.nGramWidths.forEach((s=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,s);this.createNGrams(e,r,o,a,l,s),a+=l})),this.preserveShort&&a===s[n]){const s=t[n+1]-t[n];if(0===s)continue;const i=s+2*this.padWidth,l=1;this.createNGrams(e,r,o,a,l,i)}}return[o,s]}}function hv(e,t,n,r,a,s,o,i){return new pv(n,r,a,s,o,i).compute(e,t)}const dv={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.data.get(c.dataId).values,d=n.data.get(p.dataId).values,[f,m]=hv(h,d,a,s,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};function fv(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return void(n&&0===e.length||r.push(e))}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}function mv(e,t,n){const r=e.length,a=[];let s=0,o=0;const i=new Array(r);for(let l=0;l<r;++l){const r=a.length;fv(e[l],t,n,a);const u=a.length-r;i[l]=u,s+=u,o=Math.max(o,u)}const l=Vr.getArrayFromDType("int32",2*s),u=new Array(s),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=a[p],++p;return[l,u,c]}const gv={kernelName:pr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(s.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,p]=mv(i,l,a),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};function yv(e,t){const n=Vr.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Vr.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const bv={kernelName:hr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=yv(n.data.get(s.dataId).values,a);return n.makeTensorInfo(s.shape,"int32",o)}},xv=Fg(fr,(e=>Math.tan(e))),wv={kernelName:fr,backendName:"cpu",kernelFunc:xv},kv=Fg(mr,(e=>Math.tanh(e)));function vv(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=zi(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const s=e.locToIndex(a);r.values[t]=e.values[s]}return r}const Nv=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function Sv(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const a=r-n+1,s=t-n+1,o=Math.log(a),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(a-i)/a)*Math.sign(s-a/2);Sv(e,t,Math.max(n,Math.floor(t-s*i/a+l)),Math.min(r,Math.floor(t+(a-s)*i/a+l)))}const a=e[t];let s=n,o=r;for(Vr.swap(e,n,t),Nv(e[r],a)>0&&Vr.swap(e,n,r);s<o;){for(Vr.swap(e,s,o),s++,o--;Nv(e[s],a)<0;)s+=1;for(;Nv(e[o],a)>0;)o-=1}0===Nv(e[n],a)?Vr.swap(e,n,o):(o+=1,Vr.swap(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function Iv(e,t,n,r,a){const s=t[t.length-1],[o,i]=[e.length/s,s],l=Vr.getTypedArrayFromDType(n,o*r),u=Vr.getTypedArrayFromDType("int32",o*r);for(let t=0;t<o;t++){const n=t*i,s=e.subarray(n,n+i);let o=new Array(s.length);s.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(Sv(o,r),o=o.slice(0,r)),a&&o.sort(Nv);const c=t*r,p=l.subarray(c,c+r),h=u.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[zi(c,n,l),zi(c,"int32",u)]}const Tv={kernelName:br,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:a,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,p,h,d]=a.shape,[f,m]=null!=u?u:[p,h],g=[c,f,m,d],y=Vr.computeStrides(a.shape),b=y[0],x=y[1],w=y[2],k=Vr.getTypedArrayFromDType(a.dtype,Vr.sizeFromShape(g));k.fill(l);const v=r.data.get(a.dataId).values,N=r.data.get(s.dataId).values;for(let e=0;e<c;++e){const t=1===s.shape[0]?N:N.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let a=0;a<d;++a){let s;const u=t[6]*r+t[7]*n+1;if(0===u)continue;const c=(t[0]*r+t[1]*n+t[2])/u,d=(t[3]*r+t[4]*n+t[5])/u,f=Ev(c,h,i),m=Ev(d,p,i);switch(o){case"nearest":s=Cv(v,p,h,b,x,w,e,m,f,a,l);break;case"bilinear":s=Av(v,p,h,b,x,w,e,m,f,a,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}k[e*b+n*x+r*w+a]=s}return r.makeTensorInfo(g,a.dtype,k)}return{dataId:r.write(k,g,a.dtype),shape:a.shape,dtype:a.dtype}}};function Ev(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Vr.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Vr.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Vr.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function $v(e,t,n,r,a,s,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*r+i*a+l*s+u]:c}function Cv(e,t,n,r,a,s,o,i,l,u,c){return $v(e,t,n,r,a,s,o,Math.round(i),Math.round(l),u,c)}function Av(e,t,n,r,a,s,o,i,l,u,c){const p=Math.floor(i),h=Math.floor(l),d=p+1,f=h+1;return(d-i)*((f-l)*$v(e,t,n,r,a,s,o,p,h,u,c)+(l-h)*$v(e,t,n,r,a,s,o,p,f,u,c))+(i-p)*((f-l)*$v(e,t,n,r,a,s,o,d,h,u,c)+(l-h)*$v(e,t,n,r,a,s,o,d,f,u,c))}function Rv(e,t,n,r){const a=Vr.parseAxisParam(t,n)[0],s=[1,n[0],1];for(let e=0;e<a;e++)s[0]*=n[e];s[1]=n[a];for(let e=a+1;e<n.length;e++)s[2]*=n[e];const o={},i=new Int32Array(n[a]),l=new Va(s,r,e),u=[],c=1===s[0]&&1===s[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,u.push(t)}}const p=s.slice();p[1]=Object.keys(o).length;const h=new Va(p,r);u.forEach(((e,t)=>{for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)h.set(l.get(n,e,r),n,t,r)}));const d=n.slice();return d[a]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const _v=[by,wy,vy,Sy,dy,Iy,Cy,Ay,Ry,_y,Fy,My,zy,Vy,Uy,qy,Ky,Xy,Yy,yy,Zy,tb,ab,sb,iy,lb,cb,ny,pb,gb,bb,xb,wb,kb,vb,Nb,Ib,Eb,$b,Cb,Ab,Rb,Db,Fb,Ob,Mb,Lb,zb,Bb,jb,Lg,qb,Yb,ax,ix,ux,hx,Nx,Ix,Tx,Cx,_x,Dx,Fx,Mx,zx,Vx,Gx,Bg,Hx,fb,qx,Xx,Zx,Vg,ew,rw,sw,lw,cw,dw,mw,bw,xw,ww,Nw,Tw,Ew,$w,Cw,Aw,Rw,_w,Dw,Mw,Lw,Pw,Uw,Ub,Hw,qw,Xw,Zw,ek,tk,ak,ok,ik,ck,Hg,hk,fk,sy,mx,gk,qg,Xg,my,yk,bk,xk,wk,kk,vk,Sk,Ek,Ck,Ak,Fk,Qg,Mk,zk,Pk,eb,Ww,Uk,Gk,jk,Kk,Yk,Zk,Jk,Qk,nv,rv,ov,lv,cv,dv,gv,bv,xx,Hb,wv,{kernelName:mr,backendName:"cpu",kernelFunc:kv},{kernelName:gr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;Dg(a,"tile");const o=vv(n.bufferSync(a),s);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:yr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:o}=r;Dg(a,"topk");const i=n.data.get(a.dataId).values,[l,u]=Iv(i,a.shape,a.dtype,s,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Tv,$y,{kernelName:wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;Dg(s,"unique");const o=r.data.get(s.dataId).values,{outputValues:i,outputShape:l,indices:u}=Rv(o,a,s.shape,s.dtype);return[r.makeTensorInfo(l,s.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}},{kernelName:kr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a.shape.length,i=a.shape[s],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==s&&(l[u++]=a.shape[e]);const c=new Array(o).fill(0),p=a.shape.slice();p[s]=1;const h=new Array(i);for(let e=0;e<h.length;e++){c[s]=e;const t=Qy({inputs:{x:a},backend:n,attrs:{begin:c,size:p}});h[e]=fy({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return h}},{kernelName:vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:o}=r;Dg(a,"unsortedSegmentSum");const i=[],l=[],u=a.shape.length-s.shape.length;let c=s;for(let e=0;e<u;++e){const t=lx({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=Vr.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),s=Xb({inputs:{a:r,b:c},backend:n}),o=oy({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),u=Wb({inputs:{a:o,b:a},backend:n}),p=Gb({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(p),l.push(r),l.push(s),l.push(o),l.push(u),l.push(p)}const p=sk({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},rk];for(const e of _v)zr(e);const Dv=Vc.whereImpl;class Fv extends i{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new o(this,Jc())}nextDataId(){return Fv.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,ie().get("IS_NODE")&&zl.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Vr.isString(n[0])){const a=n.map((e=>Vr.encodeString(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return zl.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Vr.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return zi(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return Jc().makeTensorFromDataId(r,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Vr.now();e();return{kernelMs:Vr.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Dg([e],"where");const t=this.readSync(e.dataId);return Dv(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}Fv.nextDataId=0;function Ov(){let e,t,n,r,a,s,o,i,l,u;return 2===ie().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",s="outputColor",o="out vec4 outputColor;",i="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",a="texture2D",s="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:s,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Mv(e,t,n="index"){const r=Vr.computeStrides(t);return r.map(((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function Lv(e,t,n="index"){const r=Vr.computeStrides(t);return r.map(((t,a)=>`${`int ${e[a]} = ${n} / outShapeStrides[${a}]`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function zv(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=r[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${r[e+1]})`;return a}(e.map(((e,t)=>t)),t);return r.map(((t,a)=>`${`int ${e[a]} = ${n} / ${r[a]}`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${r[a]}`:`index -= ${e[a]} * ${r[a]}`};`)).join("")}function Bv(e){const t=Vr.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}rp("cpu",(()=>new Fv),1);const Pv="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Vv}=zl;function Wv(e,t,n){const r=[];if(e.forEach((e=>{const t=Vr.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=Qv(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=r.join("\n"),s=e.map((e=>function(e,t,n=!1,r){let a="";a+=n?Gv(e,r):Uv(e,r);const s=e.shapeInfo.logicalShape,o=t.logicalShape;s.length<=o.length&&(a+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",s=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=Vv(e.shapeInfo.logicalShape,t.logicalShape),l=Jv(o),u=o-s;let c;const p=["x","y","z","w","u","v"];c=0===s?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+u]} = 0;`)).join("\n");let h="";h=o<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+u]}`)).join(", ");let d="return outputValue;";const f=1===Vr.sizeFromShape(e.shapeInfo.logicalShape),m=1===Vr.sizeFromShape(t.logicalShape);if(1!==s||f||m){if(f&&!m)d=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=s-2,t=s-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",s=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&Vr.arraysEqual(o,s))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Jv(l),c=Vv(e.shapeInfo.logicalShape,t.logicalShape),p=l-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\n");let f="";f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", ");return`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${r}(${f});\n    }\n  `}(e,t));return a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=Ov(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Hv}\n    ${jv}\n    ${qv}\n  `}(i);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return Xv();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Vr.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),s=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),s=a*Math.ceil(e[e.length-2]/2);let o=s,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return Xv();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Vr.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Lv(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=Mv(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Lv(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=Mv(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=Mv(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Mv(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(p+=Kv);return[p,l,c,a,u,s,n.userCode].join("\n")}function Uv(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[a,s]=e.shapeInfo.texShape;if(1===a&&1===s)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=Yv(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${Zv(e)}\n      }\n    `;const a=e.shapeInfo.texShape,s=a[0],o=a[1];if(1===o&&1===s)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=Yv(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===s)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape;if(null!=s&&Vr.arraysEqual(n,s)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=s[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=Vr.squeezeShape(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${Uv(eN(e,l),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${tN(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Zv(e)}\n      }\n    `;const u=s[0],c=s[1],p=Yv(r);if(1===c)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;return t?`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=Vr.squeezeShape(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${Uv(eN(e,u),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${tN(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${o}, 1)));\n        ${Zv(e)}\n      }\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===s&&null==d)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===o&&null==d)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=Yv(r);return t?`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${s} + col * ${o} + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=n[3],o=n[2]*s,i=n[1]*o,{newShape:l,keptDims:u}=Vr.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Uv(eN(e,l),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${tN(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${s}, 1)));\n        ${Zv(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===s&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=Yv(r);return t?`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],s=t[3]*a,o=t[2]*s,i=t[1]*o,{newShape:l,keptDims:u}=Vr.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Uv(eN(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${tN(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${s}, ${a})) +\n          depth3;\n        ${Zv(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${s}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===a&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Yv(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${s} +\n          depth2 * ${a} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:s}=Vr.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Uv(eN(e,a))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${tN(t,s)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${Zv(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Yv(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function Gv(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=Ov();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=Ov();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=s[0],i=s[1],l=Ov();if(null!=s&&Vr.arraysEqual(n,s))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){const r=[1,2],s=["b","row","col"];return`\n        ${Gv(eN(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${tN(s,r)});\n        }\n      `}const i=Ov();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2),p=c*Math.ceil(n[1]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${p}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=Ov();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const s=e.shapeInfo.logicalShape,o=s.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[o-1]/2);let h=p*Math.ceil(s[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=s[o-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Hv="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jv="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qv="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Kv="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Xv(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Yv(e){return`offset${e}`}function Zv(e){const t=e.name,n=Vr.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Jv(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Qv(e,t,n){const{newShape:r,keptDims:a}=Vr.squeezeShape(t),s=t.length,o=e&&3===s&&1===t[0],i=o?t.slice(1):r,l=!e&&s>1&&!Vr.arraysEqual(t,n)&&r.length<s||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:a}}function eN(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function tN(e,t){return t.map((t=>e[t])).join(", ")}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const nN={},rN={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function aN(e,t){if(!(e in nN)){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete nN[e]}),!1),1===e?n.getContext("webgl",rN)||n.getContext("experimental-webgl",rN):n.getContext("webgl2",rN)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;nN[e]=n}const n=nN[e];return null==n||n.isContextLost()?(delete nN[e],aN(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),nN[e])}var sN,oN,iN;function lN(e,t){return[t,e]}function uN(e){const t=Vr.sizeFromShape(e),n=Math.ceil(t/4);return Vr.sizeToSquarishShape(n)}function cN(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function pN(e,t){const n=e;let r,a,s,o,i,l,u,c,p,h;return 2===ie().getNumber("WEBGL_VERSION")?(r=n.R32F,a=n.R16F,s=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(r=e.RGBA,a=e.RGBA,s=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function hN(e,t){const n=t();return ie().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(sN||(sN={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(oN||(oN={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(iN||(iN={}));function dN(e){return!!(ie().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function fN(e,t){return NN(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function mN(e,t){const n=NN(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(hN(e,(()=>e.shaderSource(n,t))),hN(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=gN.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],a=e.split("\n"),s=a.length.toString().length+2,o=a.map(((e,t)=>Vr.rightPad((t+1).toString(),s)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,r-1),u=o.slice(r-1,r),c=o.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Vr.rightPad(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const gN=/ERROR: [0-9]+:([0-9]+):/g;function yN(e,t){if(hN(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function bN(e,t,n,r,a,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(hN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),hN(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,s,o))),hN(e,(()=>e.enableVertexAttribArray(i))),!0)}function xN(e,t,n,r){hN(e,(()=>function(e,t,n){SN(e,n),hN(e,(()=>e.activeTexture(e.TEXTURE0+n))),hN(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),hN(e,(()=>e.uniform1i(n,r)))}function wN(e,t,n){hN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),hN(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function kN(e,t){hN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),hN(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function vN(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function NN(e,t,n){const r=hN(e,(()=>t()));if(null==r)throw new Error(n);return r}function SN(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function IN(e,t=2){return Vr.sizeFromShape(e.slice(0,e.length-t))}function TN(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function EN(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[IN(e),...TN(e)]),t}function $N(e){return e%2==0}function CN(e,t){if(e=e.slice(-2),t=t.slice(-2),Vr.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if($N(n)&&$N(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&$N(e[0])&&$N(t[0])}let AN,RN;function _N(e,t){return null!=e.getExtension(t)}function DN(e){try{if(null!=aN(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function FN(e){if(0===e)return!1;const t=aN(e);if(1!==e){if(_N(t,"EXT_color_buffer_float"))return ON(t);const e="EXT_color_buffer_half_float";if(_N(t,e)){const n=t.getExtension(e);return function(e,t){const n=pN(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const a=1,s=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,a,s,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!_N(t,"OES_texture_float"))return!1;if(!_N(t,"WEBGL_color_buffer_float"))return!1;return ON(t)}function ON(e){const t=pN(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function MN(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Vr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function LN(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,a=t[n],s=a.shape;if(!Vr.arraysEqual(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,i=a.isUniform?null:a.texData.texShape;if(!Vr.arraysEqual(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function zN(e){return ie().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class BN{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=zl.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=zN(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function PN(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function VN(e,t){return 1===t?[e]:PN(e,t)}class WN{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=zl.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=zN(a);let s="";if(r)if(0===a||1===Vr.sizeFromShape(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(s=`\n          ${Jv(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?s+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=VN("coords",a);this.enableShapeUniforms?s+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:s+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}function UN(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const GN={kernelName:Bt,backendName:"webgl",kernelFunc:UN};function HN(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(s.dataId),i=UN({inputs:{x:r},backend:n}),l=UN({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:l},s}const jN={kernelName:Je,backendName:"webgl",kernelFunc:HN},qN="return (a < 0.) ? b * a : a;",KN="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const XN={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r,o=n.makeTensorInfo([],"float32",Vr.createScalarValue(s,"float32")),i=ie().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new WN(KN,a.shape,o.shape):new BN(qN,a.shape,o.shape),l=n.runWebGLProgram(i,[a,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},YN="return (a < 0.) ? b * a : a;",ZN="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const JN={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t,s=ie().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new WN(ZN,r.shape,a.shape):new BN(YN,r.shape,a.shape);return n.runWebGLProgram(s,[r,a],"float32")}};class QN{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const eS="return abs(x);";const tS="return x;";class nS{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function rS({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:s})=>{const{x:o}=a,i=s,l=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=ie().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new nS(o.shape,t):new QN(o.shape,e),i.runWebGLProgram(u,[o],l)}}function aS({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:s}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(r&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},s={dataId:r.dataId,dtype:r.dtype,shape:u.shape},o=new BN(e,l.shape,u.shape);return c.runWebGLProgram(o,[a,s],ss(n.dtype,r.dtype))})),s=HN({inputs:{real:r,imag:a},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(a),s}const p=s||ss(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=a){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?zl.fromUint8ToStringArray(e):e,r="string"===l.dtype?zl.fromUint8ToStringArray(t):t,[s,o]=a(l.shape,u.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=s,i}let h;return h=ie().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new WN(t,l.shape,u.shape,n):new BN(e,l.shape,u.shape),c.runWebGLProgram(h,[l,u],p)}}function sS(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?ZN:YN;if("leakyrelu"===e)return t?KN:qN;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class oS{constructor(e,t,n,r=!1,a=!1,s=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=zN(this.outputShape.length);const u=r?e[1]:e[2],c=Math.ceil(u/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=a?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const iS="return areal * breal - aimag * bimag;",lS="return areal * bimag + aimag * breal;";class uS{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=zl.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var cS={};t(cS,"simpleAbsImpl",(()=>xy)),t(cS,"addImpl",(()=>cy)),t(cS,"bincountImpl",(()=>nb)),t(cS,"bincountReduceImpl",(()=>rb)),t(cS,"ceilImpl",(()=>ob)),t(cS,"concatImpl",(()=>hb)),t(cS,"equalImpl",(()=>Kb)),t(cS,"expImpl",(()=>sx)),t(cS,"expm1Impl",(()=>cx)),t(cS,"floorImpl",(()=>Ex)),t(cS,"gatherNdImpl",(()=>Ox)),t(cS,"gatherV2Impl",(()=>Lx)),t(cS,"greaterImpl",(()=>Bx)),t(cS,"greaterEqualImpl",(()=>Wx)),t(cS,"lessImpl",(()=>Jx)),t(cS,"lessEqualImpl",(()=>tw)),t(cS,"linSpaceImpl",(()=>aw)),t(cS,"logImpl",(()=>ow)),t(cS,"maxImpl",(()=>kw)),t(cS,"maximumImpl",(()=>Sw)),t(cS,"minimumImpl",(()=>Fw)),t(cS,"multiplyImpl",(()=>Pb)),t(cS,"negImpl",(()=>Gw)),t(cS,"notEqualImpl",(()=>Jw)),t(cS,"prodImpl",(()=>pk)),t(cS,"rangeImpl",(()=>dk)),t(cS,"rsqrtImpl",(()=>Ik)),t(cS,"sigmoidImpl",(()=>Zg)),t(cS,"sliceImpl",(()=>Jy)),t(cS,"sparseFillEmptyRowsImpl",(()=>Hk)),t(cS,"sparseReshapeImpl",(()=>qk)),t(cS,"sparseSegmentReductionImpl",(()=>Xk)),t(cS,"sqrtImpl",(()=>ev)),t(cS,"squaredDifferenceImpl",(()=>av)),t(cS,"stridedSliceImpl",(()=>uv)),t(cS,"stringNGramsImpl",(()=>hv)),t(cS,"stringSplitImpl",(()=>mv)),t(cS,"stringToHashBucketFastImpl",(()=>yv)),t(cS,"subImpl",(()=>gx)),t(cS,"tileImpl",(()=>vv)),t(cS,"topKImpl",(()=>Iv)),t(cS,"transposeImpl",(()=>Ty)),t(cS,"uniqueImpl",(()=>Rv));const{addImpl:pS,bincountImpl:hS,bincountReduceImpl:dS,ceilImpl:fS,concatImpl:mS,equalImpl:gS,expImpl:yS,expm1Impl:bS,floorImpl:xS,gatherNdImpl:wS,gatherV2Impl:kS,greaterImpl:vS,greaterEqualImpl:NS,lessImpl:SS,lessEqualImpl:IS,linSpaceImpl:TS,logImpl:ES,maxImpl:$S,maximumImpl:CS,minimumImpl:AS,multiplyImpl:RS,negImpl:_S,notEqualImpl:DS,prodImpl:FS,rangeImpl:OS,rsqrtImpl:MS,sigmoidImpl:LS,simpleAbsImpl:zS,sliceImpl:BS,sparseFillEmptyRowsImpl:PS,sparseReshapeImpl:VS,sparseSegmentReductionImpl:WS,sqrtImpl:US,stridedSliceImpl:GS,stringNGramsImpl:HS,stringSplitImpl:jS,stringToHashBucketFastImpl:qS,subImpl:KS,tileImpl:XS,topKImpl:YS,transposeImpl:ZS,uniqueImpl:JS}=cS,QS="return a * b;";function eI(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,s=zl.upcastType(r.dtype,a.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),s=new uS(iS,r.shape,a.shape),o=new uS(lS,r.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(s,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=HN({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,a])){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),[o,i]=RS(r.shape,a.shape,e.values,t.values,s),l=n.makeTensorInfo(i,s);return n.texData.get(l.dataId).values=o,l}let o;return o=ie().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new WN(QS,r.shape,a.shape):new BN(QS,r.shape,a.shape),n.runWebGLProgram(o,[r,a],s)}const tI={kernelName:gn,backendName:"webgl",kernelFunc:eI};class nI{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,a;this.userCode=`\n      ${r=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?zv(["r","c","d"],"inputShape"):Mv(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Bv(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function rI(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,o=n,i=Vr.sizeFromShape(a.shape),l=Vr.inferFromImplicitShape(s,i),u=Vr.sizeFromShape(l);Vr.assert(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(a.dataId);return!c.isPacked||CN(a.shape,l)||null!==c.texture&&CN(c.shape,l)?(o.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const r=[IN(e.shape),...TN(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[IN(t),...TN(t)],o=new nI(s,r),i=[r],l=n.runWebGLProgram(o,[a],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,l,o)}const aI={kernelName:Dn,backendName:"webgl",kernelFunc:rI};class sI{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${Vr.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class oI{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${l});\n      }\n    `}}function iI(e,t,n,r){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=zl.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let s=e;for(let o=0;o<a.length;o++){const{inSize:i,windowSize:l,outSize:u}=a[o];let c,p;c="mean"===n?0===o?new sI({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new sI({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new oI({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),p=s,s=r.runWebGLProgram(c,[s],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return s}class lI{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=Jv(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class uI{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Jv(this.rank),a=PN("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];const o=`vec2(${s.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function cI(e,t,n){const r=ie().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new uI(e.shape,t):new lI(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function pI(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;return function(e,t,n,r){const a=t,s=e.shape.length,o=Vr.parseAxisParam(a,e.shape);let i=o;const l=zl.getAxesPermutation(i,s),u=null!=l;let c=e;u&&(c=cI(e,l,r),i=zl.getInnerMostAxes(i.length,s)),zl.assertAxesAreInnerMostDims("sum",i,s);const[p,h]=zl.computeOutAndReduceShapes(c.shape,i);let d=p;n&&(d=zl.expandShapeToKeepDim(p,o));const f=Vr.sizeFromShape(h),m=rI({inputs:{x:c},attrs:{shape:[Vr.sizeFromShape(e.shape)/f,f]},backend:r}),g=iI(m,os(e.dtype),"sum",r),y=rI({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),u&&r.disposeIntermediateTensorInfo(c),y}(a,s,o,n)}const hI={kernelName:Jn,backendName:"webgl",kernelFunc:pI};function dI(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{perm:s}=r,o=n,i=a.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=a.shape[s[e]];let u;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=ZS(e,a.shape,a.dtype,s,l);u=o.makeTensorInfo(l,a.dtype);o.texData.get(u.dataId).values=t}else u=cI(a,s,o);return u}const fI={kernelName:xr,backendName:"webgl",kernelFunc:dI};function mI({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Vr.sizeFromShape(m),b=Vr.sizeFromShape(g),x=sl.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Vr.assert(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],k=r?[b,f,h]:[b,h,f],v=rI({inputs:{x:e},backend:a,attrs:{shape:w}}),N=rI({inputs:{x:t},backend:a,attrs:{shape:k}}),S=[v,N],I=Math.max(y,b),T=n?v.shape[1]:v.shape[2],E=null!=s,$=null!=o,C="leakyrelu"===l,A=null!=l?sS(l,!0):null;let R;if((1===d||1===f)&&T>1e3&&!1===(E||$||C||null!=A)){let e=v,t=N;n&&(e=dI({inputs:{x:v},backend:a,attrs:{perm:[0,2,1]}}),S.push(e)),r&&(t=dI({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),S.push(t));const s=1===f;let o=e;1!==f&&(o=rI({inputs:{x:e},backend:a,attrs:{shape:[I,T,1]}}),S.push(o));const i=1===f?2:1;let l=t;s&&(l=rI({inputs:{x:t},backend:a,attrs:{shape:[I,1,T]}}),S.push(l));const u=eI({inputs:{a:o,b:l},backend:a});R=pI({inputs:{x:u},backend:a,attrs:{axis:i,keepDims:!0}}),S.push(u)}else{const l=ss(e.dtype,t.dtype),u=new oS(w,k,[I,d,f],n,r,E,A,$,C),c=[v,N];if(null!=s&&c.push(s),$&&c.push(o),C){const e=a.makeTensorInfo([],"float32",Vr.createScalarValue(i,"float32"));c.push(e),S.push(e)}R=a.runWebGLProgram(u,c,l)}const _=rI({inputs:{x:R},backend:a,attrs:{shape:x}});S.push(R);for(const e of S)a.disposeIntermediateTensorInfo(e);return _}const gI={kernelName:Er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=r;return mI({a:a,b:s,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}},yI="return abs(x);";const bI={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=zS(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let a;return a=ie().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new nS(r.shape,yI):new QN(r.shape,yI),n.runWebGLProgram(a,[r],r.dtype)}},xI=rS({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),wI={kernelName:$e,backendName:"webgl",kernelFunc:xI},kI=rS({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),vI={kernelName:Ce,backendName:"webgl",kernelFunc:kI},NI="return a + b;",SI=aS({opSnippet:NI,packedOpSnippet:NI,supportsComplex:!0,cpuKernelImpl:pS}),II={kernelName:Ae,backendName:"webgl",kernelFunc:SI};class TI{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class EI{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const $I={kernelName:Re,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,a=n;if(1===a.length)return UN({inputs:{x:a[0]},backend:r});if(a.length>ie().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:r}),s=e({inputs:a.slice(t),backend:r});return e({inputs:[n,s],backend:r})}const s=a.map((e=>e.dtype)).reduce(((e,t)=>ss(e,t))),o=a.map((e=>e.shape)),i=ie().getBool("WEBGL_PACK")?new EI(a[0].shape,o):new TI(a[0].shape,o);return r.runWebGLProgram(i,a,s)}};const CI={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r,i=a.shape.length,l=Vr.parseAxisParam(s,a.shape);let u=l;const c=zl.getAxesPermutation(u,i);let p=a;null!=c&&(p=dI({inputs:{x:a},backend:n,attrs:{perm:c}}),u=zl.getInnerMostAxes(u.length,i)),zl.assertAxesAreInnerMostDims("all",u,i);const[h,d]=zl.computeOutAndReduceShapes(p.shape,u),f=rI({inputs:{x:p},backend:n,attrs:{shape:[-1,Vr.sizeFromShape(d)]}}),m=iI(f,f.dtype,"all",n);let g;if(o){g=rI({inputs:{x:m},backend:n,attrs:{shape:zl.expandShapeToKeepDim(h,l)}})}else g=rI({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};const AI={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r,i=a.shape.length,l=Vr.parseAxisParam(s,a.shape);let u=l;const c=zl.getAxesPermutation(u,i);let p=a;null!=c&&(p=dI({inputs:{x:a},backend:n,attrs:{perm:c}}),u=zl.getInnerMostAxes(u.length,i)),zl.assertAxesAreInnerMostDims("any",u,i);const[h,d]=zl.computeOutAndReduceShapes(p.shape,u),f=rI({inputs:{x:p},backend:n,attrs:{shape:[-1,Vr.sizeFromShape(d)]}}),m=iI(f,f.dtype,"any",n);let g;if(o){g=rI({inputs:{x:m},backend:n,attrs:{shape:zl.expandShapeToKeepDim(h,l)}})}else g=rI({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}};class RI{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class _I{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Vr.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],s=Math.ceil(a/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=Jv(i),u=VN("coords",i);let c,p;if(1===s){p=i+1;const e=Jv(p);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else p=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),d="."+h[p-1],f=h.map((e=>"int "+e)),m=VN("sourceLocR",p-1).concat("inIdx.r"),g=VN("sourceLocG",p-1).concat("inIdx.g"),y=VN("sourceLocB",p-1).concat("inIdx.b"),b=VN("sourceLocA",p-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function DI(e,t,n,r=null){let a=t.shape[0],s=t.shape[1];null!=r&&(a=r.shape[0],s=r.shape[1]);const o=zl.computeOptimalWindowSize(s),i={windowSize:o,inSize:s,batchSize:a,outSize:Math.ceil(s/o)},l=new RI(i,n,null==r),u=[t];null!=r&&u.push(r);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const p=DI(e,t,n,c);return e.disposeIntermediateTensorInfo(c),p}function FI(e,t,n,r=null){const a=null!=r?r.shape:t.shape,s=a[a.length-1],o=zl.computeOptimalWindowSize(s),i=new _I(a,o,n,null==r),l=null==r?[t]:[t,r],u=e.runWebGLProgram(i,l,"int32");if(u.shape.length===t.shape.length){const r=FI(e,t,n,u);return e.disposeIntermediateTensorInfo(u),r}return u}function OI(e,t,n,r){const a=[n];if(zl.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!ie().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],s=e.texData.get(t.dataId);let o=t;null!==s&&s.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=zl.computeOutAndReduceShapes(o.shape,a),u=Vr.sizeFromShape(l),c=rI({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const p=DI(e,c,r);n.push(p);const h=rI({inputs:{x:p},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return FI(e,t,r)}const MI={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;let o=Vr.parseAxisParam(s,a.shape);const i=zl.getAxesPermutation(o,a.shape.length);let l=a;const u=[];null!=i&&(l=dI({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=zl.getInnerMostAxes(o.length,l.shape.length)),zl.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const c=OI(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const LI={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;let o=Vr.parseAxisParam(s,a.shape);const i=zl.getAxesPermutation(o,a.shape.length);let l=a;const u=[];null!=i&&(l=dI({inputs:{x:a},backend:n,attrs:{perm:i}}),u.push(l),o=zl.getInnerMostAxes(o.length,l.shape.length)),zl.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const c=OI(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},zI=rS({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),BI={kernelName:Me,backendName:"webgl",kernelFunc:zI},PI=rS({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),VI={kernelName:Le,backendName:"webgl",kernelFunc:PI},WI=rS({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),UI={kernelName:ze,backendName:"webgl",kernelFunc:WI},GI=aS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),HI={kernelName:Pe,backendName:"webgl",kernelFunc:GI},jI=rS({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),qI={kernelName:Be,backendName:"webgl",kernelFunc:jI};class KI{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(s/4),w=s%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class XI{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(s/4),v=s%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const YI={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;MN(a,"avgPool");const{filterSize:s,strides:o,pad:i,dimRoundingMode:l}=r;Vr.assert(zl.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=zl.computePool2DInfo(a.shape,s,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&Vr.arraysEqual(u.inShape,u.outShape))return UN({inputs:{x:a},backend:n});const c=new KI(u,"avg",!1);return n.runWebGLProgram(c,[a],"float32")}};const ZI={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=r,c=zl.computePool3DInfo(a.shape,s,o,[1,1,1],i,l,u),p=new XI(c,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};class JI{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class QI{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const eT={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,o=s,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=zl.computePool3DInfo(o.shape,i,l,[1,1,1],u,c),h=new QI(p);return n.runWebGLProgram(h,[a],o.dtype)}};const tT={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,o=s;MN([a,s],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=r,c=zl.computePool2DInfo(o.shape,i,l,1,u),p=new JI(c);return n.runWebGLProgram(p,[a],o.dtype)}};const nT={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:o,transposeB:i}=r;return mI({a:a,b:s,transposeA:o,transposeB:i,backend:n})}};class rT{constructor(e,t,n,r,a,s){this.outputShape=[],this.variableNames=["x","mean","variance"],zl.assertAndGetBroadcastShape(e,t),zl.assertAndGetBroadcastShape(e,n);let o="0.0";null!=r&&(zl.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=a&&(zl.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class aT{constructor(e,t,n,r,a,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],zl.assertAndGetBroadcastShape(e,t),zl.assertAndGetBroadcastShape(e,n);let o="vec4(0.0)";null!=r&&(zl.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=a&&(zl.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const sT={kernelName:Ft,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:a,variance:s,offset:o,scale:i}=e;Vr.assert(a.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Vr.assert(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Vr.assert(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[r,a,s];let c=null;null!=o&&(c=o.shape,u.push(o));let p=null;null!=i&&(p=i.shape,u.push(i));const h=ie().getBool("WEBGL_PACK_NORMALIZATION")?new aT(r.shape,a.shape,s.shape,c,p,l):new rT(r.shape,a.shape,s.shape,c,p,l);return t.runWebGLProgram(h,u,u[0].dtype)}};class oT{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Jv(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return iT.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${iT[t]} = start[${t}] + coords.${iT[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const iT=["x","y","z","w","u","v"];class lT{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=Jv(this.rank),n=VN("coords",this.rank),r=VN("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function uT(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:o}=r,[i,l]=gl.parseSliceParams(a,s,o);if(gl.assertParamsValid(a,i,l),0===Vr.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=BS(e.values,i,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:u}=n.texData.get(a.dataId),c=gl.isSliceContinous(a.shape,i,l);if(u||!c){const e=ie().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lT(l):new oT(l),t=[i];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){const a=r.texData.get(e.dataId),s=r.makeTensorInfo(n,e.dtype),o=r.texData.get(s.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=gl.computeFlatOffset(t,Vr.computeStrides(e.shape));a.slice&&(i+=a.slice.flatOffset),o.slice={flatOffset:i,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,l+1),s}(a,i,l,n)}const cT={kernelName:Hn,backendName:"webgl",kernelFunc:uT},pT={kernelName:je,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:o}=r;Vr.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=s.reduce(((e,t)=>e*t)),l=zl.getReshaped(a.shape,s,i),u=zl.getPermuted(l.length,s.length),c=zl.getReshapedPermuted(a.shape,s,i),p=zl.getSliceBeginCoords(o,s.length),h=zl.getSliceSize(c,o,s.length),d=[],f=rI({inputs:{x:a},backend:n,attrs:{shape:l}}),m=dI({inputs:{x:f},backend:n,attrs:{perm:u}}),g=rI({inputs:{x:m},backend:n,attrs:{shape:c}}),y=uT({inputs:{x:g},backend:n,attrs:{begin:p,size:h}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const hT={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.readSync(a.dataId),l=n.readSync(s.dataId),u=hS(i,l,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,u)}};const dT={kernelName:Ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.readSync(r.dataId),o=n.readSync(a.dataId),i=zl.assertAndGetBroadcastShape(Array.from(s),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},fT=aS({opSnippet:"return float(a != b);",cpuKernelImpl:DS,dtype:"bool"}),mT={kernelName:bn,backendName:"webgl",kernelFunc:fT};function gT(e){const{inputs:t,backend:n}=e,{input:r}=t;return UN({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const yT={kernelName:An,backendName:"webgl",kernelFunc:gT};const bT={kernelName:Xe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:a}=t,{x:s}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===s.dtype)return UN({inputs:{x:s},backend:r});const t=pp(s.shape),n=e({inputs:{x:s},backend:r,attrs:{dtype:"float32"}}),a=HN({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===s.dtype){const t=gT({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!Vr.hasEncodingLoss(s.dtype,o)){const e=UN({inputs:{x:s},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new QN(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(s,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",Vr.getTypedArrayFromDType("bool",1)),t=fT({inputs:{a:s,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${o}`)}},xT="return ceil(x);",wT=rS({opSnippet:xT,packedOpSnippet:xT,cpuKernelImpl:fS}),kT={kernelName:Ye,backendName:"webgl",kernelFunc:wT};class vT{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class NT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const ST={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{clipValueMin:s,clipValueMax:o}=r;let i;i=ie().getBool("WEBGL_PACK_CLIP")?new NT(a.shape):new vT(a.shape);const l=[[s],[o]];return n.runWebGLProgram(i,[a],a.dtype,l)}};class IT{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function TT(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const ET={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new IT(r.shape),o=[TT(r,a.complexTensorInfos.real),TT(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,o,o[0].dtype)}};class $T{constructor(e){this.outputShape=[],this.outputShape=zl.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class CT{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=zl.computeOutShape(e,t);const n=this.outputShape,r=n.length,a=Jv(r),s=VN("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let p=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${AT(o,l,t)}),\n            vec2(${AT(u,l,t)}));\n        }`}const h=i.length,d=i[i.length-1];p+=`\n        return getChannel(\n          getT${h}(${AT(o,l,d)}),\n          vec2(${AT(u,l,d)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[r-1]} = ${s[r-1]} + 1;\n        if (${s[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[r-2]} = ${s[r-2]} + 1;\n        if (${s[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[r-1]} = ${s[r-1]} - 1;\n        if (${s[r-2]} < ${n[r-2]} &&\n            ${s[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function AT(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function RT(e){const{inputs:t,backend:n}=e,{input:r}=t;return UN({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const _T={kernelName:Vt,backendName:"webgl",kernelFunc:RT};function DT(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>gT({inputs:{input:e},backend:n}))),a=e.map((e=>RT({inputs:{input:e},backend:n}))),s=DT(r,t,n),o=DT(a,t,n),i=HN({inputs:{real:s,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}let a=n.shouldExecuteOnCPU(e);if("string"===r&&(a=!0),a){const a=e.map((e=>{const r=Vr.sizeFromShape(e.shape.slice(t));return rI({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),s=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=zl.computeOutShape(a.map((e=>e.shape)),1),i=1===a[0].shape[0],l=mS(s,o,r,i),u=zl.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,r,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>ie().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),a=DT(e.slice(0,r),t,n),s=DT(e.slice(r),t,n),o=DT([a,s],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}if(ie().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new CT(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,r)}const{tensors2D:s,outShape:o}=function(e,t,n){const r=zl.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>rI({inputs:{x:e},attrs:{shape:[-1,Vr.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),i=new $T(s.map((e=>e.shape))),l=n.runWebGLProgram(i,s,r);s.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=rI({inputs:{x:l},attrs:{shape:o},backend:n});return n.disposeIntermediateTensorInfo(l),u}function FT(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=Vr.parseAxisParam(a,t[0].shape)[0],o=zl.computeOutShape(t.map((e=>e.shape)),s);if(0===Vr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>Vr.sizeFromShape(e.shape)>0));if(1===i.length)return UN({inputs:{x:i[0]},backend:n});const l=i.map((e=>e.shape));return zl.assertParamsConsistent(l,s),DT(i,s,n)}const OT={kernelName:et,backendName:"webgl",kernelFunc:FT};class MT{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class LT{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${s}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length);const{dataFormat:n}=t,r=Ov(),a="channelsLast"===n,s=a?0:1,o=a?1:2,i=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${s}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${r.output} = result;\n      }\n    `}}function BT({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=r.texData.get(e.dataId),c=n.inChannels,p=l[0]*l[1]*l[2],h=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(!((1===p||1===h)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&Vr.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Vr.assert(CN(u.shape,p.shape),(()=>`packed reshape ${u.shape} to ${p.shape} isn't free`));const d=rI({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=mI({a:p,b:d,backend:r,transposeA:false,transposeB:false,bias:a,activation:i,preluActivationWeights:s,leakyreluAlpha:o}),y=r.texData.get(g.dataId);Vr.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=h,y.shape=n.outShape,f=UN({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const u=rI({inputs:{x:e},backend:r,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=rI({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=mI({a:u,b:c,transposeA:false,transposeB:false,backend:r,bias:a,activation:i,preluActivationWeights:s,leakyreluAlpha:o});f=rI({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(p)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function PT({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=h*p,y=[m,g],b=[],x=rI({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),w=rI({inputs:{x:t},backend:r,attrs:{shape:[1,m,Vr.sizeFromShape(t.shape)/m]}});b.push(x),b.push(w);const k=new zT(y,n),v=[x.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],N=r.runWebGLProgram(k,[x],"float32",v),S=rI({inputs:{x:N},backend:r,attrs:{shape:[1,y[0],y[1]]}});b.push(N),b.push(S);const I=null!=a,T=null!=s,E="leakyrelu"===i,$=i?sS(i,!0):null,C=new oS(S.shape,w.shape,[1,g,n.outChannels],!0,!1,I,$,T,E),A=[S,w];if(a&&A.push(a),T&&A.push(s),E){const e=r.makeTensorInfo([],"float32",Vr.createScalarValue(o,"float32"));A.push(e),b.push(e)}const R=r.runWebGLProgram(C,A,"float32"),_=rI({inputs:{x:R},backend:r,attrs:{shape:f?[1,h,p,n.outChannels]:[1,n.outChannels,h,p]}});b.push(R);for(const e of b)r.disposeIntermediateTensorInfo(e);return _}const VT={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=r,p=zl.convertConv2DDataFormat(l),h=zl.computeConv2DInfo(a.shape,s.shape,o,u,i,c,!1,p);let d;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(ie().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])d=PT({x:a,filter:s,convInfo:h,backend:n});else{const e=new MT(h);d=n.runWebGLProgram(e,[a,s],"float32")}else d=BT({x:a,filter:s,convInfo:h,backend:n});const f=rI({inputs:{x:d},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class WT{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class UT{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=s?1:2,u=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class GT{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class HT{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const jT={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=r,p=zl.convertConv2DDataFormat(l),h=zl.computeConv2DInfo(a.shape,c,o,1,i,u,!1,p),d=new WT(h);return n.runWebGLProgram(d,[a,s],"float32")}};const qT={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=r,p=zl.convertConv2DDataFormat(u),h=zl.computeConv2DInfo(o,s.shape,i,1,l,c,!1,p),d=new UT(h);return n.runWebGLProgram(d,[a,s],"float32")}};const KT={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:l}=r,u=zl.computeConv3DInfo(a.shape,s.shape,o,l,i),c=new LT(u);return n.runWebGLProgram(c,[a,s],"float32")}};const XT={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,pad:i,filterShape:l}=r,u=zl.computeConv3DInfo(a.shape,l,o,1,i),c=new GT(u);return n.runWebGLProgram(c,[a,s],"float32")}};const YT={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:o,strides:i,inputShape:l}=r,u=zl.computeConv3DInfo(l,s.shape,i,1,o),c=new HT(u);return n.runWebGLProgram(c,[a,s],"float32")}},ZT=rS({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),JT={kernelName:it,backendName:"webgl",kernelFunc:ZT},QT=rS({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),eE={kernelName:lt,backendName:"webgl",kernelFunc:QT};class tE{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,l]=e,[u]=t,[c,p]=n;this.outputShape=[u,c,p,l];const h="bilinear"===r?1:0,[d,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const nE={kernelName:ct,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=r,c=new tE(a.shape,s.shape,i,l,u);return n.runWebGLProgram(c,[a,s,o],"float32")}};class rE{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const r=e.length,a=t?"0.0":`getX(${aE(r,"coords")})`,s=e[e.length-1];let o="",i="";t?(o=n?"end != "+(s-1):"end != 0",i=n?"end + 1":"end - 1"):(o=n?`end + pow2 < ${s}`:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Jv(r)} coords = getOutputCoords();\n        int end = ${sE(r,"coords")};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${i};\n          ${sE(r,"coords")} = idx;\n          val += getX(${aE(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function aE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function sE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const oE={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r,l=a.shape.length,u=zl.getAxesPermutation([s],l);let c=a;null!=u&&(c=dI({inputs:{x:a},backend:n,attrs:{perm:u}}));const p=zl.getInnerMostAxes(1,l)[0];if(p!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=${s}`);const h=c.shape[p];let d=UN({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(h))-1;e++){const t=new rE(c.shape,!1,i),r=[[e]],a=d;d=n.runWebGLProgram(t,[d],d.dtype,r),n.disposeIntermediateTensorInfo(a)}if(o){const e=new rE(c.shape,o,i),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=dI({inputs:{x:d},backend:n,attrs:{perm:zl.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const iE={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(s.dataId),r=hS(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=dS(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class lE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const uE={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:o}=r,i=a.shape[0],l=("NHWC"===o?a.shape[1]:a.shape[2])*s,u=("NHWC"===o?a.shape[2]:a.shape[3])*s,c=("NHWC"===o?a.shape[3]:a.shape[1])/(s*s),p=new lE("NHWC"===o?[i,l,u,c]:[i,c,l,u],s,o);return n.runWebGLProgram(p,[a],a.dtype)}};class cE{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=zN(this.outputShape.length);const s=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${s}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class pE{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=zN(this.outputShape.length);const s=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,p=c;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(p+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?Vr.nearestLargerEven(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,l>1&&(h+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let d="",f="";n&&(d=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${s};\n        int q = d2 - d1 * ${s};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const hE={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=r;let c=l;null==c&&(c=[1,1]),Vr.assert(zl.eitherStridesOrDilationsAreOne(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const p=zl.computeConv2DInfo(a.shape,s.shape,o,c,i,u,!0);let h;h=ie().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new pE(p):new cE(p);const d=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[a,s],"float32",d)}};class dE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const mE={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=r,p=zl.computeConv2DInfo(a.shape,c,o,i,l,u,!0),h=new dE(p);return n.runWebGLProgram(h,[a,s],"float32")}};const gE={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=r,p=zl.computeConv2DInfo(c,s.shape,o,i,l,u,!0),h=new fE(p);return n.runWebGLProgram(h,[a,s],"float32")}};class yE{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const bE={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],s=Vr.sizeFromShape(r.shape),o=rI({inputs:{x:r},backend:n,attrs:{shape:[s]}}),i=new yE(s),l=n.runWebGLProgram(i,[o],o.dtype),u=rI({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class xE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${s});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const wE={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:l}=r,u=zl.computeDilation2DInfo(a.shape,s.shape,o,i,"NHWC",l);let c;const p=new xE(u);c=n.runWebGLProgram(p,[a,s],"float32");const h=rI({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),h}};const kE={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,s=t,{allDims:o,summedDims:i,idDims:l}=zl.decodeEinsumEquation(a,s.length);zl.checkEinsumDimSizes(o.length,l,s);const{path:u,steps:c}=zl.getEinsumComputePath(i,l),p=c.length;let h=null,d=o.length;const f=[];for(let e=0;e<p;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=zl.getEinsumPermutation(d,l[t]);let a;zl.isIdentityPermutation(e)?a=s[t]:(a=dI({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),f.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);Vr.arraysEqual(a.shape,o)||(a=rI({inputs:{x:a},backend:n,attrs:{shape:o}}),f.push(a)),null===h?h=a:(h=eI({inputs:{a:a,b:h},backend:n}),f.push(h))}e<p-1&&(u[e]>=0&&(h=pI({inputs:{x:h},backend:n,attrs:{axis:u[e]-(o.length-d),keepDims:!1}}),f.push(h)),d--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},vE=rS({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),NE={kernelName:vt,backendName:"webgl",kernelFunc:vE},SE={kernelName:Nt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:a}=t,s=ie().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new WN("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,a.shape):new BN("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(s,[r,a],r.dtype)}},IE=aS({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:gS}),TE={kernelName:It,backendName:"webgl",kernelFunc:IE},EE=rS({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${zl.ERF_P};\n  float a1 = ${zl.ERF_A1};\n  float a2 = ${zl.ERF_A2};\n  float a3 = ${zl.ERF_A3};\n  float a4 = ${zl.ERF_A4};\n  float a5 = ${zl.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),$E={kernelName:St,backendName:"webgl",kernelFunc:EE},CE=rS({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:yS,dtype:"float32"}),AE={kernelName:Tt,backendName:"webgl",kernelFunc:CE};function RE(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:s}=t,o=s.shape.length,i=s.shape.slice();let l=a;return a<0&&(Vr.assert(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),rI({inputs:{x:s},backend:r,attrs:{shape:i}})}const _E={kernelName:Et,backendName:"webgl",kernelFunc:RE},DE="return exp(x) - 1.0;",FE=rS({opSnippet:DE,packedOpSnippet:DE,cpuKernelImpl:bS}),OE={kernelName:$t,backendName:"webgl",kernelFunc:FE};class ME{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function LE(e,t,n){const r=n.texData.get(e.dataId),a=Vr.sizeFromShape(e.shape),s=e.shape[e.shape.length-1],o=rI({inputs:{x:e},backend:n,attrs:{shape:[a/s,s]}}),i=o.shape,l=new ME("real",i,t),u=new ME("imag",i,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(l,c,"float32"),h=n.runWebGLProgram(u,c,"float32"),d=HN({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const f=rI({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(d),f}const zE={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return LE(r,!1,n)}};class BE{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function PE(e){const{backend:t,attrs:n}=e,{shape:r,value:a}=n;let{dtype:s}=n;if(s=s||Vr.inferDtype(a),"string"===s){const e=Vr.getArrayFromDType(s,Vr.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,s,e)}{const e=new BE(r,a),n=[[a]];return t.runWebGLProgram(e,[],s,n)}}const VE={kernelName:At,backendName:"webgl",kernelFunc:PE};class WE{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const UE={kernelName:Rt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,a=new WE(n.shape);return r.runWebGLProgram(a,[n],n.dtype)}},GE="return floor(x);",HE=rS({opSnippet:GE,packedOpSnippet:GE,cpuKernelImpl:xS}),jE={kernelName:_t,backendName:"webgl",kernelFunc:HE},qE=aS({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),KE={kernelName:Dt,backendName:"webgl",kernelFunc:qE};class XE{constructor(e){this.variableNames=["A"];const t=Ov(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class YE{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Ov(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const ZE={kernelName:Ir,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:s}=r,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,u]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[u,l],p=[u,l,s];(i||o)&&(null==JE&&(JE=document.createElement("canvas").getContext("2d")),JE.canvas.width=l,JE.canvas.height=u,JE.drawImage(a,0,0,l,u),a=JE.canvas);const h=n.makeTensorInfo(c,"int32");n.texData.get(h.dataId).usage=oN.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),a);const d=ie().getBool("WEBGL_PACK")?new YE(p):new XE(p),f=n.runWebGLProgram(d,[h],"int32");return n.disposeData(h.dataId),f}};let JE;const QE={kernelName:$r,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=zl.convertConv2DDataFormat(c),g=zl.computeConv2DInfo(a.shape,s.shape,l,p,u,h,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(ie().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])y=PT({x:a,filter:s,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=null!=o,t=null!=i,r="leakyrelu"===d,l=d?sS(d,!1):null,u=new MT(g,e,l,t,r),c=[a,s];if(o&&c.push(o),i&&c.push(i),r){const e=n.makeTensorInfo([],"float32",Vr.createScalarValue(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=BT({x:a,filter:s,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const x=rI({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const e$={kernelName:Cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:h,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),Vr.assert(zl.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=zl.computeConv2DInfo(a.shape,s.shape,l,m,u,p,!0),y=ie().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=h?sS(h,y):null,x=[a,s],w=null!=o,k=null!=i,v="leakyrelu"===h;if(w&&x.push(o),k&&x.push(i),v){const e=n.makeTensorInfo([],"float32",Vr.createScalarValue(d,"float32"));x.push(e),f.push(e)}let N;N=y?new pE(g,w,b,k,v):new cE(g,w,b,k,v);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],I=n.runWebGLProgram(N,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class t${constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=Jv(t.length),a=Jv(n.length),s=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${s};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const n$={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=a.shape,o=s[s.length-1],i=Vr.sizeFromShape(r.shape),[l,u,c,p]=zl.prepareAndValidate(r,a),h=rI({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),d=rI({inputs:{x:r},backend:n,attrs:{shape:[Vr.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(r),s=wS(e,t,r.dtype,u,o,c,p,r.shape,i);return n.makeTensorInfo(l,r.dtype,s.values)}const f=new t$(o,p,[u,c]),m=n.runWebGLProgram(f,[d,h],d.dtype),g=rI({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class r${constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Jv(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function a$(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:o,batchDims:i}=r,l=Vr.parseAxisParam(o,a.shape)[0];if(ie().get("DEBUG")){const e=n.readSync(s.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){const r=e[n];Vr.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const u=zl.segment_util.collectGatherOpShapeInfo(a,s,l,i),c=Vr.sizeFromShape(s.shape),p=[],h=rI({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=rI({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(h),p.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([a,s])||"string"===a.dtype){const e=n.bufferSync(d),t=n.bufferSync(h),r=kS(t,e,f);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}const m=new r$(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);p.push(g);const y=rI({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const s$={kernelName:Ot,backendName:"webgl",kernelFunc:a$},o$=aS({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:vS,dtype:"bool"}),i$={kernelName:Lt,backendName:"webgl",kernelFunc:o$},l$=aS({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:NS}),u$={kernelName:zt,backendName:"webgl",kernelFunc:l$};const c$={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return LE(r,!0,n)}},p$=rS({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),h$={kernelName:Wt,backendName:"webgl",kernelFunc:p$},d$=rS({opSnippet:"return float(isinf(x));",dtype:"bool"}),f$={kernelName:Ut,backendName:"webgl",kernelFunc:d$},m$=rS({opSnippet:"return float(isnan(x));",dtype:"bool"}),g$={kernelName:Gt,backendName:"webgl",kernelFunc:m$},y$=aS({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:SS,dtype:"bool"}),b$={kernelName:jt,backendName:"webgl",kernelFunc:y$},x$=aS({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:IS,dtype:"bool"}),w$={kernelName:qt,backendName:"webgl",kernelFunc:x$};const k$={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=TS(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},v$=rS({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:ES}),N$={kernelName:Xt,backendName:"webgl",kernelFunc:v$},S$=rS({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),I$={kernelName:Yt,backendName:"webgl",kernelFunc:S$},T$=aS({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),E$={kernelName:Zt,backendName:"webgl",kernelFunc:T$},$$=rS({opSnippet:"return float(!(x >= 1.0));"}),C$={kernelName:Jt,backendName:"webgl",kernelFunc:$$},A$=aS({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),R$={kernelName:Qt,backendName:"webgl",kernelFunc:A$};class _${constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[];const s=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class D${constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const F$={kernelName:en,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:o,alpha:i,beta:l}=r,u=ie().getBool("WEBGL_PACK_NORMALIZATION")?new D$(a.shape,s,o,i,l):new _$(a.shape,s,o,i,l);return n.runWebGLProgram(u,[a],a.dtype)}};class O${constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const M$={kernelName:tn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=r,p=new O$(a.shape,i,l,u,c);return n.runWebGLProgram(p,[a,s,o],a.dtype)}};function L$(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:s,keepDims:o}=r,i=a.shape.length,l=Vr.parseAxisParam(s,a.shape);let u=l;const c=zl.getAxesPermutation(u,i),p=null!=c,h=n.shouldExecuteOnCPU([a]);let d=a;if(p){if(h){const e=n.texData.get(d.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const r=ZS(e,a.shape,a.dtype,c,t);d=n.makeTensorInfo(t,a.dtype);n.texData.get(d.dataId).values=r}else d=cI(a,c,n);u=zl.getInnerMostAxes(u.length,i)}zl.assertAxesAreInnerMostDims("max",u,i);const[f,m]=zl.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(o&&(y=zl.expandShapeToKeepDim(f,l)),h){const e=n.texData.get(d.dataId).values,t=$S(e,Vr.sizeFromShape(m),y,a.dtype);g=n.makeTensorInfo(y,a.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,r){const a=Vr.sizeFromShape(t),s=rI({inputs:{x:e},attrs:{shape:[Vr.sizeFromShape(e.shape)/a,a]},backend:r}),o=iI(s,e.dtype,"max",r),i=rI({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}(d,m,y,n);return p&&n.disposeIntermediateTensorInfo(d),g}const z$={kernelName:nn,backendName:"webgl",kernelFunc:L$},B$=aS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:CS}),P$={kernelName:rn,backendName:"webgl",kernelFunc:B$};const V$={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;MN(a,"maxPool");const{filterSize:s,strides:o,pad:i,dimRoundingMode:l}=r;Vr.assert(zl.eitherStridesOrDilationsAreOne(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=zl.computePool2DInfo(a.shape,s,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&Vr.arraysEqual(u.inShape,u.outShape))return UN({inputs:{x:a},backend:n});const c=new KI(u,"max",!1);return n.runWebGLProgram(c,[a],a.dtype)}};const W$={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=r,c=zl.computePool3DInfo(a.shape,s,o,[1,1,1],i,u,l),p=new XI(c,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};class U${constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=s-1-e.padInfo.left,l=a*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class G${constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=l-1-e.padInfo.top,h=u-1-e.padInfo.left,d=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const H$={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,o=s,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=r,p=zl.computePool3DInfo(o.shape,i,l,[1,1,1],u,c),h=new XI(p,"max",!0),d=n.runWebGLProgram(h,[o],o.dtype),f=new G$(p),m=n.runWebGLProgram(f,[a,d],o.dtype);return n.disposeIntermediateTensorInfo(d),m}};const j$={kernelName:sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:o}=t,i=s;MN([s,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=r,h=zl.computePool2DInfo(i.shape,l,u,1,c,p),d=new KI(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new U$(h),g=n.runWebGLProgram(m,[a,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const q$={kernelName:un,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:s,pad:o,includeBatchInIndex:i}=t,l=n;Vr.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];Vr.assert(zl.eitherStridesOrDilationsAreOne(s,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`));const c=zl.computePool2DInfo(r.shape,a,s,u,o),[p,h]=function(e,t,n,r){let a=new KI(n,"max",!1);const s=r.runWebGLProgram(a,[e],"float32");return a=new KI(n,"max",!0,!0,t),[s,r.runWebGLProgram(a,[e],"float32")]}(r,i,c,l);return[p,h]}};const K$={kernelName:cn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:a,axis:s}=t,o=n,i=r.shape.length,l=Vr.parseAxisParam(s,r.shape);let u=l;const c=zl.getAxesPermutation(u,i),p=null!=c,h=o.shouldExecuteOnCPU([r]),d=[];let f=r;if(p){if(h){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=ZS(e,r.shape,r.dtype,c,t);f=o.makeTensorInfo(t,r.dtype);o.texData.get(f.dataId).values=n}else f=cI(r,c,o);d.push(f),u=zl.getInnerMostAxes(u.length,i)}zl.assertAxesAreInnerMostDims("sum",u,i);const[m,g]=zl.computeOutAndReduceShapes(f.shape,u);let y=m;a&&(y=zl.expandShapeToKeepDim(m,l));const b=function(e,t,n,r){const a=Vr.sizeFromShape(t),s=rI({inputs:{x:e},attrs:{shape:[Vr.sizeFromShape(e.shape)/a,a]},backend:r}),o=iI(s,"float32","mean",r),i=rI({inputs:{x:o},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}(f,g,y,o);for(const e of d)o.disposeIntermediateTensorInfo(e);return b}};const X$={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r,i=a.shape.length,l=Vr.parseAxisParam(s,a.shape);let u=l;const c=zl.getAxesPermutation(u,i);let p=a;null!=c&&(p=dI({inputs:{x:a},backend:n,attrs:{perm:c}}),u=zl.getInnerMostAxes(u.length,a.shape.length)),zl.assertAxesAreInnerMostDims("min",u,i);const[h,d]=zl.computeOutAndReduceShapes(p.shape,u),f=rI({inputs:{x:p},backend:n,attrs:{shape:[-1,Vr.sizeFromShape(d)]}}),m=iI(f,f.dtype,"min",n);let g;if(o){g=rI({inputs:{x:m},backend:n,attrs:{shape:zl.expandShapeToKeepDim(h,l)}})}else g=rI({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(p),g}},Y$=aS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:AS}),Z$={kernelName:hn,backendName:"webgl",kernelFunc:Y$};class J${constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=Jv(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Q${constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=Jv(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=VN("rc",r),l=VN("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const eC={kernelName:dn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:a,mode:s}=n,o=ie().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Q$(r.shape,a,s):new J$(r.shape,a,s);return t.runWebGLProgram(o,[r],r.dtype)}},tC=aS({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),nC={kernelName:fn,backendName:"webgl",kernelFunc:tC};class rC{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const aC=aS({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),sC={kernelName:wt,backendName:"webgl",kernelFunc:aC},oC="return a - b;",iC=aS({opSnippet:oC,packedOpSnippet:oC,supportsComplex:!0,cpuKernelImpl:KS}),lC={kernelName:dr,backendName:"webgl",kernelFunc:iC};function uC(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,o=Vr.parseAxisParam([s],a.shape),i=L$({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=zl.expandShapeToKeepDim(i.shape,o),u=rI({inputs:{x:i},backend:n,attrs:{shape:l}}),c=iC({inputs:{a:a,b:u},backend:n}),p=CE({inputs:{x:c},backend:n}),h=pI({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),d=rI({inputs:{x:h},backend:n,attrs:{shape:l}}),f=aC({inputs:{a:p,b:d},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),f}const cC={kernelName:tr,backendName:"webgl",kernelFunc:uC};const pC={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r,l=i?a:uC({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new rC(u,c,s),h=[[o]],d=n.runWebGLProgram(p,[l],"int32",h);return i||n.disposeIntermediateTensorInfo(l),d}};const hC={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,a]=_S(e.values,r.shape,r.dtype);return n.makeTensorInfo(a,r.dtype,t)}let a;return a=ie().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new nS(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new QN(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(a,[r],r.dtype)}},dC=Vc.nonMaxSuppressionV3Impl;const fC={kernelName:xn,backendName:"webgl",kernelFunc:function(e){zl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=r,u=n.readSync(a.dataId),c=n.readSync(s.dataId),{selectedIndices:p}=dC(u,c,o,i,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},mC=Vc.nonMaxSuppressionV4Impl;const gC={kernelName:wn,backendName:"webgl",kernelFunc:function(e){zl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=r,c=n.readSync(a.dataId),p=n.readSync(s.dataId),{selectedIndices:h,validOutputs:d}=mC(c,p,o,i,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},yC=Vc.nonMaxSuppressionV5Impl;const bC={kernelName:kn,backendName:"webgl",kernelFunc:function(e){zl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=r,c=n.readSync(a.dataId),p=n.readSync(s.dataId),h=o,d=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=yC(c,p,h,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class xC{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const wC={kernelName:Nn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{depth:s,onValue:o,offValue:i}=r,l=Vr.sizeFromShape(a.shape),u=new xC(l,s,o,i),c=rI({inputs:{x:a},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(u,[c],a.dtype);n.disposeIntermediateTensorInfo(c);const h=rI({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,s]}});return n.disposeIntermediateTensorInfo(p),h}};function kC(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=gT({inputs:{input:r},backend:n}),t=kC({inputs:{x:e},backend:n}),a=RT({inputs:{input:r},backend:n}),s=kC({inputs:{x:a},backend:n}),o=HN({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return PE({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const vC={kernelName:Nr,backendName:"webgl",kernelFunc:kC};const NC={kernelName:vn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=gT({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=RT({inputs:{input:a},backend:r}),o=kC({inputs:{x:s},backend:r}),i=HN({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return PE({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:r})}};const SC={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return RE({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const s=t[0].shape,o=t[0].dtype;t.forEach((e=>{Vr.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),Vr.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=FT({inputs:t.map((e=>{const t=RE({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t})),backend:n,attrs:{axis:a}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class IC{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=Jv(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class TC{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=Jv(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=VN("rc",r),l=VN("source",r),u=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,p=[`${a} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${u}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const EC=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:o}=r;if(0===Vr.sizeFromShape(a.shape)){return PE({backend:n,attrs:{shape:s.map(((e,t)=>e[0]+a.shape[t]+e[1])),value:o,dtype:a.dtype}})}const i=ie().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TC(a.shape,s,o):new IC(a.shape,s,o),l=[[o]];return n.runWebGLProgram(i,[a],a.dtype,l)},$C={kernelName:In,backendName:"webgl",kernelFunc:EC},CC=aS({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),AC={kernelName:Tn,backendName:"webgl",kernelFunc:CC};const RC={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r,i=a.shape.length,l=[],u=Vr.parseAxisParam(s,a.shape);let c=u;const p=zl.getAxesPermutation(c,i);let h,d=a;if(null!=p&&(d=dI({inputs:{x:a},backend:n,attrs:{perm:p}}),c=zl.getInnerMostAxes(c.length,i),l.push(d)),zl.assertAxesAreInnerMostDims("prod",c,i),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:a}=FS(d.shape,d.dtype,e,c);h=n.makeTensorInfo(r,a,t)}else{const[e,t]=zl.computeOutAndReduceShapes(d.shape,c),r=Vr.sizeFromShape(t),s=rI({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),o=iI(s,os(a.dtype),"prod",n);h=rI({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(s),l.push(o)}if(o){l.push(h);const e=zl.expandShapeToKeepDim(h.shape,u);h=rI({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},_C=e=>{const{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:o}=n,i=OS(r,a,s,o);return t.makeTensorInfo([i.length],o,i)},DC={kernelName:Cn,backendName:"webgl",kernelFunc:_C},FC=rS({opSnippet:"return 1.0 / x;"}),OC={kernelName:Rn,backendName:"webgl",kernelFunc:FC},MC=rS({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),LC={kernelName:_n,backendName:"webgl",kernelFunc:MC},zC=rS({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),BC={kernelName:zn,backendName:"webgl",kernelFunc:zC};class PC{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,l]=e;this.outputShape=[s,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class VC{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,l]=e;this.outputShape=[s,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const WC={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r,[l,u]=i,c=ie().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new VC(a.shape,l,u,s,o):new PC(a.shape,l,u,s,o);return n.runWebGLProgram(c,[a],"float32")}};class UC{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],l=[n&&s>1?s-1:s,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const GC={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new UC(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class HC{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,l]=e;this.outputShape=[s,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class jC{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,l]=e;this.outputShape=[s,t,n,l];const u=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const qC={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r,[l,u]=i,c=ie().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new jC(a.shape,l,u,s,o):new HC(a.shape,l,u,s,o);return n.runWebGLProgram(c,[a],a.dtype)}};class KC{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],l=[n&&s>1?s-1:s,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],p=1/u,h=1/c,d=2*Math.ceil(p)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const XC={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new KC(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class YC{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),a=Jv(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class ZC{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=VN("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=Jv(n);var i;function l(n){const r=e.map(((r,a)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(a,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${i=r.slice(),l(i)};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(r.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const JC={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r,o=a.shape.length,i=Vr.parseAxisParam(s,a.shape);if(0===o)return UN({inputs:{x:a},backend:n});const l=ie().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ZC(a.shape,i):new YC(a.shape,i);return n.runWebGLProgram(l,[a],a.dtype)}};class QC{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const eA={kernelName:Tr,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:o}=t,i=n,l=new QC(r.shape,s),[u,c]=zl.getImageCenter(o,r.shape[1],r.shape[2]),p=[[u,c,Math.sin(a),Math.cos(a)]];return i.runWebGLProgram(l,[r],r.dtype,p)}},tA=rS({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),nA={kernelName:Pn,backendName:"webgl",kernelFunc:tA},rA=rS({opSnippet:"return inversesqrt(x);",cpuKernelImpl:MS}),aA={kernelName:Vn,backendName:"webgl",kernelFunc:rA};class sA{constructor(e,t,n,r,a,s,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const i=Jv(a.length),l=Jv(s.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const oA={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:o}=r,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=zl.calculateShapes(s,a,o),h=[p/u,u];if(0===p)return n.makeTensorInfo(o,a.dtype);const d=rI({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),f=rI({inputs:{x:s},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new sA(l,i,d.shape.length,f.shape.length,c,h),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=rI({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class iA{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&s.push(`${n[r]}`);r=s.join(),a=o.join()}const s=Jv(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const lA={kernelName:Un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t,o=new iA(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(o,[r,a,s],ss(a.dtype,s.dtype))}},uA=rS({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${zl.SELU_SCALEALPHA};\n  float scale = ${zl.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),cA={kernelName:Gn,backendName:"webgl",kernelFunc:uA},pA=rS({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:LS}),hA={kernelName:Xn,backendName:"webgl",kernelFunc:pA},dA=rS({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),fA={kernelName:Kn,backendName:"webgl",kernelFunc:dA},mA=rS({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),gA={kernelName:jn,backendName:"webgl",kernelFunc:mA},yA=rS({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),bA={kernelName:qn,backendName:"webgl",kernelFunc:yA},xA=rS({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),wA={kernelName:Yn,backendName:"webgl",kernelFunc:xA},kA={kernelName:Qn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:o}=r;Vr.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=s.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);const u=[],c=EC({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),p=zl.getReshaped(c.shape,s,i,!1),h=zl.getPermuted(p.length,s.length,!1),d=zl.getReshapedPermuted(c.shape,s,i,!1),f=rI({inputs:{x:c},backend:n,attrs:{shape:p}}),m=dI({inputs:{x:f},backend:n,attrs:{perm:h}}),g=rI({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const vA={kernelName:nr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${s.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),l=n.readSync(a.dataId),u=n.readSync(s.dataId),c=n.readSync(o.dataId)[0],[p,h,d,f,m]=PS(i,r.shape,r.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],a.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const NA={kernelName:rr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.readSync(a.dataId)),i=n.readSync(r.dataId),l=Array.from(n.readSync(s.dataId)),[u,c,p]=VS(i,r.shape,r.dtype,o,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}};const SA={kernelName:ar,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${s.shape}`);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),l=n.readSync(s.dataId),[u,c]=WS(o,r.shape,r.dtype,i,l,!0);return n.makeTensorInfo(c,r.dtype,u)}};const IA={kernelName:sr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${s.shape}`);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),l=n.readSync(s.dataId),[u,c]=WS(o,r.shape,r.dtype,i,l);return n.makeTensorInfo(c,r.dtype,u)}};const TA={kernelName:or,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:s,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:l,numUpdates:u,strides:c,outputSize:p}=zl.calculateShapes(s,a,i),h=new sA(u,l,a.shape.length,s.shape.length,c,[p,1],!1),d=n.runWebGLProgram(h,[s,a,o],s.dtype),f=rI({inputs:{x:d},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),f}};const EA={kernelName:er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:o}=r,i=Vr.parseAxisParam(o,a.shape)[0],l=zl.prepareSplitSize(a,s,i),u=a.shape.length,c=new Array(u).fill(0),p=a.shape.slice();return l.map((e=>{const t=[...p];t[i]=e;const r=uT({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},$A="return sqrt(x);",CA=rS({opSnippet:$A,packedOpSnippet:$A,cpuKernelImpl:US}),AA={kernelName:Zn,backendName:"webgl",kernelFunc:CA},RA={kernelName:lr,backendName:"webgl",kernelFunc:rS({opSnippet:"return x * x;"})},_A="return (a - b) * (a - b);",DA=aS({opSnippet:_A,packedOpSnippet:_A}),FA={kernelName:ir,backendName:"webgl",kernelFunc:DA};const OA={kernelName:Sr,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,s=new QN(r.shape,a);return n.runWebGLProgram(s,[r],r.dtype)}};class MA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,a=Jv(n.length),s=Jv(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const LA={kernelName:ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=gl.sliceInfo(a.shape,s,o,i,l,u,c,p,h);let k;if(m)k=rI({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||y){Vr.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=gl.computeOutShape(b,x,w),t=uT({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=rI({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=zi(a.shape,a.dtype,e),r=GS(d,t,w,b);k=n.makeTensorInfo(f,a.dtype,r.values)}else{const e=new MA(b,w,d);k=n.runWebGLProgram(e,[a],a.dtype)}}const v=rI({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}};const zA={kernelName:cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:p}=t,h=n.readSync(c.dataId),d=n.readSync(p.dataId),[f,m]=HS(h,d,a,s,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}};const BA={kernelName:pr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(s.dataId),l=n.readSync(o.dataId)[0],[u,c,p]=jS(i,l,a),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const PA={kernelName:hr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(s.dataId),i=qS(o,a);return n.makeTensorInfo(s.shape,"int32",i)}},VA=rS({opSnippet:"return tan(x);"}),WA={kernelName:fr,backendName:"webgl",kernelFunc:VA},UA=rS({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),GA={kernelName:mr,backendName:"webgl",kernelFunc:UA};class HA{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=Jv(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function jA(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>Vr.decodeString(e))):e,r=zi(a.shape,a.dtype,t),o=XS(r,s);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new HA(a.shape,s);return n.runWebGLProgram(o,[a],a.dtype)}const qA={kernelName:gr,backendName:"webgl",kernelFunc:jA};class KA{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class XA{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function YA(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function ZA(e){let t=1;for(;t<e;)t*=2;return t}const JA={kernelName:yr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:o}=r,i=ie().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=ie().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([a])||c<i||s>l){const e=n.readSync(a.dataId),[t,r]=YS(e,u,a.dtype,s,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===s)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[a,PE({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const p=n.texData.get(a.dataId),h=null!==p&&p.isPacked,d=h?n.unpackTensor(a):a,f=Vr.sizeFromShape(u)/c,m=rI({inputs:{x:d},attrs:{shape:[f,c]},backend:n});h&&YA(n,d);const g=ZA(s),y=ZA(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const a=x(),s=new KA(r),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(s,a,"int32",o),YA(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new XA([f,e/2]),a=[[c],[null===b?1:0],[g]],s=b;b=n.runWebGLProgram(r,t,"int32",a),YA(n,s);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=uT({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,s]}}),YA(n,k);let v=a$({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});YA(n,m);const N=u.slice(0,-1);N.push(s),k=b,b=rI({inputs:{x:b},attrs:{shape:N},backend:n}),YA(n,k);const S=v;return v=rI({inputs:{x:v},attrs:{shape:N},backend:n}),YA(n,S),[v,b]}};class QA{constructor(e,t,n,r,a,s){this.variableNames=["Image","Transforms"],this.outputShape=s;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const eR={kernelName:br,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=r,[c,p,h,d]=a.shape,[f,m]=null!=u?u:[p,h],g=new QA(p,h,o,i,l,[c,f,m,d]);return n.runWebGLProgram(g,[a,s],"float32")}};const tR={kernelName:wr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;MN(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(s.dataId),{outputValues:i,outputShape:l,indices:u}=JS(o,a,s.shape,s.dtype);return[r.makeTensorInfo(l,s.dtype,i),r.makeTensorInfo([u.length],"int32",u)]}};const nR={kernelName:kr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a,i=o.shape.length,l=a.shape[s],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==s&&(u[c++]=o.shape[e]);const p=[],h=new Array(i).fill(0),d=o.shape.slice();d[s]=1;const f=new Array(l);for(let e=0;e<f.length;e++){h[s]=e;const t=uT({inputs:{x:o},backend:n,attrs:{begin:h,size:d}}),r=rI({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class rR{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,o=s*Math.ceil(a/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let p="";a%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const aR=[gI,bI,wI,vI,II,$I,CI,AI,MI,LI,BI,VI,UI,HI,qI,YI,ZI,eT,tT,nT,sT,pT,hT,dT,bT,kT,ST,jN,ET,OT,VT,jT,qT,KT,XT,YT,JT,eE,nE,oE,iE,uE,hE,mE,gE,bE,wE,kE,NE,SE,TE,$E,AE,_E,OE,zE,VE,UE,jE,KE,ZE,QE,e$,n$,s$,i$,u$,GN,c$,_T,h$,f$,g$,XN,b$,w$,k$,N$,I$,E$,C$,R$,F$,M$,z$,P$,V$,W$,H$,j$,q$,K$,X$,Z$,eC,nC,pC,tI,hC,fC,gC,bC,mT,wC,NC,SC,$C,AC,JN,RC,DC,yT,sC,OC,LC,BC,aI,WC,GC,qC,XC,JC,eA,nA,aA,oA,lA,cA,hA,fA,gA,bA,cT,cC,wA,kA,vA,NA,SA,IA,TA,EA,AA,RA,FA,OA,LA,zA,BA,PA,lC,hI,WA,GA,qA,JA,eR,fI,tR,nR,{kernelName:vr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:o}=r,i=a.shape.length,l=[];let u=0;const c=zl.getAxesPermutation([u],i);let p=a;null!=c&&(p=dI({inputs:{x:a},backend:n,attrs:{perm:c}}),l.push(p),u=zl.getInnerMostAxes(1,i)[0]);const h=zl.segment_util.computeOutShape(p.shape,u,o),d=Vr.sizeFromShape([p.shape[u]]),f=rI({inputs:{x:p},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=os(a.dtype),g=(e,t,r,a,s)=>{const o=e.shape[0],i=e.shape[1],u=zl.segment_util.segOpComputeOptimalWindowSize(i,s),c=new rR({windowSize:u,inSize:i,batchSize:o,numSegments:s},t),p=n.compileAndRun(c,[e,r],a);if(l.push(p),p.shape[1]===s)return p;const h=_C({backend:n,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),d=jA({inputs:{x:h},backend:n,attrs:{reps:[i/u]}});l.push(h),l.push(d);return g(p,t,d,a,s)},y=rI({inputs:{x:g(f,"unsortedSegmentSum",s,m,o)},backend:n,attrs:{shape:h}});let b=y;if(null!=c){l.push(y);const e=zl.getUndoAxesPermutation(c);b=dI({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},vC];for(const e of aR)zr(e);const sR=ie();sR.registerFlag("HAS_WEBGL",(()=>sR.getNumber("WEBGL_VERSION")>0)),sR.registerFlag("WEBGL_VERSION",(()=>DN(2)?2:DN(1)?1:0)),sR.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),sR.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===sR.get("WEBGL_VERSION"))),sR.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),sR.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),sR.registerFlag("WEBGL_PACK",(()=>sR.getBool("HAS_WEBGL"))),sR.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_CLIP",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_PACK_REDUCE",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_LAZILY_UNPACK",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_CONV_IM2COL",(()=>sR.getBool("WEBGL_PACK"))),sR.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==AN){const t=aN(e);AN=t.getParameter(t.MAX_TEXTURE_SIZE)}return AN}(sR.getNumber("WEBGL_VERSION")))),sR.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==RN){const t=aN(e);RN=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,RN)}(sR.getNumber("WEBGL_VERSION")))),sR.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=sR.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=aN(e);return t=_N(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:_N(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),sR.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>sR.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!bs.isMobile())),sR.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=aN(e);if(1===e){if(!_N(t,"OES_texture_float"))return!1}else if(!_N(t,"EXT_color_buffer_float"))return!1;return ON(t)}(sR.getNumber("WEBGL_VERSION")))),sR.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!sR.getBool("WEBGL_FORCE_F16_TEXTURES")&&sR.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),sR.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>FN(sR.getNumber("WEBGL_VERSION")))),sR.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=sR.getNumber("WEBGL_VERSION"))&&null!=aN(e).fenceSync;var e})),sR.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>sR.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),sR.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),sR.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>bs.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),sR.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),sR.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),sR.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),sR.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));class oR{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=sN.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Ov();this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Lv(["r","c","d"],e):Mv(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class iR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=sN.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Ov();this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Lv(["r","c","d"],e):Mv(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class lR{constructor(e){this.variableNames=["A"],this.outTexUsage=oN.DOWNLOAD;const t=Ov();this.outputShape=e,this.userCode=`\n      ${Pv}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class uR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=oN.DOWNLOAD;const t=Ov();this.outputShape=e,this.userCode=`\n      ${Pv}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class cR{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Ov();this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Bv(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class pR{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Ov();this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length);let r="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const s=2*t+a;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${s}] = values[0];\n            } else if (offset == 1) {\n              result[${s}] = values[1];\n            } else if (offset == 2) {\n              result[${s}] = values[2];\n            } else {\n              result[${s}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Bv(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${a};\n        }\n    `}}function hR(e){const t=Ov();return function(e,t){const n=NN(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(hN(e,(()=>e.shaderSource(n,t))),hN(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function dR(e){return function(e,t){const n=NN(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return hN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),hN(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function fR(e){return function(e,t){const n=NN(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return hN(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),hN(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function mR(e,t,n,r,a,s){!function(e,t){const n=ie().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return NN(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return hN(e,(()=>e.bindTexture(i,o))),hN(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),hN(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),hN(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),hN(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===ie().getNumber("WEBGL_VERSION")?hN(e,(()=>e.texImage2D(i,0,r,t,n,0,a,s,null))):hN(e,(()=>e.texStorage2D(i,1,r,t,n))),hN(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function gR(e){return e.internalFormatFloat}function yR(e){return e.internalFormatHalfFloat}function bR(e){return e.downloadTextureFormat}function xR(e){return e.internalFormatPackedFloat}function wR(e){return e.internalFormatPackedHalfFloat}function kR(e,t,n,r,a,s,o,i){const l=e,u=new Float32Array(function(e,t){const[n,r]=cN(e,t);return n*r*4}(s,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class vR{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=ie().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){nN[e]=t}(t,e)):this.gl=aN(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===ie().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=fN(this.gl,e),_N(this.gl,t))this.textureHalfFloatExtension=fN(this.gl,t);else if(ie().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),_N(this.gl,r))this.colorBufferHalfFloatExtension=fN(this.gl,r);else if(ie().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",_N(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!_N(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=dR(this.gl),this.indexBuffer=fR(this.gl),this.framebuffer=function(e){return NN(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=pN(this.gl,this.textureHalfFloatExtension)}get debug(){return ie().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;hN(e,(()=>e.finish())),hN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),hN(e,(()=>e.deleteFramebuffer(this.framebuffer))),hN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),hN(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),hN(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=lN(t,n);return mR(e,a,s,gR(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=lN(t,n);return mR(e,a,s,yR(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=lN(t,n);return mR(e,a,s,bR(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){hN(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===ie().getNumber("WEBGL_VERSION")?hN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):hN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===ie().getNumber("WEBGL_VERSION")?hN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):hN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),hN(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,a,s){let o,i,l;hN(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,l=s.internalFormatPackedFloat),o.set(a),2===ie().getNumber("WEBGL_VERSION")?hN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):hN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,i,o))),hN(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=cN(t,n);return mR(e,a,s,wR(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=cN(t,n);return mR(e,a,s,xR(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(kN(this.gl,this.framebuffer),this.outputTexture=null),hN(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[a,s]=lN(t,n),o=new Uint8Array(t*n*4);return hN(e,(()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return kR(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,a=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,a),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const a=e.createBuffer();hN(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const s=16*t*n;return hN(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),hN(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),hN(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(ie().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(a,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=a}else ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return hN(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=hR(t));const n=function(e){return NN(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return hN(t,(()=>t.attachShader(n,this.vertexShader))),hN(t,(()=>t.attachShader(n,e))),function(e,t){if(hN(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&yN(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return hN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),bN(e,t,"clipSpacePos",n,3,20,0)&&bN(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&hN(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&yN(this.gl,this.program),hN(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return NN(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),hN(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),xN(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,a]=cN(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&yN(this.gl,this.program),vN(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),hN(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),hN(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=fN(this.gl,2===ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Vr.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||Vr.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),wN(this.gl,e,this.framebuffer),this.debug&&vN(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(wN(this.gl,this.outputTexture,this.framebuffer),this.debug&&vN(this.gl)):kN(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;wN(r,e,this.framebuffer),this.debug&&vN(r),this.outputTexture=e,hN(r,(()=>r.viewport(0,0,t,n))),hN(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),hN(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class NR{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=zN(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=VN("rc",this.rank),t=Jv(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let a=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class SR{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=TR(t,n),a=ER(e,r,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const s=IR(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return r===iN.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===iN.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===iN.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===iN.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===iN.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const a=TR(n,r),s=ER(t,a,r);s in this.freeTextures||(this.freeTextures[s]=[]);const o=IR(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=ie().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[s],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function IR(e,t,n,r,a){const s=function(e,t){switch(e){case iN.PACKED_2X2_FLOAT32:return xR(t);case iN.PACKED_2X2_FLOAT16:return wR(t);case iN.UNPACKED_FLOAT32:return gR(t);case iN.UNPACKED_FLOAT16:return yR(t);case iN.PACKED_4X1_UNSIGNED_BYTE:return bR(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(a){const[t,n]=cN(e[0],e[1]);o=t*n}else{const[t,n]=lN(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,s);return o*i}function TR(e,t){if(e===oN.UPLOAD)return iN.PACKED_2X2_FLOAT32;if(e===oN.RENDER||null==e)return function(e){return ie().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?iN.PACKED_2X2_FLOAT32:iN.UNPACKED_FLOAT32:e?iN.PACKED_2X2_FLOAT16:iN.UNPACKED_FLOAT16}(t);if(e===oN.DOWNLOAD||e===oN.PIXELS)return iN.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function ER(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class $R{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=zN(this.outputShape.length);const t=e.length,n=VN("rc",t),r=Jv(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const CR=Vc.whereImpl,AR={};const RR=ie().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class _R extends i{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!ie().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof vR)t=e;else{const n=aN(ie().getNumber("WEBGL_VERSION"),e);t=new vR(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=aN(ie().getNumber("WEBGL_VERSION"));t=new vR(e),this.binaryCache=((n=ie().getNumber("WEBGL_VERSION"))in AR||(AR[n]={}),AR[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new SR(this.gpgpu),this.numMBBeforeWarning=null==ie().global.screen?1024:ie().global.screen.height*ie().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o(this,Jc())}nextDataId(){return _R.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((ie().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||ie().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:oN.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,a){if(ie().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:oN.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:a,slice:s,shape:o,isPacked:i}=t;if(null!=s){let t;t=i?new nS(o,tS):new QN(o,tS);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Vr.now()),"complex64"===r){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);c=zl.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Vr.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:s,complexTensorInfos:o,isPacked:i}=t;if(null!=a){let t;t=i?new nS(r,tS):new QN(r,tS);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:s}],s),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(ie().getBool("DEBUG")&&!ie().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===ie().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==s&&ie().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...uN(r))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];u=zl.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=Vr.sizeFromShape(r);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;hN(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,u),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Jc().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:a,slice:s,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=s){let n;n=i?new nS(a,tS):new QN(a,tS);const r=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:o}],o),s=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),s}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=Jc().makeTensorFromDataId(u.dataId,u.shape,u.dtype),p=this.texData.get(u.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Vr.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return zi(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!dN(n)){if(ie().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=Vr.sizeFromShape(t);if(ie().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...uN(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const s=ie().getBool("WEBGL_PACK")&&!0===r,o=s?EN(t):t,i=s?new uR(o):new lR(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=Vr.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),s=Vr.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=Vr.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:s[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Vr.now(),endMs:null}}endTimer(e){return ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Vr.now(),e)}async getQueryTime(e){if(ie().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=RR){return ie().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Vr.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){zl.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return CR(e.shape,t)}packedUnaryOp(e,t,n){const r=new nS(e.shape,t),a=this.compileAndRun(r,[e],n);return Jc().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=zS(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(ie().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,eS,e.dtype);const t=new QN(e.shape,eS),n=this.compileAndRun(t,[e]);return Jc().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Vr.isString(n[0])){const a=n.map((e=>Vr.encodeString(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return Jc().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new $R(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new NR(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[IN(e.shape),...TN(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[IN(t),...TN(t)],s=new nI(a,n),o=[n],i=this.runWebGLProgram(s,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:a,dtype:s}=n;if(null!=t){const e=Vr.sizeFromShape(a),n=t[0]*t[1]*4;Vr.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const o=EN(a);let i;i=r?new iR(o):new oR(o);const l=[null!=t?t:uN(o)];return{dtype:s,shape:a,dataId:this.runWebGLProgram(i,[{shape:o,dtype:s,dataId:e}],s,l,!0,t).dataId}}runWebGLProgram(e,t,n,r,a=!1,s){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===sN.DENSE){const t=null!=s?s:uN(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===Vr.sizeFromShape(o.shape))return i.values=Vr.getTypedArrayFromDType(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Vr.sizeFromShape(t.shape)<=ie().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!CN(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const s=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=Qv(e.packedInputs,t.shape,s);let u="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=Vr.computeStrides(i);p=`${e[0]===s[1]}_${e[e.length-1]===s[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&Vr.arraysEqual(t.shape,s),f=1===Vr.sizeFromShape(t.shape),m=zl.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&Vr.arraysEqual(s,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${s[0]>1}_${s[1]>1}`;r+=`${h}_${g}_${o?l:""}_${i.length}_${f}_${m}_${d}_${u}_${c}_${p}_${y}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${a}`}}));const a=e.userCode;let s=e.constructor.name;return s+="_"+r+"_"+a+`${ie().getNumber("WEBGL_VERSION")}`,s}(e,u,c),h=this.getAndSaveBinary(p,(()=>function(e,t,n,r){const a=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),s=a.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=Wv(a,o,t),l=mN(e.gl,i),u=e.createProgram(l);let c=null;const p=e.getUniformLocation(u,"NAN",!1);1===ie().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const h=!1,d={},f={},m={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n];d[r]=e.getUniformLocation(u,r,h),d[`offset${r}`]=e.getUniformLocation(u,`offset${r}`,h),t.enableShapeUniforms&&(f[`${r}Shape`]=e.getUniformLocation(u,`${r}Shape`,h),m[`${r}TexShape`]=e.getUniformLocation(u,`${r}TexShape`,h))}let g,y,b;t.enableShapeUniforms&&(g=e.getUniformLocation(u,"outShape",h),b=e.getUniformLocation(u,"outShapeStrides",h),y=e.getUniformLocation(u,"outTexShape",h));const x=[];return t.customUniforms&&t.customUniforms.forEach(((t,n)=>{x[n]=e.getUniformLocation(u,t.name,h)})),{program:t,fragmentShader:l,source:i,webGLProgram:u,uniformLocations:d,customUniformLocations:x,inShapeInfos:s,outShapeInfo:o,infLoc:c,nanLoc:p,inShapesLocations:f,inTexShapesLocations:m,outShapeLocation:g,outShapeStridesLocation:b,outTexShapeLocation:y}}(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),function(e,t,n,r,a){t.program.enableShapeUniforms||(LN(t.inShapeInfos,n),LN([t.outShapeInfo],[r]));const s=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(s.texture,o[0],o[1]):e.setOutputMatrixTexture(s.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===ie().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const a=t.program.variableNames[r],s=t.uniformLocations[a],o=t.uniformLocations[`offset${a}`],i=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(i){const{uniformShape:r}=Qv(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(i,new Int32Array(r));break;case 2:e.gl.uniform2iv(i,new Int32Array(r));break;case 3:e.gl.uniform3iv(i,new Int32Array(r));break;case 4:e.gl.uniform4iv(i,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=s)if(n.isUniform)if(Vr.sizeFromShape(n.shape)<2)e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,s,r)}));const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=Vr.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach(((n,r)=>{const s=t.customUniformLocations[r],o=a[r];if("float"===n.type)e.gl.uniform1fv(s,o);else if("vec2"===n.type)e.gl.uniform2fv(s,o);else if("vec3"===n.type)e.gl.uniform3fv(s,o);else if("vec4"===n.type)e.gl.uniform4fv(s,o);else if("int"===n.type)e.gl.uniform1iv(s,o);else if("ivec2"===n.type)e.gl.uniform2iv(s,o);else if("ivec3"===n.type)e.gl.uniform3iv(s,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,o)}})),e.executeProgram()}(this.gpgpu,h,u,c,r),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=ie().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Vr.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!ie().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,a=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!ie().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ep((()=>{if(!ie().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=ie().getBool("DEBUG");ie().set("DEBUG",!1);const t=this.abs(yp(1e-8)).dataSync()[0];if(ie().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:s,usage:o,isPacked:i}=t;if(null!=s)return;const l=null!=this.activeTimers;let u;l&&(u=Vr.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=ie().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Vr.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Vr.squeezeShape(e);e=t.newShape}let r=Vr.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=IN(e);let n=2,a=2;return e.length&&([n,a]=TN(e)),r=t*(n/2)*(a/2),Vr.sizeToSquarishShape(r).map((e=>2*e))}return Vr.sizeToSquarishShape(r)}(n,i),t.texShape=c),null!=a){const e=EN(n);let s,o=c[1],p=c[0];const h=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!i&&h||([o,p]=cN(c[0],c[1])),s=i?new pR(e,h):new cR(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?oN.PIXELS:oN.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,a);const g=[[p,o]],y=!0,b=this.runWebGLProgram(s,[f],r,g,y),x=this.texData.get(b.dataId);t.texture=x.texture,t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(b.dataId),t.values=null,l&&(this.uploadWaitMs+=Vr.now()-u)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Vr.bytesPerElement(t)}}_R.nextDataId=0;bs.isBrowser()&&rp("webgl",(()=>new _R),2);let DR;function FR(){return null==DR&&(DR=gs.backend.epsilon()),DR}class OR extends Error{constructor(e){super(e),Object.setPrototypeOf(this,OR.prototype)}}class MR extends Error{constructor(e){super(e),Object.setPrototypeOf(this,MR.prototype)}}class LR extends Error{constructor(e){super(e),Object.setPrototypeOf(this,LR.prototype)}}class zR extends Error{constructor(e){super(e),Object.setPrototypeOf(this,zR.prototype)}}class BR extends Error{constructor(e){super(e),Object.setPrototypeOf(this,BR.prototype)}}Error;function PR(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function VR(e,t){if(!e)throw new BR(t)}function WR(e,t){let n=0;for(const r of e)r===t&&n++;return n}function UR(e){return 1===e.length?e[0]:e}function GR(e){return Array.isArray(e)?e:[e]}function HR(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function jR(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let qR={};function KR(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function XR(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>XR(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?XR(t):e[n]=t.value)}}}function YR(e,t={},n={},r="object",a=!1){if("string"==typeof e){const a=e;let s;if(a in n)s=n[a];else if(a in qR)s=qR[a];else if(s=t[a],null==s)throw new LR(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return s}{const s=e;if(null==s.className||null==s.config)throw new LR(`${r}: Improper config format: ${JSON.stringify(s)}.\n'className' and 'config' must set.`);const o=s.className;let i,l;if(o in n?[i,l]=n[o]:o in qR?[i,l]=qR.className:o in t&&([i,l]=t[o]),null==i)throw new LR(`Unknown ${r}: ${o}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(qR))e[t]=qR[t];for(const t of Object.keys(n))e[t]=n[t];s.config.customObjects=e;const t=Object.assign({},qR);for(const e of Object.keys(n))qR[e]=n[e];XR(s.config);const r=l(i,s.config,n,a);return qR=Object.assign({},t),r}{const e=Object.assign({},qR);for(const e of Object.keys(n))qR[e]=n[e];const t=new i(s.config);return qR=Object.assign({},e),t}}}function ZR(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function JR(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function QR(e){if(null==e)throw new LR(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function e_(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new LR(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function t_(e,t,n=0,r=1/0){return VR(n>=0),VR(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function n_(e,t){Array.isArray(e)?(Vr.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>n_(e,`element ${n+1} of ${t}`)))):Vr.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${r_(e)}.`))}function r_(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>r_(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function a_(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function s_(e,t){return ep((()=>bh(Cu(vu(e,e),t,!0))))}class o_ extends Fl.Serializable{getConfig(){return{}}}class i_ extends o_{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ep((()=>{const t=s_(e,this.axis),n=od(t,0,this.maxValue);return vu(e,th(n,wp(FR(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}i_.className="MaxNorm",Fl.registerClass(i_);class l_ extends o_{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ep((()=>th(e,wp(FR(),s_(e,this.axis)))))}getConfig(){return{axis:this.axis}}}l_.className="UnitNorm",Fl.registerClass(l_);class u_ extends o_{apply(e){return Su(e)}}u_.className="NonNeg",Fl.registerClass(u_);class c_ extends o_{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ep((()=>{const t=s_(e,this.axis),n=wp(vu(this.rate,od(t,this.minValue,this.maxValue)),vu(1-this.rate,t));return vu(e,th(n,wp(FR(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}c_.className="MinMaxNorm",Fl.registerClass(c_);const p_={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function h_(e){return KR(e)}function d_(e,t={}){return YR(e,Fl.SerializationMap.getMap().classNameMap,t,"constraint")}function f_(e){if(null==e)return null;if("string"==typeof e){return d_({className:e in p_?p_[e]:e,config:{}})}return e instanceof o_?e:d_(e)}const m_=["channelsFirst","channelsLast"],g_=["nearest","bilinear"],y_=["valid","same","causal"],b_=["max","avg"],x_=["sum","mul","concat","ave"],w_=new Map;function k_(e){e_(m_,"DataFormat",e)}function v_(e){e_(y_,"PaddingMode",e)}function N_(e){e_(b_,"PoolMode",e)}const S_=[];function I_(e,t){S_.push(e);try{const e=t();return S_.pop(),e}catch(e){throw S_.pop(),e}}function T_(e){if(!C_(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===S_.length?"":S_.join("/")+"/")+e}function E_(e){if(!C_(e))throw new Error("Not a valid tensor name: '"+e+"'");w_.has(e)||w_.set(e,0);const t=w_.get(e);if(w_.set(e,w_.get(e)+1),t>0){const n=`${e}_${t}`;return w_.set(n,1),n}return e}const $_=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function C_(e){return!!e.match($_)}function A_(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let a=t;a<n;++a)r*=e[a];return r}function R_(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function __(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function D_(e,t){if(t<e)throw new LR(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function F_(e,t){return Bi(e,t)}function O_(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Tu(e,n)}function M_(e,t,n){return ep((()=>{switch(e.rank){case 1:return df(e,t,n);case 2:return ff(e,[t,0],[n,e.shape[1]]);case 3:return mf(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return gf(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return up(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return up(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new LR(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function L_(e,t,n){return ep((()=>{switch(e.rank){case 1:return df(e,t,n);case 2:return ff(e,[0,t],[e.shape[0],n]);case 3:return mf(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return gf(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new LR(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function z_(e,t,n,r){return ep((()=>{switch(e.rank){case 1:return df(e,t,n);case 2:switch(r){case 1:return M_(e,t,n);case 2:return L_(e,t,n);default:throw new LR(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return M_(e,t,n);case 2:return mf(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return L_(e,t,n);default:throw new LR(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return M_(e,t,n);case 2:return gf(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return gf(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return L_(e,t,n);default:throw new LR(`The axis is not within the rank of the tensor ${r}`)}default:throw new LR(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function B_(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),op(e,t)}function P_(e,t){switch(e.rank){case 1:return id([e,t]);case 2:return ld([e,t],0);case 3:return ud([e,t],0);case 4:return cd([e,t],0);default:throw new LR(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function V_(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new LR(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Bp(e,t)}function W_(e,t=0,n=1,r,a){return rf(e,t,n,r,a)}function U_(e,t,n,r){if(e.rank<2||t.rank<2)throw new zR(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new zR(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const a=!1,s=!1;return xp.matMul({a:e,b:t,transposeA:a,transposeB:s,bias:r?j_(e.rank,r,"channelsLast"):null,activation:n})}{const a=e.shape.slice(),s=a.pop();e=Tu(e,[-1,s]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Tu(Eh(t,c),[l,-1]);const p=[...a,...u],h=!1,d=!1;return Tu(xp.matMul({a:e,b:t,transposeA:h,transposeB:d,bias:r?j_(e.rank,r,"channelsLast"):null,activation:n}),p)}}function G_(e,t,n){return ep((()=>(t=Array.isArray(t)?Rp(t,"int32"):Bi(t,"int32"),Td(e,t,n))))}function H_(e){return vu(e,e)}function j_(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new LR(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?Tu(t,[1,r[0],1,1,1]):Tu(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?Tu(t,[1,1,1,1,r[0]]):Tu(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?Tu(t,[1,r[0],1,1]):Tu(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?Tu(t,[1,1,1,r[0]]):Tu(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?Tu(t,[1,r[0],1]):Tu(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?Tu(t,[1,1,r[0]]):Tu(t,[1].concat(r))}else if(e<3)return t;throw new LR(`Unsupported input rank by biasAdd: ${t.rank}`)}function q_(e,t,n){return ep((()=>(null==n&&(n="channelsLast"),k_(n),wp(e,j_(e.rank,t,n)))))}function K_(e,t,n,r){return ep((()=>If(e,t,n,r)))}function X_(e,t,n=!1){return n?e():t()}const Y_=["fanIn","fanOut","fanAvg"],Z_=["normal","uniform","truncatedNormal"];class J_ extends Fl.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Q_ extends J_{apply(e,t){return pp(e,t)}}Q_.className="Zeros",Fl.registerClass(Q_);class eD extends J_{apply(e,t){return Dh(e,t)}}eD.className="Ones",Fl.registerClass(eD);class tD extends J_{constructor(e){if(super(),"object"!=typeof e)throw new LR(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new LR(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return ep((()=>vu(yp(this.value),Dh(e,t))))}getConfig(){return{value:this.value}}}tD.className="Constant",Fl.registerClass(tD);class nD extends J_{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return af(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}nD.className="RandomUniform",Fl.registerClass(nD);class rD extends J_{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new zR(`randomNormal does not support dType ${t}.`);return W_(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}rD.className="RandomNormal",Fl.registerClass(rD);class aD extends J_{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new zR(`truncatedNormal does not support dType ${t}.`);return Nf(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}aD.className="TruncatedNormal",Fl.registerClass(aD);class sD extends J_{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return ep((()=>{if(2!==e.length||e[0]!==e[1])throw new LR("Identity matrix initializer can only be used for 2D square matrices.");return vu(this.gain,Ih(e[0]))}))}getConfig(){return{gain:this.gain}}}sD.className="Identity",Fl.registerClass(sD);class oD extends J_{constructor(e){if(super(),e.scale<0)throw new LR(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,e_(Y_,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){e_(Z_,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(k_(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=A_(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=A_(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=A_(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],a=n[1];let s=this.scale;if("fanIn"===this.mode?s/=Math.max(1,r):"fanOut"===this.mode?s/=Math.max(1,a):s/=Math.max(1,(r+a)/2),"normal"===this.distribution){const n=Math.sqrt(s);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new zR(`${this.getClassName()} does not support dType ${t}.`);return Nf(e,0,n,t,this.seed)}{const n=Math.sqrt(3*s);return af(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}oD.className="VarianceScaling",Fl.registerClass(oD);class iD extends oD{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return oD.className}}iD.className="GlorotUniform",Fl.registerClass(iD);class lD extends oD{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return oD.className}}lD.className="GlorotNormal",Fl.registerClass(lD);class uD extends oD{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return oD.className}}uD.className="HeNormal",Fl.registerClass(uD);class cD extends oD{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return oD.className}}cD.className="HeUniform",Fl.registerClass(cD);class pD extends oD{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return oD.className}}pD.className="LeCunNormal",Fl.registerClass(pD);class hD extends oD{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return oD.className}}hD.className="LeCunNormal",Fl.registerClass(hD);class dD extends J_{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new zR("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return ep((()=>{if(e.length<2)throw new zR("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=W_(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Ef.gramSchmidt(t);return e[0]>e[1]&&(n=Eh(n)),vu(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}dD.className="Orthogonal",Fl.registerClass(dD);const fD={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function mD(e,t={}){return YR(e,Fl.SerializationMap.getMap().classNameMap,t,"initializer")}function gD(e){return KR(e)}function yD(e){if("string"==typeof e){const t=e in fD?fD[e]:e;if("GlorotNormal"===t)return new lD;if("GlorotUniform"===t)return new iD;if("HeNormal"===t)return new uD;if("HeUniform"===t)return new cD;if("LeCunNormal"===t)return new pD;if("LeCunUniform"===t)return new hD;{const e={};return e.className=t,e.config={},mD(e)}}return e instanceof J_?e:mD(e)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let bD=0;function xD(){return bD++}const wD={};function kD(e=""){return e in wD||(wD[e]=0),wD[e]+=1,e+wD[e].toString()}function vD(e){return Array.isArray(e)&&Array.isArray(e[0])}function ND(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function SD(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new LR(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function ID(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new LR(`Expected exactly 1 Shape; got ${e.length}`)}return e}function TD(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const ED="Variable";class $D{constructor(e,t="float32",n="Variable",r=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=xD(),n=null==n?ED:n,this.originalName=T_(n),this.name=E_(this.originalName),this.trainable_=r,this.constraint=a,this.val=function(e,t=!0,n,r){return gs.makeVariable(e,t,n,r)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function CD(e){return e.map((e=>e.read()))}function AD(e){e.forEach((e=>{e[0].write(e[1])}))}class RD{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class _D{constructor(e,t,n,r,a,s,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=a,this.outputTensorIndex=o,this.id=xD(),null!=s&&(this.originalName=T_(s),this.name=E_(this.originalName)),this.rank=t.length}}let DD=0;class FD{constructor(e,t){this.callArgs=t,this.id=DD++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let OD=0;class MD extends Fl.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=OD++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=HR(e)+"_"+kD(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new MR(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new LR(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return UR(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return UR(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new OR(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new OR(`Layer ${this.name} is not connected, no input to return.`);return UR(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new OR(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new OR(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return UR(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=GR(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=GR(this.inputSpec);if(e.length!==t.length)throw new LR(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],a=t[n];if(null==a)continue;const s=r.rank;if(null!=a.ndim&&s!==a.ndim)throw new LR(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${s}`);if(null!=a.maxNDim&&s>a.maxNDim)throw new LR(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${s}`);if(null!=a.minNDim&&s<a.minNDim)throw new LR(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${s}.`);if(null!=a.dtype&&r.dtype!==a.dtype)throw new LR(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${r.dtype}.`);if(a.axes){const e=r.shape;for(const t in a.axes){const r=Number(t),s=a.axes[t],o=r>=0?e[r]:e[e.length+r];if(null!=s&&-1===[s,null].indexOf(o))throw new LR(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${s} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){const t=a.shape[e],s=r.shape[e];if(null!=t&&null!=s&&t!==s)throw new LR(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=GR(e);let r=!0;for(const e of n)if(!(e instanceof _D)){r=!1;break}let a=!0;for(const e of n)if(e instanceof _D){a=!1;break}if(r===a)throw new LR("Arguments to apply() must be all SymbolicTensors or all Tensors");return I_(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of GR(e))t.push(n.shape);this.build(UR(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let r=this.call(e,t);const a=GR(r),s=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),s.push(e);if(r=UR(s),null!=this.activityRegularizer)throw new zR("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=GR(e);const t=[];for(const n of e)t.push(n.shape);return UR(t)}(e),r=this.computeOutputShape(n);let a;const s="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new _D(s,n,this,GR(e),t,this.name,r))):new _D(s,r,this,GR(e),t,this.name),this.addInboundNode(e,a,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new zR("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new OR(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new OR(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new MR(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return TD(this.weights)}build(e){this.built=!0}getWeights(e=!1){return CD(e?this.trainableWeights:this.weights)}setWeights(e){ep((()=>{const t=this.weights;if(t.length!==e.length)throw new LR(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=CD(t);for(let a=0;a<r.length;++a){const s=r[a],o=t[a],i=e[a];if(!Vr.arraysEqual(s.shape,i.shape))throw new LR(`Layer weight shape ${s.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}AD(n)}))}addWeight(e,t,n,r,a,s,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new LR(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=i?i():yD("zeros"));const l=r.apply(t,n),u=new $D(l,n,e,s,o);return l.dispose(),null!=a&&this.addLoss((()=>a.apply(u.read()))),null==s&&(s=!0),s?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=GR(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,a,s,o=null){const i=GR(e);t=GR(t),n=GR(n),r=GR(r),a=ND(a),s=ND(s);const l=[],u=[],c=[];for(const e of i)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new FD({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:a,outputShapes:s},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function LD(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=LD(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class zD extends MD{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:kD("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new LR("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new LR("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new LR("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new _D(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new FD({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new LR(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function BD(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new LR("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new zD({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function PD(e){if(null==e)return;const t=[],n=[],r=[];for(const a in e){const s=e[a];if("number"!=typeof s){const e=s;t.push(e.data()),n.push(a),r.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];tp(r)}}function VD(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var WD;zD.className="InputLayer",Fl.registerClass(zD),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(WD||(WD={}));class UD{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class GD{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class HD extends UD{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const a=ep((()=>wp(this.totals[e],vu(r,n))));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:ep((()=>{const n=vu(th(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),np(t[e])})))}}class jD extends UD{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const a=this.history[r];for(let s=0;s<a.length;++s)if("number"!=typeof a[s]){const o=a[s];e.push(o.data()),t.push(r),n.push(s)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class qD extends UD{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Bf,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Vr.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,a=null!=n?n():Vr.now();return(...s)=>{const o=null!=n?n():Vr.now();return o-a<t||(a=o,r=e(...s)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await PD(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await PD(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await PD(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await PD(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await PD(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Vr.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await PD(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await PD(e),await this.trainEnd(e))}}function KD(e,t){if(null==e&&(e={}),e instanceof UD)return[e];if(Array.isArray(e)&&e[0]instanceof UD)return e;return GR(e).map((e=>new qD(e,t)))}class XD{constructor(){}static registerCallbackConstructor(e,t){Vr.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),XD.checkForDuplicate(t),null==XD.constructors[e]&&(XD.constructors[e]=[]),XD.constructors[e].push(t)}static checkForDuplicate(e){for(const t in XD.constructors){XD.constructors[+t].forEach((t=>{if(t===e)throw new LR("Duplicate callback constructor.")}))}}static clear(){XD.constructors={}}static createCallbacks(e){const t=[];for(const n in XD.constructors){const r=+n;e>=r&&t.push(...XD.constructors[r])}return t.map((e=>new e))}}function YD(e,t,n,r,a,s,o,i,l){const u=new jD,c=[new HD,...XD.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const p=new GD(c);return p.setParams({epochs:n,initialEpoch:r,samples:a,steps:s,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:p,history:u}}function ZD(e,t={},n=!1){return YR(e,Fl.SerializationMap.getMap().classNameMap,t,"layer",n)}function JD(e,t){return ep((()=>{"float32"!==e.dtype&&(e=Bi(e,"float32"));const n=Cu(H_(e),t,!0),r=Fp(n.shape,FR()),a=bh(Bd(n,r));return th(e,a)}))}function QD(e,t){return ep((()=>Rh(H_(nh(t,e)),-1)))}function eF(e,t){return ep((()=>Rh(fh(nh(t,e)),-1)))}function tF(e,t){return ep((()=>{const n=nh(e,t),r=od(fh(e),FR(),Number.MAX_VALUE),a=fh(th(n,r));return vu(100,Rh(a,-1))}))}function nF(e,t){return ep((()=>{const n=od(t,FR(),Number.MAX_VALUE),r=Mh(wp(1,n)),a=od(e,FR(),Number.MAX_VALUE),s=Mh(wp(1,a));return Rh(H_(nh(r,s)),-1)}))}function rF(e,t,n=!1){return ep((()=>{if(n)t=yf(t);else{const e=Cu(t,t.shape.length-1,!0);t=th(t,e)}return t=od(t,FR(),1-FR()),Th(Cu(vu(Bi(e,"float32"),Mh(t)),t.shape.length-1))}))}function aF(e,t,n=!1){return ep((()=>{const r=Bi(Id(function(e){const t=[A_(e.shape)];return Tu(e,t)}(e)),"int32"),a=(t=od(t,FR(),1-FR())).shape;return rF(Tu(Ud(r,a[a.length-1]),a),t,n)}))}function sF(e,t){return ep((()=>{let n;return n=od(t,FR(),1-FR()),n=Mh(th(n,nh(1,n))),Rh(function(e,t){if(!Vr.arraysEqual(e.shape,t.shape))throw new LR(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return ep((()=>{const n=Su(t),r=Th(fh(t));return wp(nh(n,vu(t,e)),Bh(zh(r)))}))}(e,n),-1)}))}function oF(e,t){return ep((()=>{const n=od(e,FR(),1),r=od(t,FR(),1);return Cu(vu(e,Mh(th(n,r))),-1)}))}function iF(e,t){return ep((()=>{const n=JD(e,-1),r=JD(t,-1),a=vu(n,r);return Th(Cu(a,-1))}))}XD.constructors={};const lF={meanSquaredError:QD,meanAbsoluteError:eF,meanAbsolutePercentageError:tF,meanSquaredLogarithmicError:nF,squaredHinge:function(e,t){return ep((()=>{const n=Bd(0,nh(1,vu(e,t)));return Rh(H_(n),-1)}))},hinge:function(e,t){return ep((()=>{const n=Bd(0,nh(1,vu(e,t)));return Rh(n,-1)}))},categoricalHinge:function(e,t){return ep((()=>{const n=Cu(vu(e,t),-1),r=mh(vu(nh(1,e),t),-1);return Bd(0,wp(1,nh(r,n)))}))},logcosh:function(e,t){return ep((()=>{const n=Math.log(2),r=nh(t,e),a=nh(wp(r,_d(vu(-2,r))),n);return Rh(a,-1)}))},categoricalCrossentropy:rF,sparseCategoricalCrossentropy:aF,binaryCrossentropy:sF,kullbackLeiblerDivergence:oF,poisson:function(e,t){return ep((()=>{const n=Mh(wp(FR(),t));return Rh(nh(t,vu(e,n)),-1)}))},cosineProximity:iF};function uF(e){if("string"==typeof e){if(e in lF)return lF[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new LR(t)}return e}function cF(e,t){return ep((()=>{const n=vu(.5,Gd(t)),r=F_(Qp(t,n),e.dtype);return Rh(kd(e,r),-1)}))}function pF(e,t){return ep((()=>F_(kd(Hh(e,-1),Hh(t,-1)),"float32")))}function hF(e,t){return ep((()=>Bi(Cu(ch(kd(e,1),kd(t,1))),"float32")))}function dF(e,t){return ep((()=>{const n=hF(e,t),r=function(e,t){return ep((()=>Bi(Cu(ch(kd(e,0),kd(t,1))),"float32")))}(e,t),a=wp(n,r);return Bi(sh(Qp(a,0),th(n,a),0),"float32")}))}function fF(e,t){return sF(e,t)}function mF(e,t){return e.rank===t.rank&&(e=vh(e,[e.rank-1])),(t=Hh(t,-1)).dtype!==e.dtype&&(t=Bi(t,e.dtype)),Bi(kd(e,t),"float32")}const gF=rF,yF=aF,bF={binaryAccuracy:cF,categoricalAccuracy:pF,precision:dF,categoricalCrossentropy:gF,sparseCategoricalCrossentropy:yF,mse:QD,MSE:QD,mae:eF,MAE:eF,mape:tF,MAPE:tF,cosine:iF};function xF(e){if("string"==typeof e&&e in bF)return bF[e];if("string"!=typeof e&&null!=e)return e;throw new LR(`Unknown metric ${e}`)}function wF(e){if(VR(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(lF))if(lF[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(bF))if(bF[n]===e){t=n;break}return void 0!==t?t:e.name}}const kF=1048576;function vF(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!NF(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>kF&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function NF(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!NF(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!NF(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function SF(e,t,n,r=console.log){const a=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==r.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),s=["Layer (type)","Output shape","Param #"];let o;if(a?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!a){s.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}r("_".repeat(t)),IF(s,n,r),r("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)a?TF(i[e],n,r):EF(i[e],n,o,r),r((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?TD(e.collectedTrainableWeights):TD(e.trainableWeights);return t}(e),u=TD(e.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r("_".repeat(t))}function IF(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function TF(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}IF([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function EF(e,t,n,r){let a;try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const s=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],a=t.tensorIndices[e];s.push(`${n}[${r}][${a}]`)}const o=e.name,i=e.getClassName(),l=0===s.length?"":s[0];IF([`${o} (${i})`,a,e.countParams().toString(),l],t,r);for(let e=1;e<s.length;++e)IF(["","","",s[e]],t,r)}function $F(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function CF(e,t){if(null===e)return null;if("string"==typeof e)return jR(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let a=0;a<r;++a){const r=e[a];$F(t,a,r)?n.push(r):n.push(CF(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=jR(n);t[e]=CF(r,e)}}return t}}function AF(e,t){if(null==e)return null;if("string"==typeof e)return HR(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let a=0;a<r;++a){const r=e[a];$F(t,a,r)?n.push(r):n.push(AF(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],a=HR(n);t[a]="name"!==n&&"className"!==n||"string"!=typeof r?AF(r,n):r}return t}}
/** @license See the LICENSE file. */class RF{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof RF)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new LR(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Bi(t,e.dtype)}catch(n){throw new LR(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof _D){if(null==this.id2Value[e.id])throw new LR(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new LR(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof _D){if(null==this.id2Value[e.id])throw new LR(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new LR(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&tp(this.id2Mask)}}const _F={},DF={};function FF(e,t,n,r){const a=null!=n&&n.training,s=Array.isArray(e),o=s?e:[e],i=o.map((e=>e.name)),l=[],u=t.names();for(const e of i)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().join(",");let p,h;if(null==_F[c]){const e=function(e,t){Vr.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const a=MF(e[0],t);n=a.sorted,r=a.recipientMap}else{const a=new Set;for(const s of e){const{sorted:e,recipientMap:o}=MF(s,t);for(const t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(const e in o)null==r[e]&&(r[e]=new Set),o[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:OF(r)}}(o,t);p=e.sorted,h=e.recipientCounts,_F[c]=p,DF[c]=h}p=_F[c],h={},a||Object.assign(h,DF[c]);const d=new RF(t);for(let e=0;e<p.length;++e){if(null!=r){const e=Qc().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const s=p[e],o=s.sourceLayer;if(o instanceof zD)continue;const u=[],c=[],f=[];let m=!1;for(const e of s.inputs){const n=d.getValue(e),r=d.getMask(e);u.push(n),c.push(r),null!=r&&(m=!0),a||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=GR(o.apply(u,n));let y=null;o.supportsMasking&&(y=o.computeMask(u,c));const b=LF(s),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}a||tp(f)}return d.disposeMasks(),s?l:l[0]}function OF(e){const t={};for(const n in e)t[n]=e[n].size;return t}function MF(e,t){const n=new Set,r=[],a={};for(const e of t.names())n.add(e);const s=[],o=[];for(s.push(e);s.length>0;){const e=s[s.length-1];if(n.has(e.name)){s.pop();continue}const t=o[o.length-1]===s.length-1;if(0===e.inputs.length||t)s.pop(),r.push(e),n.add(e.name),t&&o.pop();else{o.push(s.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||s.push(t)}}return{sorted:r,recipientMap:a}}function LF(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class zF extends MD{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=kD(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],JR(this.inputs).length!==this.inputs.length)throw new LR(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);JR(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;VR(0===n,"input layer has >1 nodes"),VR(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof zD))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},a={},s={},o=[],i=(e,t,n,r,a,l)=>{null!=r&&null!=a&&null!=l||(r=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=r.inboundNodes[a];if(-1!==n.indexOf(u))throw new MR(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(zF.nodeKey(r,a)),r.id in s||(s[r.id]=Object.keys(s).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const r=u.inputTensors[e],a=u.inboundLayers[e],s=u.nodeIndices[e],o=u.tensorIndices[e];i(r,t,n,a,s,o)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);o.push(u)},l=[],u=[];for(const e of this.outputs)i(e,l,u);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let s=t[e.id];const o=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];s=Math.max(s,o),r[e.outboundLayer.id]=s,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=s;for(let r=0;r<e.inboundLayers.length;r++){const a=e.inboundLayers[r],o=e.nodeIndices[r],i=a.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(s+1,l),n[i.id]=i}}const p={};for(const e in t){const r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}const h={};for(const e in r){const t=r[e];t in h||(h[t]=[]),h[t].push(a[e])}let d=Object.keys(h).map((e=>parseInt(e,10))).sort(ZR);this.layers=[];for(const e of d){const t=h[e];t.sort(((e,t)=>{const n=s[e.id],r=s[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof zF&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,d=Object.keys(p).map((e=>parseInt(e,10))).sort(ZR);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of p[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new MR(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new MR(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new FD({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new LR("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new LR(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const a=[];for(const r in e){let s=r;if(null==n[r]){const e=r.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])a.push([n[s],e[r]]);else if(t)throw new LR(`Provided weight data has no target variable: ${r}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new LR(`${e.length} of ${r} weights are not set: ${e}`)}AD(a)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.13.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=AF(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return ep((()=>{e=GR(e);const n=new RF;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return FF(this.outputs,n,t)}))}computeMask(e,t){return ep((()=>{let n;return e=GR(e),n=null==t?PR(null,e.length):GR(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=ND(e);if(t.length!==this.inputLayers.length)throw new LR(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],a=t[e];n[r.name+"_0_0"]=a}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(ZR);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],s=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${a.name}_${s}_${o}`];r.push(i)}const a=ND(t.computeOutputShape(UR(r))),s=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++){n[`${t.name}_${s}_${e}`]=a[e]}}}const a=[],s=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${r}`;s.push(a)}for(let e=0;e<s.length;e++){const t=s[e];VR(t in n),a.push(n[t])}return UR(a)}runInternalGraph(e,t){null==t&&(t=PR(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const a=this.inputs[r],s=e[r],o=t[r];n[a.id]=[s,o]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(ZR);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,a=e.outputTensors,s=new Array;for(const e of r)e.id in n&&s.push(n[e.id]);if(s.length===r.length){let r,o,i,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===s.length){const[e,n]=s[0];null==u.mask&&(u.mask=n),i=GR(t.call(e,u)),l=GR(t.computeMask(e,n)),r=[e],o=[n]}else r=s.map((e=>e[0])),o=s.map((e=>e[1])),null==u.mask&&(u.mask=o),i=GR(t.call(r,u)),l=GR(t.computeMask(r,o));if(t.activityRegularizer)throw new zR("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],r=i[e],s=l[e];n[t.id]=[r,s]}}}}const a=[],s=[],o=[];for(const e of this.outputs){VR(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];o.push(t.shape),a.push(t),s.push(r)}return[a,s,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof zF?1:0;for(let r=0;r<e.inboundNodes.length;r++){const a=zF.nodeKey(e,r);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new LR(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new LR("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new LR(`No such layer: ${e}`)}calculateLosses(){return ep((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=zF.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),a=e.getConfig(),s=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],a=zF.nodeKey(e,n);let o={};if(this.containerNodes.has(a)){if(r.callArgs)try{JSON.stringify(r.callArgs),o=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const a=r.inboundLayers[n],s=r.nodeIndices[n],i=r.tensorIndices[n];let l=t[zF.nodeKey(a,s)];null==l&&(l=0),e.push([a.name,l,i,o])}s.push(e)}}}const o={};o.name=e.name,o.className=r,o.config=a,o.inboundNodes=s,n.push(o)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],s=zF.nodeKey(n,a);if(!this.containerNodes.has(s))continue;let o=t[s];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];r.push([n.name,o,i])}e.inputLayers=r;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],s=zF.nodeKey(n,r);if(!this.containerNodes.has(s))continue;let o=t[s];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];a.push([n.name,o,i])}return e.outputLayers=a,e}static fromConfig(e,t,n={},r=!1){const a={},s={};function o(e,t){e.name in s?s[e.name].push(t):s[e.name]=[t]}function i(e,t){const n=[];let r;for(const s of t){const i=s[0],l=s[1],u=s[2];if(r=null==s[3]?{}:s[3],!(i in a))return void o(e,t);const c=a[i];if(c.inboundNodes.length<=l)return void o(e,t);const p=c.inboundNodes[l];n.push(p.outputTensors[u])}n.length>0&&e.apply(UR(n),r)}function l(e){const n=e.name,s=ZD(e,null!=t.customObjects?t.customObjects:{});s.setFastWeightInitDuringBuild(r),a[n]=s;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new LR(`Corrupted configuration, expected array for nodeData: ${e}`);o(s,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!QR(s);)for(const e of c){const t=a[e.name];if(t.name in s){const e=s[t.name];delete s[t.name];for(const n of e)i(t,n)}}const p=[],h=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];VR(t in a);const s=a[t].inboundNodes[n].outputTensors;p.push(s[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];VR(t in a);const s=a[t].inboundNodes[n].outputTensors;h.push(s[r])}return new e({inputs:p,outputs:h,name:u})}get stateful(){if(this._stateful)throw new LR("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){ep((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function BF(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function PF(e,t){return BF(e,t,"classWeight")}async function VF(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=ep((()=>{if(1===e.shape.length)return Pi(e);if(2===e.shape.length){if(e.shape[1]>1){return Hh(e,1)}if(1===e.shape[1])return Tu(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());tp(t);const a=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])})),Rp(a,"float32")}return null}function WF(e,t){return vu(e,t)}function UF(e,t){let n,r;const a=t;n=a.xs,r=a.ys,Vr.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const s=GF("input",e.inputNames,n),o=GF("output",e.outputNames,r),i=s[0].shape[0];Vr.assert(s.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Vr.assert(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<s.length;t++)Vr.assert(s[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${s[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)Vr.assert(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:s,ys:o}}function GF(e,t,n){if(n instanceof Ha)return[n];if(Array.isArray(n))return Vr.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const a of t){if(null==n[a])throw new LR(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);r.push(n[a])}return r}}async function HF(e,t,n){const r=null!=n.batchesPerEpoch;if(Vr.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Vr.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Vr.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Vr.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Vr.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let s,o;if(a)if(jF(n.validationData))Vr.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new zR("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);s=e.xs,o=e.ys}const i=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=a?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=KD(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:h,history:d}=YD(c,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,a,u);h.setModel(e),e.history=d,await h.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await h.onEpochBegin(f);let c=0,p=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:a}=UF(e,t.value),s={};s.batch=p,s.size=r[0].shape[0],await h.onBatchBegin(p,s);const o=[];if(null!=n.classWeight){const t=PF(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await VF(a[e],null,t[e]))}const u=r.concat(a).concat(o),d=i(u);tp(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];s[t]=n,np(n)}await h.onBatchEnd(p,s),VD(s),p++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(a){let t;t=jF(n.validationData)?GR(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):GR(e.evaluate(s,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await h.onEpochEnd(f,u),f++,e.stopTraining_)break}return await h.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function jF(e){return"function"==typeof e.iterator}function qF(e){Vr.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function KF(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>M_(e,t,n-t))):M_(e,t,n-t)}function XF(e,t){return ep((()=>null==e?null:Array.isArray(e)?e.map((e=>XF(e,t))):G_(e,"int32"===t.dtype?t:Bi(t,"int32"))))}function YF(e,t){const n=[];let r=0,a=null;for(;r<e;)a=r+t,a>=e&&(a=e),n.push([r,a]),r=a;return n}async function ZF(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,s,o,i,l,u,c,p,h;e.isTraining=!0;try{const d=null==r.batchSize?32:r.batchSize;qF(d);const f=!1,m=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,f,d);a=m[0],s=m[1],h=m[2];let g,y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2!==r.validationData.length)throw 3===r.validationData.length?new zR("validationData including sample weights is not supported yet."):new LR(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);l=r.validationData[0],u=r.validationData[1];const t=!0,n=await e.standardizeUserData(l,u,null,null,t,d);c=n[0],p=n[1],g=c.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;const e=Math.floor(a[0].shape[0]*(1-r.validationSplit)),t=a[0].shape[0];c=KF(a,e,t),o=a,a=KF(a,0,e),p=KF(s,e,t),i=s,s=KF(s,0,e),g=c.concat(p)}else null!=r.validationSteps&&(y=!0);const b=a.concat(s).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const N=KD(r.callbacks,r.yieldEvery),S=await async function(e,t,n,r,a,s,o,i,l,u,c,p,h,d,f){null==a&&(a=32),null==s&&(s=1),null==c&&(c=!0),null==h&&(h=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new LR("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,a,d,"steps_per_epoch");let y;null!=g&&(y=D_(0,g)),null==o&&(o=1);const{callbackList:b,history:x}=YD(i,o,s,h,g,d,a,m,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let o=h;o<s;++o){await b.onEpochBegin(o);const s={};if(null!=d)throw new zR("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new zR("batch shuffling is not implemneted yet");c&&Vr.shuffle(y);const o=Rp(y),i=YF(g,a);for(let c=0;c<i.length;++c){const p={};if(await b.onBatchBegin(c,p),ep((()=>{const h=i[c][0],d=i[c][1],f=M_(o,h,d-h);p.batch=c,p.size=d-h;const g=XF(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,np(n)}if(c===i.length-1&&m){const t=e.testLoop(l,u,a);for(let e=0;e<r.length;++e){const n=r[e],a=t[e];np(a),s["val_"+n]=a}}})),await b.onBatchEnd(c,p),VD(p),e.stopTraining_)break}o.dispose()}if(await b.onEpochEnd(o,s),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,r.epochs,r.verbose,N,k,g,r.shuffle,v,r.initialEpoch,null,null);return S}finally{e.isTraining=!1,QF(a,t),QF(s,n),QF(o,t),QF(i,n),QF(c,l),QF(p,u),null!=h&&tp(h)}}function JF(e){const t=[];e instanceof Ha&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(O_(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function QF(e,t){if(null==e)return;const n=[];if(t instanceof Ha)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof Ha)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const a=e[t];-1===n.indexOf(a.id)&&r.push(a)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function eO(e){return Array.isArray(e)}function tO(e){return!function(e){return e instanceof Ha}(e)&&!eO(e)}function nO(e,t,n,r=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(eO(e)&&e.length>0)t=!0;else if(tO(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new LR(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let s;if(tO(e)){s=[];for(const n of t){if(null==e[n])throw new LR(`No data provided for "${n}". Need data for each key in: ${t}`);s.push(e[n])}}else if(eO(e)){if(e.length!==t.length)throw new LR(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);s=e}else{if(t.length>1)throw new LR(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);s=[e]}if(s=JF(s),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=s[e];if(o.shape.length!==n[e].length)throw new LR(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;const s=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&s!==i)throw new LR(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return s}function rO(e,t,n,r=!0,a=""){let s;if(Array.isArray(e)){if(e.length!==t.length)throw new LR(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);s=e}else{if(t.length>1)throw new LR(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);s=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=s[e];if(o.shape.length!==n[e].length)throw new LR(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let s=0;s<n[e].length;++s){if(0===s&&!r)continue;const i=o.shape[s],l=n[e][s];if(null!=l&&l!==i)throw new LR(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class aO extends zF{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new LR("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");SF(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Lf.adagrad(.01),Adadelta:()=>Lf.adadelta(1,.95,FR()),Adam:()=>Lf.adam(.001,.9,.999,FR()),Adamax:()=>Lf.adamax(.002,.9,.999,FR(),0),RMSProp:()=>Lf.rmsprop(.001,.9,0,FR()),SGD:()=>Lf.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new LR(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof $f))throw new LR("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new LR(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>uF(e)))}else{const n=uF(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new LR(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(uF(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],I_("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};I_("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,s;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===sF?-1!==["accuracy","acc"].indexOf(o)?r=cF:-1!==["crossentropy","ce"].indexOf(o)&&(r=fF):this.lossFunctions[e]===aF?-1!==["accuracy","acc"].indexOf(o)?r=mF:-1!==["crossentropy","ce"].indexOf(o)&&(r=yF):-1!==["accuracy","acc"].indexOf(o)?r=pF:-1!==["crossentropy","ce"].indexOf(o)&&(r=gF),-1!==["accuracy","acc"].indexOf(o)?a="acc":-1!==["crossentropy","ce"].indexOf(o)&&(a="ce"),s=r,n=""+a}else{const e=xF(o);s=e,n=""+wF(o)}let t;I_(n,(()=>{t=s})),a(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;qF(r);const a=this.standardizeUserDataXY(e,t,!0,r);try{const s=a[0].concat(a[1]);this.makeTestFunction();const o=this.testFunction;return UR(this.testLoop(o,s,r,n.verbose,n.steps))}finally{QF(a[0],e),QF(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,a=e.testFunction;let s=[];if(n.verbose>0)throw new zR("Verbose mode is not implemented yet.");Vr.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,l=0;for(;!r||l<n.batches;){const t=await o.next();if(s=ep((()=>{if(t.value){const{xs:n,ys:r}=UF(e,t.value),o=n.concat(r),u=ep((()=>a(o)));if(tp(o),0===l)for(let e=0;e<u.length;++e)s.push(yp(0));const c=o[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=s[e];s[e]=ep((()=>wp(s[e],vu(c,t)))),l>0&&tp(n)}tp(u),i+=c,++l}return s})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<s.length;++e){const t=s[e];s[e]=th(s[e],i),tp(t)}return UR(s)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let a;if(null!=n){if(a=null,null!=t)throw new LR(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new LR(`Either the input data should have a defined shape, or ${r} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new LR("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],a=this.retrieveSymbolicTensors(r),s=new RF;if(e instanceof Ha&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new LR(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new LR(`No value is provided for the model's input ${t.name}`);s.add(t,n)}const o=FF(a,s);return n?o:o[0]}retrieveSymbolicTensors(e){const t=PR(null,e.length);let n=e.length;for(const r of this.layers){const a=Array.isArray(r.output)?r.output:[r.output],s=a.map((e=>e.name));for(let r=0;r<e.length;++r){const o=s.indexOf(e[r]);if(-1!==o&&(t[r]=a[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new LR(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return ep((()=>{const r=this.checkNumSamples(e);if(n)throw new zR("Verbose predictLoop() is not implemented yet.");const a=YF(r,t),s=this.outputs.map((e=>[]));for(let t=0;t<a.length;++t){ep((()=>{const n=a[t][0],r=a[t][1],s=KF(e,n,r),o=[];if(Array.isArray(s))for(let e=0;e<s.length;++e)o.push({key:this.inputs[e],value:s[e]});else o.push({key:this.inputs[0],value:s});const i=new RF(o);return FF(this.outputs,i)})).forEach(((e,t)=>s[t].push(e)))}return UR(s.map((e=>op(e,0))))}))}predict(e,t={}){const n=JF(e);rO(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return qF(r),this.predictLoop(n,r)}finally{QF(n,e)}}predictOnBatch(e){rO(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new MR("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===aF?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,t,n){const r=JR(e.map((e=>e.shape[0])));r.sort();const a=JR(t.map((e=>e.shape[0])));if(a.sort(),r.length>1)throw new LR(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new LR(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&a.length>0&&!Vr.arraysEqual(r,a))throw new LR(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=nO(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=nO(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const r=[QD,sF,rF];for(let a=0;a<e.length;++a){const s=e[a],o=t[a],i=n[a];if(null!=o){if(o===rF&&1===s.shape[s.shape.length-1])throw new LR(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(o)){const e=s.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const r=e[n],a=t[n];if(null!=a&&r!==a)throw new LR(`A target Tensor with shape ${s.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new LR(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,a=!0,s){const[o,i]=this.standardizeUserDataXY(e,t,a,s);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=PF(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await VF(i[t],null,e[t]))}return[o,i,l]}testLoop(e,t,n,r=0,a){return ep((()=>{const s=this.checkNumSamples(t,n,a,"steps"),o=[];if(r>0)throw new zR("Verbose mode is not implemented yet.");if(null!=a)throw new zR("steps mode in testLoop() is not implemented yet");{const r=YF(s,n),a=Rp(D_(0,s));for(let n=0;n<r.length;++n){const s=r[n][0],i=r[n][1],l=M_(a,s,i-s),u=XF(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)o.push(yp(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=wp(o[e],vu(i-s,t))}}for(let e=0;e<o.length;++e)o[e]=th(o[e],s)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let a=r;if(WR(e,r)>1){a+=`_${WR(e.slice(0,n),r)}`}t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),s=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new RF(e),i=FF(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],i[e]);null!=a[e]&&(n=WF(n,a[e]));const s=Rh(n);t.push(s),l=0===e?n:wp(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=Rh(t(r[a],i[a]))}np(n),s.push(n)}return l=Rh(l),this.calculateLosses().forEach((e=>{l=wp(l,e)})),l}),!0,o)].concat(s)}}makeTestFunction(){this.testFunction=e=>ep((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=[];for(let e=0;e<this.inputs.length;++e)s.push({key:this.inputs[e],value:r[e]});const o=new RF(s),i=FF(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],s=Rh(r(a[e],i[e]));n=0===e?s:wp(n,s),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],s=Rh(n(a[r],i[r]));t.push(s)}return t}))}async fit(e,t,n={}){return ZF(this,e,t,n)}async fitDataset(e,t){return HF(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],a=n[1],s=this.makeTrainFunction()(r.concat(a)),o=[];for(const e of s){const t=await e.data();o.push(t[0])}return tp(s),QF(n[0],e),QF(n[1],t),UR(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Qc().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Qc().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=HR(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>HR(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=HR(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[HR(wF(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>HR(wF(e))));{const e={};for(const t in this.metrics)e[t]=HR(wF(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=ZD(CF(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=jR(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>jR(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=jR(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>jR(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=jR(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Vi.getSaveHandlers(e);if(0===t.length)throw new LR(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new LR(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new LR("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Vi.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.13.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:a}=await Vi.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...a),n.data=Vi.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;vF(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){vF(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}aO.className="Model",Fl.registerClass(aO);class sO extends aO{}sO.className="Functional",Fl.registerClass(sO);class oO extends aO{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:kD("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new LR(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof oO||e instanceof aO;let n;if(t){if(n=e,1!==n.outputs.length)throw new LR("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new LR("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new LR("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=BD({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new LR(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new LR("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=LD(this.outputs[0])}this.inboundNodes=[],new FD({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:PR(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(ID(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new aO({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new MR("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new MR("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new MR("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new MR("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let a,s={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new LR("Legacy serialization format not supported yet.");a=t}else Vr.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=t.layers,delete t.layers,s=t;const o=new e(s);if(!(o instanceof oO))throw new zR(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of a){const t=ZD(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new LR("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new LR("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}oO.className="Sequential",Fl.registerClass(oO);class iO extends Fl.Serializable{getConfig(){return{}}}class lO extends iO{apply(e,t=1){return function(e,t=1){if(1!==t)throw new zR(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return wu(e)}(e,t)}}lO.className="elu",Fl.registerClass(lO);class uO extends iO{apply(e){return lf(e)}}uO.className="selu",Fl.registerClass(uO);class cO extends iO{apply(e){return Su(e)}}cO.className="relu",Fl.registerClass(cO);class pO extends iO{apply(e){return ep((()=>Oh(6,Su(e))))}}pO.className="relu6",Fl.registerClass(pO);class hO extends iO{apply(e){return e}}hO.className="linear",Fl.registerClass(hO);class dO extends iO{apply(e){return Eu(e)}}dO.className="sigmoid",Fl.registerClass(dO);class fO extends iO{apply(e){return function(e){return ep((()=>{const t=wp(.5,vu(.2,e));return od(t,0,1)}))}(e)}}fO.className="hardSigmoid",Fl.registerClass(fO);class mO extends iO{apply(e){return _d(e)}}mO.className="softplus",Fl.registerClass(mO);class gO extends iO{apply(e){return function(e){return ep((()=>th(e,wp(fh(e),1))))}(e)}}gO.className="softsign",Fl.registerClass(gO);class yO extends iO{apply(e){return kf(e)}}yO.className="tanh",Fl.registerClass(yO);class bO extends iO{apply(e,t=-1){return yf(e,t)}}bO.className="softmax",Fl.registerClass(bO);class xO extends iO{apply(e,t=-1){return Fd(e,t)}}xO.className="logSoftmax",Fl.registerClass(xO);class wO extends iO{apply(e,t=1){return ep((()=>vu(Eu(vu(e,t)),e)))}}wO.className="swish",Fl.registerClass(wO);class kO extends iO{apply(e){return ep((()=>vu(e,kf(_d(e)))))}}function vO(e){return e.getClassName()}function NO(e,t={}){return YR(e,Fl.SerializationMap.getMap().classNameMap,t,"activation")}function SO(e){if(null==e){const e={className:"linear",config:{}};return NO(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},NO(t)}return e instanceof iO?e:NO(e)}function IO(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}kO.className="mish",Fl.registerClass(kO);class TO extends Fl.Serializable{}class EO extends TO{constructor(e){super(),IO(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return ep((()=>{let t=pp([1]);return this.hasL1&&(t=wp(t,Cu(vu(this.l1,fh(e))))),this.hasL2&&(t=wp(t,Cu(vu(this.l2,H_(e))))),Tu(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}EO.className="L1L2",Fl.registerClass(EO);const $O={l1l2:"L1L2"};function CO(e){return KR(e)}function AO(e,t={}){return YR(e,Fl.SerializationMap.getMap().classNameMap,t,"regularizer")}function RO(e){if(null==e)return null;if("string"==typeof e){return AO({className:e in $O?$O[e]:e,config:{}})}return e instanceof TO?e:AO(e)}class _O extends MD{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=SD(e);let n=Su(e);return null!=this.maxValue&&(n=od(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}_O.className="ReLU",Fl.registerClass(_O);class DO extends MD{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=SD(e);return ku(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}DO.className="LeakyReLU",Fl.registerClass(DO);class FO extends MD{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=yD(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=RO(e.alphaRegularizer),this.alphaConstraint=f_(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new LR(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=ID(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new RD({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=SD(e),Nu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:gD(this.alphaInitializer),alphaRegularizer:CO(this.alphaRegularizer),alphaConstraint:h_(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}FO.className="PReLU",Fl.registerClass(FO);class OO extends MD{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new zR(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=SD(e);return wu(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}OO.className="ELU",Fl.registerClass(OO);class MO extends MD{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=SD(e);return vu(n,Bi(Qp(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}MO.className="ThresholdedReLU",Fl.registerClass(MO);class LO extends MD{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new bO).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=SD(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function zO(e,t,n){if("number"==typeof e)return PR(e,t);if(e.length!==t)throw new LR(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let a=0;a<t;++a){const s=e[a];if((r=s)!==parseInt(r.toString(),10))throw new LR(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${s}`)}return e;var r}function BO(e,t,n,r,a=1){if(null==e)return e;let s;return s="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((s+r-1)/r)}function PO(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+__([n-t,0]);else{if("same"!==r)throw new LR(`Unsupport padding mode: ${r}.`);e*=t}return e}function VO(e,t){return ep((()=>(k_(t),"channelsFirst"===t?Eh(e,[0,2,3,1]):e)))}function WO(e,t){return ep((()=>(k_(t),"channelsFirst"===t?Eh(e,[0,2,3,4,1]):e)))}function UO(e,t,n,r=1,a="valid",s,o=1){return ep((()=>{if(null==s&&(s="channelsLast"),k_(s),3!==e.shape.length)throw new LR(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new LR(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new LR(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===s&&(e=Eh(e,[0,2,1])),"causal"===a)throw new zR("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=pd(e,t,r,"same"===a?"same":"valid","NWC",o);return null!=n&&(i=q_(i,n)),i}))}function GO(e,t,n,r=[1,1],a="valid",s,o,i=null){return ep((()=>{if(null==s&&(s="channelsLast"),k_(s),3!==e.rank&&4!==e.rank)throw new LR(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new LR(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=VO(e,s);if("causal"===a)throw new zR("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=xp.conv2d({x:l,filter:t,strides:r,pad:"same"===a?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===s&&(l=Eh(l,[0,3,1,2])),l}))}function HO(e,t,n,r=[1,1,1],a="valid",s,o){return ep((()=>{if(null==s&&(s="channelsLast"),k_(s),4!==e.rank&&5!==e.rank)throw new LR(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new LR(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=WO(e,s);if("causal"===a)throw new zR("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=dd(i,t,r,"same"===a?"same":"valid","NDHWC",o),null!=n&&(i=q_(i,n)),"channelsFirst"===s&&(i=Eh(i,[0,4,1,2,3])),i}))}LO.className="Softmax",Fl.registerClass(LO);class jO extends MD{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",jO.verifyArgs(t),this.rank=e,n_(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new zR(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=zO(t.kernelSize,e,"kernelSize"),this.strides=zO(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,v_(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,k_(this.dataFormat),this.activation=SO(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=yD(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=f_(t.biasConstraint),this.biasRegularizer=RO(t.biasRegularizer),this.activityRegularizer=RO(t.activityRegularizer),this.dilationRate=zO(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new LR(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new LR(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new LR(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(VR("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!t_(e.kernelSize,"number",1,3))throw new LR(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:vO(this.activation),useBias:this.useBias,biasInitializer:gD(this.biasInitializer),biasRegularizer:CO(this.biasRegularizer),activityRegularizer:CO(this.activityRegularizer),biasConstraint:h_(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class qO extends jO{constructor(e,t){super(e,t),this.kernel=null,qO.verifyArgs(t),this.filters=t.filters,n_(this.filters,"filters"),this.kernelInitializer=yD(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=f_(t.kernelConstraint),this.kernelRegularizer=RO(t.kernelRegularizer)}build(e){e=ID(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new LR(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return ep((()=>{let t;e=SD(e);const n=null==this.bias?null:this.bias.read(),r=a_(this.activation.getClassName());if(null!=r&&2===this.rank)t=GO(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=UO(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=GO(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new zR("convolutions greater than 3D are not implemented yet.");t=HO(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=ID(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=BO(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:gD(this.kernelInitializer),kernelRegularizer:CO(this.kernelRegularizer),kernelConstraint:h_(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new LR(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class KO extends qO{constructor(e){super(2,e),KO.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!t_(e.kernelSize,"number",1,2))throw new LR(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}KO.className="Conv2D",Fl.registerClass(KO);class XO extends qO{constructor(e){super(3,e),XO.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new LR(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}XO.className="Conv3D",Fl.registerClass(XO);class YO extends KO{constructor(e){if(super(e),this.inputSpec=[new RD({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new LR(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=ID(e)).length)throw new LR("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new LR("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new RD({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return ep((()=>{let t=SD(e);if(4!==t.shape.length)throw new LR(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let a,s;"channelsFirst"===this.dataFormat?(a=2,s=3):(a=1,s=2);const o=n[a],i=n[s],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],p=this.strides[1],h=[r,PO(o,c,l,this.padding),PO(i,p,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Eh(t,[0,2,3,1]));let d=hd(t,this.kernel.read(),h,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Eh(d,[0,3,1,2])),null!=this.bias&&(d=q_(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=ID(e)).slice();let n,r,a;"channelsFirst"===this.dataFormat?(n=1,r=2,a=3):(n=3,r=1,a=2);const s=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[r]=PO(t[r],i,s,this.padding),t[a]=PO(t[a],l,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}YO.className="Conv2DTranspose",Fl.registerClass(YO);class ZO extends XO{constructor(e){if(super(e),this.inputSpec=[new RD({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new LR(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=ID(e)).length)throw new LR("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new LR("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new RD({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return ep((()=>{let t=SD(e);if(5!==t.shape.length)throw new LR(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let a,s,o;"channelsFirst"===this.dataFormat?(o=2,a=3,s=4):(o=1,a=2,s=3);const i=n[o],l=n[a],u=n[s],c=this.kernelSize[0],p=this.kernelSize[1],h=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,PO(i,d,c,this.padding),PO(l,f,p,this.padding),PO(u,m,h,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Eh(t,[0,2,3,4,1]));let y=md(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Eh(y,[0,4,1,2,3])),null!==this.bias&&(y=q_(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=ID(e)).slice();let n,r,a,s;"channelsFirst"===this.dataFormat?(n=1,r=2,a=3,s=4):(n=4,r=1,a=2,s=3);const o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],p=this.strides[2];return t[n]=this.filters,t[r]=PO(t[r],u,o,this.padding),t[a]=PO(t[a],c,i,this.padding),t[s]=PO(t[s],p,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}ZO.className="Conv3DTranspose",Fl.registerClass(ZO);class JO extends qO{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new LR("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new LR("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new LR(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=yD(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=RO(t.depthwiseRegularizer),this.depthwiseConstraint=f_(t.depthwiseConstraint),this.pointwiseInitializer=yD(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=RO(t.pointwiseRegularizer),this.pointwiseConstraint=f_(t.pointwiseConstraint)}build(e){if((e=ID(e)).length<this.rank+2)throw new LR(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new LR(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const s=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,s,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,s,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,s,this.biasConstraint):this.bias=null,this.inputSpec=[new RD({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return ep((()=>{let t;if(e=SD(e),1===this.rank)throw new zR("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Eh(e,[0,2,3,1])),t=uf(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=q_(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Eh(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=gD(this.depthwiseInitializer),e.pointwiseInitializer=gD(this.pointwiseInitializer),e.depthwiseRegularizer=CO(this.depthwiseRegularizer),e.pointwiseRegularizer=CO(this.pointwiseRegularizer),e.depthwiseConstraint=h_(this.depthwiseConstraint),e.pointwiseConstraint=h_(this.pointwiseConstraint),e}}JO.className="SeparableConv";class QO extends JO{constructor(e){super(2,e)}}QO.className="SeparableConv2D",Fl.registerClass(QO);class eM extends qO{constructor(e){super(1,e),eM.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!t_(e.kernelSize,"number",1,1))throw new LR(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}eM.className="Conv1D",Fl.registerClass(eM);class tM extends MD{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return ep((()=>{if(e=SD(e),"channelsLast"===this.dataFormat){const t=z_(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return z_(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=z_(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return z_(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}tM.className="Cropping2D",Fl.registerClass(tM);class nM extends MD{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,k_(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,e_(g_,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return ep((()=>{let t=SD(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Eh(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],a="nearest"===this.interpolation?Tf.resizeNearestNeighbor(t,[e,r]):Tf.resizeBilinear(t,[e,r]);return Eh(a,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?Tf.resizeNearestNeighbor(t,[e,r]):Tf.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}nM.className="UpSampling2D",Fl.registerClass(nM);class rM extends jO{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=yD(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=f_(e.depthwiseConstraint),this.depthwiseRegularizer=RO(e.depthwiseRegularizer)}build(e){if((e=ID(e)).length<4)throw new LR(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new LR(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ep((()=>{let t=function(e,t,n=[1,1],r="valid",a,s){return ep((()=>{null==a&&(a="channelsLast"),k_(a);let o=VO(e,a);if(4!==e.rank)throw new LR(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new LR(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=Ip(o,t,n,"same"===r?"same":"valid","NHWC",s),"channelsFirst"===a&&(o=Eh(o,[0,3,1,2])),o}))}(e=SD(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=q_(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=ID(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=BO(t,this.kernelSize[0],this.padding,this.strides[0]),s=BO(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,a,s]:[e[0],a,s,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=gD(this.depthwiseInitializer),e.depthwiseRegularizer=CO(this.depthwiseRegularizer),e.depthwiseConstraint=h_(this.depthwiseRegularizer),e}}rM.className="DepthwiseConv2D",Fl.registerClass(rM);var aM={};function sM(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new LR("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function oM(e,t,n,r=!1,a,s,o=!1,i=!1){return ep((()=>{const l=t.shape.length;if(l<3)throw new LR(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(D_(2,l));if(t=Eh(t,u),null!=s)throw new zR("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=Bi(Bi(a,"bool"),"float32")).rank===l-1&&(a=Sh(a,-1)),a=Eh(a,u)),r&&(t=gp(t,0),null!=a&&(a=gp(a,0)));const c=[];let p,h=n;const d=t.shape[0],f=hh(t);let m,g;null!=a&&(m=hh(a));for(let t=0;t<d;++t){const n=f[t],r=ep((()=>e(n,h)));if(null==a)p=r[0],h=r[1];else{const e=ep((()=>{const e=m[t],n=nh(Gd(e),e);return{output:wp(vu(r[0],e),vu(h[0],n)),newStates:h.map(((t,a)=>wp(vu(r[1][a],e),vu(t,n))))}}));p=e.output,h=e.newStates}i&&c.push(p)}if(i){g=ph(c,1)}return[p,g,h]}))}t(aM,"ConvLSTM2DCell",(()=>xM),(e=>xM=e)),t(aM,"ConvLSTM2D",(()=>wM),(e=>wM=e));class iM extends MD{constructor(e){let t;if(super(e),null==e.cell)throw new LR("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new mM({cells:e.cell}):e.cell,null==t.stateSize)throw new LR("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new RD({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return D_(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){vD(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return ep((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new zR("Constants support is not implemented in RNN yet.");vD(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new RD({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let a;if(this.cell.build(r),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Vr.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),a))throw new LR(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map((e=>new RD({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){ep((()=>{if(!this.stateful)throw new OR("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new LR("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>pp([n,e]))):this.states_=[pp([n,this.cell.stateSize])];else if(null==e)tp(this.states_),null!=this.keptStates&&(tp(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>pp([n,e]))):this.states_[0]=pp([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new LR(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):tp(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,s=[n,a];if(!Vr.arraysEqual(r.shape,s))throw new LR(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>np(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const a=sM(e,n,r,this.numConstants);e=a.inputs,n=a.initialState,r=a.constants;let s=[],o=[];if(null!=n){t.initialState=n,s=s.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new RD({shape:e.shape}));o=o.concat(this.stateSpec)}null!=r&&(t.constants=r,s=s.concat(r),this.numConstants=r.length);if(s[0]instanceof _D){const n=[e].concat(s),r=this.inputSpec.concat(o),a=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=a,i}return super.apply(e,t)}call(e,t){return ep((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let a=null==t?null:t.initialState;e=SD(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const s=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==s)throw new LR(`RNN Layer has ${s} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:r},i=oM(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,r);const p=this.returnSequences?u:l;return this.returnState?[p].concat(c):p}))}getInitialState(e){return ep((()=>{let t=pp(e.shape);return t=Cu(t,[1,2]),t=O_(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?V_(t,[1,e]):t)):this.cell.stateSize>1?[V_(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===iM.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=ZD(t.cell,n);return new e(Object.assign(t,{cell:r}))}}iM.className="RNN",Fl.registerClass(iM);class lM extends MD{}class uM extends lM{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,n_(this.units,"units"),this.activation=SO(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=yD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=yD(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=yD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=RO(e.kernelRegularizer),this.recurrentRegularizer=RO(e.recurrentRegularizer),this.biasRegularizer=RO(e.biasRegularizer),this.kernelConstraint=f_(e.kernelConstraint),this.recurrentConstraint=f_(e.recurrentConstraint),this.biasConstraint=f_(e.biasConstraint),this.dropout=R_([1,__([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=R_([1,__([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ID(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ep((()=>{if(2!==e.length)throw new LR(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gM({ones:()=>Gd(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gM({ones:()=>Gd(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,o=this.recurrentDropoutMask;a=U_(null!=s?vu(e,s):e,this.kernel.read()),null!=this.bias&&(a=q_(a,this.bias.read())),null!=o&&(n=vu(n,o));let i=wp(a,U_(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:vO(this.activation),useBias:this.useBias,kernelInitializer:gD(this.kernelInitializer),recurrentInitializer:gD(this.recurrentInitializer),biasInitializer:gD(this.biasInitializer),kernelRegularizer:CO(this.kernelRegularizer),recurrentRegularizer:CO(this.recurrentRegularizer),biasRegularizer:CO(this.biasRegularizer),activityRegularizer:CO(this.activityRegularizer),kernelConstraint:h_(this.kernelConstraint),recurrentConstraint:h_(this.recurrentConstraint),biasConstraint:h_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}uM.className="SimpleRNNCell",Fl.registerClass(uM);class cM extends iM{constructor(e){e.cell=new uM(e),super(e)}call(e,t){return ep((()=>{null!=this.cell.dropoutMask&&(tp(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(tp(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})}))}static fromConfig(e,t){return new e(t)}}cM.className="SimpleRNN",Fl.registerClass(cM);class pM extends lM{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new LR("GRUCell does not support reset_after parameter set to true.");this.units=e.units,n_(this.units,"units"),this.activation=SO(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=SO(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=yD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=yD(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=yD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=RO(e.kernelRegularizer),this.recurrentRegularizer=RO(e.recurrentRegularizer),this.biasRegularizer=RO(e.biasRegularizer),this.kernelConstraint=f_(e.kernelConstraint),this.recurrentConstraint=f_(e.recurrentConstraint),this.biasConstraint=f_(e.biasConstraint),this.dropout=R_([1,__([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=R_([1,__([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=ID(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ep((()=>{if(2!==e.length)throw new LR(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gM({ones:()=>Gd(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gM({ones:()=>Gd(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,s=this.recurrentDropoutMask;let o,i,l;0<this.dropout&&this.dropout<1&&(e=vu(e,a[0]));let u=U_(e,this.kernel.read());this.useBias&&(u=q_(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=vu(r,s[0]));const c=this.recurrentKernel.read(),[p,h]=cp(c,[2*this.units,this.units],c.rank-1),d=U_(r,p),[f,m,g]=cp(u,3,u.rank-1),[y,b]=cp(d,2,d.rank-1);o=this.recurrentActivation.apply(wp(f,y)),i=this.recurrentActivation.apply(wp(m,b));const x=U_(vu(i,r),h);l=this.activation.apply(wp(g,x));const w=wp(vu(o,r),vu(wp(1,Th(o)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:vO(this.activation),recurrentActivation:vO(this.recurrentActivation),useBias:this.useBias,kernelInitializer:gD(this.kernelInitializer),recurrentInitializer:gD(this.recurrentInitializer),biasInitializer:gD(this.biasInitializer),kernelRegularizer:CO(this.kernelRegularizer),recurrentRegularizer:CO(this.recurrentRegularizer),biasRegularizer:CO(this.biasRegularizer),activityRegularizer:CO(this.activityRegularizer),kernelConstraint:h_(this.kernelConstraint),recurrentConstraint:h_(this.recurrentConstraint),biasConstraint:h_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}pM.className="GRUCell",Fl.registerClass(pM);class hM extends iM{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new pM(e),super(e)}call(e,t){return ep((()=>{null!=this.cell.dropoutMask&&(tp(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(tp(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}hM.className="GRU",Fl.registerClass(hM);class dM extends lM{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,n_(this.units,"units"),this.activation=SO(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=SO(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=yD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=yD(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=yD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=RO(e.kernelRegularizer),this.recurrentRegularizer=RO(e.recurrentRegularizer),this.biasRegularizer=RO(e.biasRegularizer),this.kernelConstraint=f_(e.kernelConstraint),this.recurrentConstraint=f_(e.recurrentConstraint),this.biasConstraint=f_(e.biasConstraint),this.dropout=R_([1,__([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=R_([1,__([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=ID(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends J_{apply(t,r){const a=e.apply([n]),s=(new eD).apply([n]),o=e.apply([2*n]);return P_(P_(a,s),o)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return ep((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new LR(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gM({ones:()=>Gd(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gM({ones:()=>Gd(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,o=this.recurrentDropoutMask;let i,l,u,c;0<this.dropout&&this.dropout<1&&(e=vu(e,s[0]));let p=U_(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=vu(r,o[0])),p=wp(p,U_(r,this.recurrentKernel.read())),this.useBias&&(p=q_(p,this.bias.read()));const[h,d,f,m]=cp(p,4,p.rank-1);i=this.recurrentActivation.apply(h),l=this.recurrentActivation.apply(d),u=wp(vu(l,a),vu(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=vu(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:vO(this.activation),recurrentActivation:vO(this.recurrentActivation),useBias:this.useBias,kernelInitializer:gD(this.kernelInitializer),recurrentInitializer:gD(this.recurrentInitializer),biasInitializer:gD(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:CO(this.kernelRegularizer),recurrentRegularizer:CO(this.recurrentRegularizer),biasRegularizer:CO(this.biasRegularizer),activityRegularizer:CO(this.activityRegularizer),kernelConstraint:h_(this.kernelConstraint),recurrentConstraint:h_(this.recurrentConstraint),biasConstraint:h_(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}dM.className="LSTMCell",Fl.registerClass(dM);class fM extends iM{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new dM(e),super(e)}call(e,t){return ep((()=>{null!=this.cell.dropoutMask&&(tp(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(tp(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}fM.className="LSTM",Fl.registerClass(fM);class mM extends lM{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return ep((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const a=[];let s;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=r[o],s=0===o?[e[0]].concat(n):[s[0]].concat(n),s=i.call(s,t),a.push(s.slice(1))}n=[];for(const e of a.slice().reverse())n.push(...e);return[s[0]].concat(n)}))}build(e){let t;vD(e)&&(e=e[0]),this.cells.forEach(((n,r)=>{I_(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(ZD(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return CD(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,a=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}AD(t)}}function gM(e){const{ones:t,rate:n,training:r=!1,count:a=1,dropoutFunc:s}=e,o=()=>null!=s?s(t(),n):K_(t(),n),i=()=>X_(o,t,r);if(!a||a<=1)return np(i().clone());return Array(a).fill(void 0).map(i).map((e=>np(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */mM.className="StackedRNNCells",Fl.registerClass(mM);var yM=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};class bM extends iM{constructor(e){if(e.unroll)throw new zR("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new zR("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new RD({ndim:5})]}call(e,t){return ep((()=>{if(null!=this.cell.dropoutMask&&(tp(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(tp(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new LR("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return ep((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),a=pp([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(a):[a]}))}resetStates(e,t=!1){ep((()=>{if(!this.stateful)throw new OR("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),a=[r[0],...r.slice(2)];if(null==n[0])throw new LR("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>pp(a))):this.states_=[pp(a)];else if(null==e)tp(this.states_),null!=this.keptStates&&(tp(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>pp(a))):this.states_[0]=pp(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new LR(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):tp(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=a;if(!Vr.arraysEqual(n.shape,r))throw new LR(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>np(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:a,strides:s,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=BO(l,r[0],a,s[0],o[0]),p=BO(u,r[1],a,s[1],o[1]);return[...e.slice(0,2),...i?[n,c,p]:[c,p,n]]}}bM.className="ConvRNN2D";class xM extends dM{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:a,dataFormat:s,dilationRate:o}=e;super(Object.assign({},e,{units:t})),this.filters=t,n_(this.filters,"filters"),this.kernelSize=zO(n,2,"kernelSize"),this.kernelSize.forEach((e=>n_(e,"kernelSize"))),this.strides=zO(r||1,2,"strides"),this.strides.forEach((e=>n_(e,"strides"))),this.padding=a||"valid",v_(this.padding),this.dataFormat=s||"channelsLast",k_(this.dataFormat),this.dilationRate=zO(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>n_(e,"dilationRate")))}build(e){var t;e=ID(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new LR(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],a=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends J_{apply(e,t){return B_([n.apply([r]),Dh([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return ep((()=>{if(3!==e.length)throw new LR(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],a=e[1],s=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gM({ones:()=>Gd(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?vu(t[n],e):e;let l=i(r,o,0),u=i(r,o,1),c=i(r,o,2),p=i(r,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gM({ones:()=>Gd(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const h=this.recurrentDropoutMask;let d=i(a,h,0),f=i(a,h,1),m=i(a,h,2),g=i(a,h,3);const[y,b,x,w]=cp(this.kernel.read(),4,3),[k,v,N,S]=this.useBias?cp(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),p=this.inputConv(p,w,S,this.padding);const[I,T,E,$]=cp(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,I),f=this.recurrentConv(f,T),m=this.recurrentConv(m,E),g=this.recurrentConv(g,$);const C=this.recurrentActivation.apply(wp(l,d)),A=this.recurrentActivation.apply(wp(u,f)),R=wp(vu(A,s),vu(C,this.activation.apply(wp(c,m)))),_=vu(this.recurrentActivation.apply(wp(p,g)),this.activation.apply(R));return[_,_,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=yM(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,n,r){const a=kp(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?q_(a,n,this.dataFormat):a}recurrentConv(e,t){return kp(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}xM.className="ConvLSTM2DCell",Fl.registerClass(xM);class wM extends bM{constructor(e){const t=new xM(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}wM.className="ConvLSTM2D",Fl.registerClass(wM);class kM extends MD{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return X_((()=>K_(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}kM.className="Dropout",Fl.registerClass(kM);class vM extends kM{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}vM.className="SpatialDropout1D",Fl.registerClass(vM);class NM extends MD{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,n_(this.units,"units"),this.activation=SO(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=yD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=yD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=f_(e.kernelConstraint),this.biasConstraint=f_(e.biasConstraint),this.kernelRegularizer=RO(e.kernelRegularizer),this.biasRegularizer=RO(e.biasRegularizer),this.activityRegularizer=RO(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=ID(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=ID(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e),r=a_(this.activation.getClassName());let a;return null!=r?a=U_(n,this.kernel.read(),r,this.bias?this.bias.read():null):(a=U_(n,this.kernel.read()),null!=this.bias&&(a=q_(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a}))}getConfig(){const e={units:this.units,activation:vO(this.activation),useBias:this.useBias,kernelInitializer:gD(this.kernelInitializer),biasInitializer:gD(this.biasInitializer),kernelRegularizer:CO(this.kernelRegularizer),biasRegularizer:CO(this.biasRegularizer),activityRegularizer:CO(this.activityRegularizer),kernelConstraint:h_(this.kernelConstraint),biasConstraint:h_(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}NM.className="Dense",Fl.registerClass(NM);class SM extends MD{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=ID(e);for(const t of e.slice(1))if(null==t)throw new LR(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],A_(e,1)]}call(e,t){return ep((()=>{this.invokeCallHook(e,t);let n=SD(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Eh(n,e)}return function(e){if(e.rank<=1)throw new LR(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],A_(e.shape,1)];return Tu(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}SM.className="Flatten",Fl.registerClass(SM);class IM extends MD{constructor(e){super(e),this.supportsMasking=!0,this.activation=SO(e.activation)}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e);return this.activation.apply(n)}))}getConfig(){const e={activation:vO(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}IM.className="Activation",Fl.registerClass(IM);class TM extends MD{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return ep((()=>{return e=SD(e),t=e,n=this.n,ep((()=>{if(2!==t.shape.length)throw new LR(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return V_(O_(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}TM.className="RepeatVector",Fl.registerClass(TM);class EM extends MD{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let a=1,s=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==s)throw new LR("Can only specifiy one unknown dimension.");s=e}else a*=t}const o=A_(e);if(null!==s){if(0===a||o%a!=0)throw new LR(n);r[s]=o/a}else if(o!==a)throw new LR(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e),r=n.shape,a=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return Tu(n,a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}EM.className="Reshape",Fl.registerClass(EM);class $M extends MD{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=D_(1,e.dims.length+1);if(!Vr.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new RD({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=ID(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return Eh(SD(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}$M.className="Permute",Fl.registerClass($M);class CM extends MD{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=SD(e);return Gh(_h(n,this.maskValue),-1)}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e),r=Gh(_h(n,this.maskValue),-1,!0);return vu(n,Bi(r,n.dtype))}))}}CM.className="Masking",Fl.registerClass(CM);class AM extends MD{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(GR(e.inputLength))}this.inputDim=e.inputDim,n_(this.inputDim,"inputDim"),this.outputDim=e.outputDim,n_(this.outputDim,"outputDim"),this.embeddingsInitializer=yD(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=RO(e.embeddingsRegularizer),this.activityRegularizer=RO(e.activityRegularizer),this.embeddingsConstraint=f_(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return ep((()=>this.maskZero?(e=SD(e),_h(e,hp(e))):null))}computeOutputShape(e){if(e=ID(e),null==this.inputLength)return[...e,this.outputDim];const t=GR(this.inputLength);if(t.length!==e.length-1)throw new LR(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const a=t[r],s=e[r+1];if(null!=a&&null!=s&&a!==s)throw new LR(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=s),n++}}return[e[0],...t,this.outputDim]}call(e,t){return ep((()=>{this.invokeCallHook(e,t);let n=SD(e);"int32"!==n.dtype&&(n=F_(n,"int32"));const r=G_(this.embeddings.read(),Tu(n,[n.size]));return Tu(r,ID(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:gD(this.embeddingsInitializer),embeddingsRegularizer:CO(this.embeddingsRegularizer),activityRegularizer:CO(this.activityRegularizer),embeddingsConstraint:h_(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}AM.className="Embedding",Fl.registerClass(AM);class RM extends MD{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new zR}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const a=e[e.length-t.length+r],s=t[r];if(null==a||null==s||a<0||s<0)n.push(null);else if(1===a)n.push(s);else if(1===s)n.push(a);else{if(a!==s)throw new LR("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[ID(e)]),e.length<2)throw new LR(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=JR(t),t.length>1)throw new LR(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===JR(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return ep((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=__(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=O_(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,a=e[0],s=e.slice(1).concat([a]);let o=Tu(r,[a].concat(A_(e.slice(1))));o=Eh(o,[1,0]),o=Tu(o,s),t.push(o),n=!0}else if(e>1){const a=D_(1,e).concat([0]);t.push(Eh(r,a)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const a=r.rank;if(n)if(null==a){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=Tu(Eh(Tu(r,[-1,t]),[1,0]),n)}else if(a>1){const e=[a-1].concat(D_(0,a-1));r=Eh(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=JR(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return ep((()=>{if(null==t)return null;if(!Array.isArray(t))throw new LR("`mask` should be an Array");if(!Array.isArray(e))throw new LR("`inputs` should be an Array");if(t.length!==e.length)throw new LR(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Sh(e,0))))[0];for(let e=1;e<t.length-1;++e)n=ch(n,t[e]);return n}))}}class _M extends RM{constructor(e){super(e)}mergeFunction(e){return ep((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=wp(t,e[n]);return t}))}}_M.className="Add",Fl.registerClass(_M);class DM extends RM{constructor(e){super(e)}mergeFunction(e){return ep((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=vu(t,e[n]);return t}))}}DM.className="Multiply",Fl.registerClass(DM);class FM extends RM{constructor(e){super(e)}mergeFunction(e){return ep((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=wp(t,e[n]);return vu(1/e.length,t)}))}}FM.className="Average",Fl.registerClass(FM);class OM extends RM{constructor(e){super(e)}mergeFunction(e){return ep((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Bd(t,e[n]);return t}))}}OM.className="Maximum",Fl.registerClass(OM);class MM extends RM{constructor(e){super(e)}mergeFunction(e){return ep((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Oh(t,e[n]);return t}))}}MM.className="Minimum",Fl.registerClass(MM);class LM extends RM{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new LR("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let a=!1;for(const e of n)if(Vr.arraysEqual(e,r)){a=!0;break}a||n.push(r)}if(n.length>1)throw new LR("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return ep((()=>B_(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new LR("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new LR("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new LR("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new LR(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return ep((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(Bi(Gd(e[n]),"bool")):t[n].rank<e[n].rank?r.push(Sh(t[n],-1)):r.push(t[n]);const a=op(r,this.axis);return Uh(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function zM(e,t){for(;e<0;)e+=t;return e}LM.className="Concatenate",Fl.registerClass(LM);class BM extends RM{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Vr.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new zR("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new LR(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new LR(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>zM(t,e[n].shape.length))):[zM(this.axes,n.shape.length),zM(this.axes,r.shape.length)],this.normalize&&(n=JD(n,t[0]),r=JD(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new zR("batchDot is not implemented for tensors of 4D or higher rank yet");if(Vr.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Vr.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new zR("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,a=t.shape.length;null==n&&(n=[r-1,a-2]);const s=n;return ep((()=>{let n,o;if(r>a){n=r-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=Tu(t,t.shape.concat(e))}else if(a>r){n=a-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=Tu(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=s[0]===s[1]?Cu(vu(e,t),s[0]):Cu(vu(Eh(e,[1,0]),t),s[1]);else{const n=s[0]!==e.shape.length-1,r=s[1]===t.shape.length-1;o=Cp(e,t,n,r)}if(n>0){let e;e=r>a?r+a-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);o=vh(o,t)}return 1===o.shape.length&&(o=Sh(o,1)),o}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[zM(this.axes,e.length),zM(this.axes,t.length)],n}computeOutputShape(e){Vr.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new zR("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}BM.className="Dot",Fl.registerClass(BM);class PM extends MD{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e);return X_((()=>wp(W_(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}PM.className="GaussianNoise",Fl.registerClass(PM);class VM extends MD{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ep((()=>{this.invokeCallHook(e,t);const n=SD(e);if(this.rate>0&&this.rate<1){return X_((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return vu(n,W_(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}VM.className="GaussianDropout",Fl.registerClass(VM);class WM extends MD{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||SD(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ep((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return X_((()=>{const t=SD(e),r=-1.7580993408473766;let a=uh(af(n),this.rate);a=F_(a,"float32");const s=((1-this.rate)*(1+this.rate*r**2))**-.5,o=-s*r*this.rate,i=wp(vu(t,a),vu(wp(a,-1),r));return wp(vu(i,s),o)}),(()=>SD(e)),t.training||!1)}return e}))}}function UM(e,t,n,r,a,s=.001){let o;if(2===e.rank)o=nd(e,t,n,r,a,s);else if(3===e.rank)o=rd(e,t,n,r,a,s);else{if(4!==e.rank)throw new zR(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=ad(e,t,n,r,a,s)}return o}function GM(e,t,n,r,a=.001){return Vr.arraysEqual(r.slice().sort(),D_(0,e.rank-1))?function(e,t,n,r,a=.001){return ep((()=>{const s=Wd(e,r),o=s.mean,i=s.variance;return[UM(e,o,i,n,t,a),o,i]}))}(e,t,n,r,a):function(e,t,n,r,a=.001){return ep((()=>{const s=Wd(e,r),o=s.mean,i=s.variance,l=[];for(const t of D_(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=Tu(o,l),c=Tu(i,l),p=null==t?null:Tu(t,l),h=null==n?null:Tu(n,l);return[UM(e,u,c,h,p,a),o,i]}))}(e,t,n,r,a)}WM.className="AlphaDropout",Fl.registerClass(WM);class HM extends MD{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=yD(e.betaInitializer||"zeros"),this.gammaInitializer=yD(e.gammaInitializer||"ones"),this.movingMeanInitializer=yD(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=yD(e.movingVarianceInitializer||"ones"),this.betaConstraint=f_(e.betaConstraint),this.gammaConstraint=f_(e.gammaConstraint),this.betaRegularizer=RO(e.betaRegularizer),this.gammaRegularizer=RO(e.gammaRegularizer)}build(e){e=ID(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new LR(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new RD({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return ep((()=>{const n=null!=t.training&&t.training,r=SD(e),a=r.shape,s=a.length,o=D_(0,s),i=this.axis>=0?this.axis:this.axis+s;o.splice(i,1);const l=PR(1,s);l[i]=a[i];const u=o.slice();u.sort();const c=!Vr.arraysEqual(u,D_(0,s).slice(0,s-1));if(!n)return(()=>{if(c){const e=Tu(this.movingMean.read(),l),t=Tu(this.movingVariance.read(),l),n=this.center?Tu(this.beta.read(),l):null,a=this.scale?Tu(this.gamma.read(),l):null;return UM(r,e,t,n,a,this.epsilon)}return UM(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,h,d]=GM(r,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{ep((()=>{const r=1-n,a=e.read(),s=vu(nh(a,t),r);e.write(nh(a,s))}))};return(()=>{f(this.movingMean,h,this.momentum),f(this.movingVariance,d,this.momentum)})(),p}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:gD(this.betaInitializer),gammaInitializer:gD(this.gammaInitializer),movingMeanInitializer:gD(this.movingMeanInitializer),movingVarianceInitializer:gD(this.movingVarianceInitializer),betaRegularizer:CO(this.betaRegularizer),gammaRegularizer:CO(this.gammaRegularizer),betaConstraint:h_(this.betaConstraint),gammaConstraint:h_(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}HM.className="BatchNormalization",Fl.registerClass(HM);class jM extends MD{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=yD(e.betaInitializer||"zeros"),this.gammaInitializer=yD(e.gammaInitializer||"ones"),this.betaRegularizer=RO(e.betaRegularizer),this.gammaRegularizer=RO(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=ID(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==JR(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=SD(e),r=n.shape,a=r.length;return ep((()=>{let{mean:e,variance:t}=Wd(n,this.axis,!0);const s=PR(1,a);for(const e of this.axis)s[e]=r[e];const o=e=>null!=e&&e.shape.length!==a?Tu(e,s):e;let i=o(this.gamma.read()),l=o(this.beta.read());const u=[],c=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),c.push(1)):(u.push(1),c.push(r[e]));return e=Bp(e,u),t=Bp(t,u),i=Bp(i,c),l=Bp(l,c),UM(n,e,t,l,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:gD(this.betaInitializer),gammaInitializer:gD(this.gammaInitializer),betaRegularizer:CO(this.betaRegularizer),gammaRegularizer:CO(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}jM.className="LayerNormalization",Fl.registerClass(jM);class qM extends MD{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new LR(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new LR(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new LR(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new RD({ndim:4})]}computeOutputShape(e){let t,n;return e=ID(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return ep((()=>{return t=SD(e),n=this.padding,r=this.dataFormat,ep((()=>{if(4!==t.rank)throw new LR(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new LR("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new LR(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Hd(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function KM(e,t,n,r,a,s){return ep((()=>{let o;k_(a),N_(s),v_(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==a&&(a="channelsLast"),null==s&&(s="max"),e=VO(e,a);const i="same"===r?"same":"valid";return o="max"===s?Ld(e,t,n,i):Jh(e,t,n,i),"channelsFirst"===a&&(o=Eh(o,[0,3,1,2])),o}))}function XM(e,t,n,r,a,s){return ep((()=>{let o;k_(a),N_(s),v_(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==a&&(a="channelsLast"),null==s&&(s="max"),e=WO(e,a);const i="same"===r?"same":"valid";return o="max"===s?zd(e,t,n,i):Qh(e,t,n,i),"channelsFirst"===a&&(o=Eh(o,[0,4,1,2,3])),o}))}qM.className="ZeroPadding2D",Fl.registerClass(qM);class YM extends MD{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new LR(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(n_(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new LR(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}n_(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,v_(this.padding),this.inputSpec=[new RD({ndim:3})]}computeOutputShape(e){const t=BO((e=ID(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return ep((()=>{this.invokeCallHook(e,t),e=O_(SD(e),2);const n=this.poolingFunction(SD(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return vh(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class ZM extends YM{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return k_(a),v_(r),KM(e,t,n,r,a,"max")}}ZM.className="MaxPooling1D",Fl.registerClass(ZM);class JM extends YM{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return k_(a),v_(r),KM(e,t,n,r,a,"avg")}}JM.className="AveragePooling1D",Fl.registerClass(JM);class QM extends MD{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new LR(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];n_(this.poolSize,"poolSize"),n_(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,k_(this.dataFormat),v_(this.padding),this.inputSpec=[new RD({ndim:4})]}computeOutputShape(e){e=ID(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=BO(t,this.poolSize[0],this.padding,this.strides[0]),n=BO(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return ep((()=>(this.invokeCallHook(e,t),this.poolingFunction(SD(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class eL extends QM{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return k_(a),v_(r),KM(e,t,n,r,a,"max")}}eL.className="MaxPooling2D",Fl.registerClass(eL);class tL extends QM{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return k_(a),v_(r),KM(e,t,n,r,a,"avg")}}tL.className="AveragePooling2D",Fl.registerClass(tL);class nL extends MD{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new LR(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];n_(this.poolSize,"poolSize"),n_(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,k_(this.dataFormat),v_(this.padding),this.inputSpec=[new RD({ndim:5})]}computeOutputShape(e){e=ID(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=BO(t,this.poolSize[0],this.padding,this.strides[0]),n=BO(n,this.poolSize[1],this.padding,this.strides[1]),r=BO(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return ep((()=>(this.invokeCallHook(e,t),this.poolingFunction(SD(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class rL extends nL{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return k_(a),v_(r),XM(e,t,n,r,a,"max")}}rL.className="MaxPooling3D",Fl.registerClass(rL);class aL extends nL{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return k_(a),v_(r),XM(e,t,n,r,a,"avg")}}aL.className="AveragePooling3D",Fl.registerClass(aL);class sL extends MD{constructor(e){super(e),this.inputSpec=[new RD({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new zR}}class oL extends sL{constructor(e){super(e||{})}call(e,t){return ep((()=>{const t=SD(e);return Rh(t,1)}))}}oL.className="GlobalAveragePooling1D",Fl.registerClass(oL);class iL extends sL{constructor(e){super(e||{})}call(e,t){return ep((()=>{const t=SD(e);return mh(t,1)}))}}iL.className="GlobalMaxPooling1D",Fl.registerClass(iL);class lL extends MD{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,k_(this.dataFormat),this.inputSpec=[new RD({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new zR}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class uL extends lL{call(e,t){return ep((()=>{const t=SD(e);return"channelsLast"===this.dataFormat?Rh(t,[1,2]):Rh(t,[2,3])}))}}uL.className="GlobalAveragePooling2D",Fl.registerClass(uL);class cL extends lL{call(e,t){return ep((()=>{const t=SD(e);return"channelsLast"===this.dataFormat?mh(t,[1,2]):mh(t,[2,3])}))}}cL.className="GlobalMaxPooling2D",Fl.registerClass(cL);class pL extends MD{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=ZD(t.layer,n);delete t.layer;const a={layer:r};return Object.assign(a,t),new e(a)}}class hL extends pL{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=ID(e)).length<3)throw new LR(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=ID(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return ep((()=>oM(((e,n)=>[SD(this.layer.call(e,t)),[]]),e=SD(e),[],!1,null,null,!1,!0)[1]))}}hL.className="TimeDistributed",Fl.registerClass(hL);class dL extends pL{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=ZD(n),t.goBackwards=!0!==t.goBackwards;const r={};var a;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=ZD(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,e_(x_,"BidirectionalMergeMode",a),e.weights)throw new zR("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState?(r=a.slice(1),t=a[0]):t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):UR(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const a=sM(e,n,r,this.numConstants);if(e=a.inputs,n=a.initialState,r=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const s=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new LR("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,s.push(...n);const r=n.map((e=>new RD({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),o.push(...r)}if(null!=r)throw new zR("Support for constants in Bidirectional layers is not implemented yet.");const i=s[0]instanceof _D;for(const e of s)if(e instanceof _D!==i)throw new LR("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(s),r=this.inputSpec.concat(o),a=this.inputSpec;this.inputSpec=r;const i=super.apply(n,t);return this.inputSpec=a,i}return super.apply(e,t)}call(e,t){return ep((()=>{const n=t.initialState;let r,a,s,o;if(null==n)r=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const s=n.slice(0,n.length/2),o=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:s})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(r)&&(s=r.slice(1).concat(a.slice(1))),r=r[0],a=a[0]),this.returnSequences&&(a=gp(a,1)),"concat"===this.mergeMode?o=B_([r,a]):"sum"===this.mergeMode?o=wp(r,a):"ave"===this.mergeMode?o=vu(.5,wp(r,a)):"mul"===this.mergeMode?o=vu(r,a):null==this.mergeMode&&(o=[r,a]),this.returnState?null==this.mergeMode?o.concat(s):[o].concat(s):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){I_(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),I_(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=ZD(t.layer);if(delete t.layer,null!=t.numConstants)throw new zR("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}dL.className="Bidirectional",Fl.registerClass(dL);var fL,mL;ie().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(fL||(fL={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(mL||(mL={}));var gL={};t(gL,"json",(()=>yL));const yL=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var bL={};t(bL,"json",(()=>xL));const xL=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var wL={};t(wL,"json",(()=>kL));const kL=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];var vL={};t(vL,"json",(()=>NL));const NL=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var SL={};t(SL,"json",(()=>IL));const IL=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var TL={};t(TL,"json",(()=>EL));const EL=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var $L={};t($L,"json",(()=>CL));const CL=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var AL={};t(AL,"json",(()=>RL));const RL=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var _L={};t(_L,"json",(()=>DL));const DL=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var FL={};t(FL,"json",(()=>OL));const OL=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];var ML={};t(ML,"json",(()=>LL));const LL=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var zL={};t(zL,"json",(()=>BL));const BL=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var PL={};t(PL,"json",(()=>VL));const VL=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var WL={};t(WL,"json",(()=>UL));const UL=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var GL={};t(GL,"json",(()=>HL));const HL=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var jL={};t(jL,"json",(()=>qL));const qL=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var KL={};t(KL,"json",(()=>XL));const XL=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var YL={};t(YL,"json",(()=>ZL));const ZL=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var JL={};t(JL,"json",(()=>QL));const QL=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var ez={};class tz{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class nz{refCount(e){return rz("refCount")}incRef(e){return rz("incRef")}timerAvailable(){return!0}time(e){return rz("time")}read(e){return rz("read")}readSync(e){return rz("readSync")}readToGPU(e,t){return rz("readToGPU")}numDataIds(){return rz("numDataIds")}disposeData(e,t){return rz("disposeData")}write(e,t,n){return rz("write")}move(e,t,n,r,a){return rz("move")}memory(){return rz("memory")}floatPrecision(){return rz("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return rz("dispose")}}function rz(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var az={};function sz(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,uz(e,t,n)}function oz(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,uz(e,n,r),uz(t,n,r)}function iz(e,t,n){return Math.max(e,Math.min(t,n))}function lz(e){return e%2==0?e:e+1}function uz(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function cz(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function pz(e,t){const n=Math.random();return t*n+(1-n)*e}function hz(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function dz(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function fz(e,t,n=""){dz(xz(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function mz(e){dz(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function gz(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Fz(e)&&!n)for(let r=0;r<e.length;++r)gz(e[r],t,n);else t.push(e);return t}function yz(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function bz(e){return 0===e.length}function xz(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function wz(e){return e%1==0}function kz(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function vz(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function Nz(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return sz(t),t}function Sz(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function Iz(e,t=(e=>0),n,r=setTimeout){return new Promise(((a,s)=>{let o=0;const i=()=>{if(e())return void a();o++;const l=t(o);null!=n&&o>=n?s():r(i,l)};i()}))}function Tz(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function Ez(e,t){const n=t.length;return dz((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),dz(e.every((e=>wz(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function $z(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:Ez(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function Cz(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function Az(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function Rz(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function _z(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Dz(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function Fz(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function Oz(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Mz(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Lz(e){return"string"==typeof e||e instanceof String}function zz(e){return"boolean"==typeof e}function Bz(e){return"number"==typeof e}function Pz(e){return Array.isArray(e)?Pz(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Bz(e)?"float32":Lz(e)?"string":zz(e)?"bool":"float32"}function Vz(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Wz(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Uz(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Gz(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<s;t++)a[t]=Gz(e+t*i,o,n,r)}return a}function Hz(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Gz(0,e,t,n)}function jz(e,t){const n=qz(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function qz(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Kz(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Hz(e,new Float32Array(n));if("int32"===t)return Hz(e,new Int32Array(n));if("bool"===t)return Hz(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Xz(e){e.forEach((t=>{dz(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Yz(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Zz(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Jz(e){return e&&e.then&&"function"==typeof e.then}t(az,"shuffle",(()=>sz)),t(az,"swap",(()=>uz)),t(az,"shuffleCombo",(()=>oz)),t(az,"clamp",(()=>iz)),t(az,"nearestLargerEven",(()=>lz)),t(az,"sum",(()=>cz)),t(az,"randUniform",(()=>pz)),t(az,"distSquared",(()=>hz)),t(az,"assert",(()=>dz)),t(az,"assertShapesMatch",(()=>fz)),t(az,"arraysEqual",(()=>xz)),t(az,"assertNonNull",(()=>mz)),t(az,"flatten",(()=>gz)),t(az,"isTypedArray",(()=>Fz)),t(az,"sizeFromShape",(()=>yz)),t(az,"isScalarShape",(()=>bz)),t(az,"isInt",(()=>wz)),t(az,"tanh",(()=>kz)),t(az,"sizeToSquarishShape",(()=>vz)),t(az,"createShuffledIndices",(()=>Nz)),t(az,"rightPad",(()=>Sz)),t(az,"repeatedTry",(()=>Iz)),t(az,"inferFromImplicitShape",(()=>Tz)),t(az,"parseAxisParam",(()=>Ez)),t(az,"squeezeShape",(()=>$z)),t(az,"getTypedArrayFromDType",(()=>Cz)),t(az,"getArrayFromDType",(()=>Az)),t(az,"checkConversionForErrors",(()=>Rz)),t(az,"isValidDtype",(()=>_z)),t(az,"hasEncodingLoss",(()=>Dz)),t(az,"bytesPerElement",(()=>Oz)),t(az,"bytesFromStringArray",(()=>Mz)),t(az,"isString",(()=>Lz)),t(az,"isBoolean",(()=>zz)),t(az,"isNumber",(()=>Bz)),t(az,"inferDtype",(()=>Pz)),t(az,"isFunction",(()=>Vz)),t(az,"nearestDivisor",(()=>Wz)),t(az,"computeStrides",(()=>Uz)),t(az,"toNestedArray",(()=>Hz)),t(az,"makeOnesTypedArray",(()=>jz)),t(az,"makeZerosTypedArray",(()=>qz)),t(az,"makeZerosNestedTypedArray",(()=>Kz)),t(az,"assertNonNegativeIntegerDimensions",(()=>Xz)),t(az,"locToIndex",(()=>Yz)),t(az,"indexToLoc",(()=>Zz)),t(az,"isPromise",(()=>Jz));const Qz="tfjsflags";class eB{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=tB,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(nB().getBool("IS_TEST")||nB().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];nB().getBool("IS_TEST")||nB().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Jz(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(Qz in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function tB(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function nB(){return aB}let rB,aB=null;function sB(){if(null==rB){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==pe)t=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}rB=t}return rB}function oB(e,t){const n=function(){const e=sB();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}var iB={};t(iB,"Abs",(()=>lB)),t(iB,"Acos",(()=>uB)),t(iB,"Acosh",(()=>cB)),t(iB,"Add",(()=>pB)),t(iB,"AddN",(()=>hB)),t(iB,"All",(()=>dB)),t(iB,"Any",(()=>fB)),t(iB,"ArgMax",(()=>mB)),t(iB,"ArgMin",(()=>gB)),t(iB,"Asin",(()=>yB)),t(iB,"Asinh",(()=>bB)),t(iB,"Atan",(()=>xB)),t(iB,"Atanh",(()=>wB)),t(iB,"Atan2",(()=>kB)),t(iB,"AvgPool",(()=>vB)),t(iB,"AvgPoolGrad",(()=>NB)),t(iB,"AvgPool3D",(()=>SB)),t(iB,"AvgPool3DGrad",(()=>IB)),t(iB,"BatchMatMul",(()=>TB)),t(iB,"BatchToSpaceND",(()=>EB)),t(iB,"Bincount",(()=>$B)),t(iB,"BroadcastTo",(()=>CB)),t(iB,"BroadcastArgs",(()=>AB)),t(iB,"Cast",(()=>RB)),t(iB,"Ceil",(()=>_B)),t(iB,"ClipByValue",(()=>DB)),t(iB,"Complex",(()=>FB)),t(iB,"ComplexAbs",(()=>OB)),t(iB,"Concat",(()=>MB)),t(iB,"Conv2D",(()=>LB)),t(iB,"Conv2DBackpropFilter",(()=>zB)),t(iB,"Conv2DBackpropInput",(()=>BB)),t(iB,"Conv3D",(()=>PB)),t(iB,"Conv3DBackpropFilterV2",(()=>VB)),t(iB,"Conv3DBackpropInputV2",(()=>WB)),t(iB,"Cos",(()=>UB)),t(iB,"Cosh",(()=>GB)),t(iB,"Cumprod",(()=>HB)),t(iB,"Cumsum",(()=>jB)),t(iB,"CropAndResize",(()=>qB)),t(iB,"DenseBincount",(()=>KB)),t(iB,"DepthToSpace",(()=>XB)),t(iB,"DepthwiseConv2dNative",(()=>YB)),t(iB,"DepthwiseConv2dNativeBackpropFilter",(()=>ZB)),t(iB,"DepthwiseConv2dNativeBackpropInput",(()=>JB)),t(iB,"Diag",(()=>QB)),t(iB,"Dilation2D",(()=>eP)),t(iB,"Dilation2DBackpropInput",(()=>tP)),t(iB,"Dilation2DBackpropFilter",(()=>nP)),t(iB,"RealDiv",(()=>rP)),t(iB,"Einsum",(()=>aP)),t(iB,"Elu",(()=>sP)),t(iB,"EluGrad",(()=>oP)),t(iB,"Erf",(()=>iP)),t(iB,"Equal",(()=>lP)),t(iB,"Exp",(()=>uP)),t(iB,"ExpandDims",(()=>cP)),t(iB,"Expm1",(()=>pP)),t(iB,"FFT",(()=>hP)),t(iB,"Fill",(()=>dP)),t(iB,"FlipLeftRight",(()=>fP)),t(iB,"Floor",(()=>mP)),t(iB,"FloorDiv",(()=>gP)),t(iB,"FusedBatchNorm",(()=>yP)),t(iB,"GatherV2",(()=>bP)),t(iB,"GatherNd",(()=>xP)),t(iB,"Greater",(()=>wP)),t(iB,"GreaterEqual",(()=>kP)),t(iB,"Identity",(()=>vP)),t(iB,"IFFT",(()=>NP)),t(iB,"Imag",(()=>SP)),t(iB,"IsFinite",(()=>IP)),t(iB,"IsInf",(()=>TP)),t(iB,"IsNan",(()=>EP)),t(iB,"LeakyRelu",(()=>$P)),t(iB,"Less",(()=>CP)),t(iB,"LessEqual",(()=>AP)),t(iB,"LinSpace",(()=>RP)),t(iB,"Log",(()=>_P)),t(iB,"Log1p",(()=>DP)),t(iB,"LogicalAnd",(()=>FP)),t(iB,"LogicalNot",(()=>OP)),t(iB,"LogicalOr",(()=>MP)),t(iB,"LogicalXor",(()=>LP)),t(iB,"LogSoftmax",(()=>zP)),t(iB,"LowerBound",(()=>BP)),t(iB,"LRN",(()=>PP)),t(iB,"LRNGrad",(()=>VP)),t(iB,"Max",(()=>WP)),t(iB,"Maximum",(()=>UP)),t(iB,"MaxPool",(()=>GP)),t(iB,"MaxPoolGrad",(()=>HP)),t(iB,"MaxPool3D",(()=>jP)),t(iB,"MaxPool3DGrad",(()=>qP)),t(iB,"MaxPoolWithArgmax",(()=>KP)),t(iB,"Mean",(()=>XP)),t(iB,"Min",(()=>YP)),t(iB,"Minimum",(()=>ZP)),t(iB,"MirrorPad",(()=>JP)),t(iB,"Mod",(()=>QP)),t(iB,"Multinomial",(()=>eV)),t(iB,"Multiply",(()=>tV)),t(iB,"Neg",(()=>nV)),t(iB,"NotEqual",(()=>rV)),t(iB,"NonMaxSuppressionV3",(()=>aV)),t(iB,"NonMaxSuppressionV4",(()=>sV)),t(iB,"NonMaxSuppressionV5",(()=>oV)),t(iB,"OnesLike",(()=>iV)),t(iB,"OneHot",(()=>lV)),t(iB,"Pack",(()=>uV)),t(iB,"PadV2",(()=>cV)),t(iB,"Pool",(()=>pV)),t(iB,"Pow",(()=>hV)),t(iB,"Prelu",(()=>dV)),t(iB,"Prod",(()=>fV)),t(iB,"RaggedGather",(()=>mV)),t(iB,"RaggedTensorToTensor",(()=>gV)),t(iB,"Range",(()=>yV)),t(iB,"Real",(()=>bV)),t(iB,"Reciprocal",(()=>xV)),t(iB,"Relu",(()=>wV)),t(iB,"Reshape",(()=>kV)),t(iB,"ResizeNearestNeighbor",(()=>vV)),t(iB,"ResizeNearestNeighborGrad",(()=>NV)),t(iB,"ResizeBilinear",(()=>SV)),t(iB,"ResizeBilinearGrad",(()=>IV)),t(iB,"Relu6",(()=>TV)),t(iB,"Reverse",(()=>EV)),t(iB,"Round",(()=>$V)),t(iB,"Rsqrt",(()=>CV)),t(iB,"ScatterNd",(()=>AV)),t(iB,"SearchSorted",(()=>RV)),t(iB,"Select",(()=>_V)),t(iB,"Selu",(()=>DV)),t(iB,"Slice",(()=>FV)),t(iB,"Sin",(()=>OV)),t(iB,"Sinh",(()=>MV)),t(iB,"Sign",(()=>LV)),t(iB,"Sigmoid",(()=>zV)),t(iB,"Softplus",(()=>BV)),t(iB,"Sqrt",(()=>PV)),t(iB,"Sum",(()=>VV)),t(iB,"SpaceToBatchND",(()=>WV)),t(iB,"SplitV",(()=>UV)),t(iB,"Softmax",(()=>GV)),t(iB,"SparseFillEmptyRows",(()=>HV)),t(iB,"SparseReshape",(()=>jV)),t(iB,"SparseSegmentMean",(()=>qV)),t(iB,"SparseSegmentSum",(()=>KV)),t(iB,"SparseToDense",(()=>XV)),t(iB,"SquaredDifference",(()=>YV)),t(iB,"Square",(()=>ZV)),t(iB,"StridedSlice",(()=>JV)),t(iB,"StringNGrams",(()=>QV)),t(iB,"StringSplit",(()=>eW)),t(iB,"StringToHashBucketFast",(()=>tW)),t(iB,"Sub",(()=>nW)),t(iB,"Tan",(()=>rW)),t(iB,"Tanh",(()=>aW)),t(iB,"Tile",(()=>sW)),t(iB,"TopK",(()=>oW)),t(iB,"Transform",(()=>iW)),t(iB,"Transpose",(()=>lW)),t(iB,"Unique",(()=>uW)),t(iB,"Unpack",(()=>cW)),t(iB,"UnsortedSegmentSum",(()=>pW)),t(iB,"UpperBound",(()=>hW)),t(iB,"ZerosLike",(()=>dW)),t(iB,"Step",(()=>fW)),t(iB,"FromPixels",(()=>mW)),t(iB,"RotateWithOffset",(()=>gW)),t(iB,"_FusedMatMul",(()=>yW)),t(iB,"FusedConv2D",(()=>bW)),t(iB,"FusedDepthwiseConv2D",(()=>xW));const lB="Abs",uB="Acos",cB="Acosh",pB="Add",hB="AddN",dB="All",fB="Any",mB="ArgMax",gB="ArgMin",yB="Asin",bB="Asinh",xB="Atan",wB="Atanh",kB="Atan2",vB="AvgPool",NB="AvgPoolGrad",SB="AvgPool3D",IB="AvgPool3DGrad",TB="BatchMatMul",EB="BatchToSpaceND",$B="Bincount",CB="BroadcastTo",AB="BroadcastArgs",RB="Cast",_B="Ceil",DB="ClipByValue",FB="Complex",OB="ComplexAbs",MB="Concat",LB="Conv2D",zB="Conv2DBackpropFilter",BB="Conv2DBackpropInput",PB="Conv3D",VB="Conv3DBackpropFilterV2",WB="Conv3DBackpropInputV2",UB="Cos",GB="Cosh",HB="Cumprod",jB="Cumsum",qB="CropAndResize",KB="DenseBincount",XB="DepthToSpace",YB="DepthwiseConv2dNative",ZB="DepthwiseConv2dNativeBackpropFilter",JB="DepthwiseConv2dNativeBackpropInput",QB="Diag",eP="Dilation2D",tP="Dilation2DBackpropInput",nP="Dilation2DBackpropFilter",rP="RealDiv",aP="Einsum",sP="Elu",oP="EluGrad",iP="Erf",lP="Equal",uP="Exp",cP="ExpandDims",pP="Expm1",hP="FFT",dP="Fill",fP="FlipLeftRight",mP="Floor",gP="FloorDiv",yP="FusedBatchNorm",bP="GatherV2",xP="GatherNd",wP="Greater",kP="GreaterEqual",vP="Identity",NP="IFFT",SP="Imag",IP="IsFinite",TP="IsInf",EP="IsNan",$P="LeakyRelu",CP="Less",AP="LessEqual",RP="LinSpace",_P="Log",DP="Log1p",FP="LogicalAnd",OP="LogicalNot",MP="LogicalOr",LP="LogicalXor",zP="LogSoftmax",BP="LowerBound",PP="LRN",VP="LRNGrad",WP="Max",UP="Maximum",GP="MaxPool",HP="MaxPoolGrad",jP="MaxPool3D",qP="MaxPool3DGrad",KP="MaxPoolWithArgmax",XP="Mean",YP="Min",ZP="Minimum",JP="MirrorPad",QP="Mod",eV="Multinomial",tV="Multiply",nV="Neg",rV="NotEqual",aV="NonMaxSuppressionV3",sV="NonMaxSuppressionV4",oV="NonMaxSuppressionV5",iV="OnesLike",lV="OneHot",uV="Pack",cV="PadV2",pV="Pool",hV="Pow",dV="Prelu",fV="Prod",mV="RaggedGather",gV="RaggedTensorToTensor",yV="Range",bV="Real",xV="Reciprocal",wV="Relu",kV="Reshape",vV="ResizeNearestNeighbor",NV="ResizeNearestNeighborGrad",SV="ResizeBilinear",IV="ResizeBilinearGrad",TV="Relu6",EV="Reverse",$V="Round",CV="Rsqrt",AV="ScatterNd",RV="SearchSorted",_V="Select",DV="Selu",FV="Slice",OV="Sin",MV="Sinh",LV="Sign",zV="Sigmoid",BV="Softplus",PV="Sqrt",VV="Sum",WV="SpaceToBatchND",UV="SplitV",GV="Softmax",HV="SparseFillEmptyRows",jV="SparseReshape",qV="SparseSegmentMean",KV="SparseSegmentSum",XV="SparseToDense",YV="SquaredDifference",ZV="Square",JV="StridedSlice",QV="StringNGrams",eW="StringSplit",tW="StringToHashBucketFast",nW="Sub",rW="Tan",aW="Tanh",sW="Tile",oW="TopK",iW="Transform",lW="Transpose",uW="Unique",cW="Unpack",pW="UnsortedSegmentSum",hW="UpperBound",dW="ZerosLike",fW="Step",mW="FromPixels",gW="RotateWithOffset",yW="_FusedMatMul",bW="FusedConv2D",xW="FusedDepthwiseConv2D";var wW={};t(wW,"getKernel",(()=>TW)),t(wW,"getGradient",(()=>EW)),t(wW,"getKernelsForBackend",(()=>$W)),t(wW,"registerKernel",(()=>CW)),t(wW,"registerGradient",(()=>AW)),t(wW,"unregisterKernel",(()=>RW)),t(wW,"unregisterGradient",(()=>_W)),t(wW,"copyRegisteredKernels",(()=>DW));var kW={};function vW(...e){nB().getBool("IS_TEST")||nB().getBool("PROD")||console.warn(...e)}function NW(...e){nB().getBool("IS_TEST")||nB().getBool("PROD")||console.log(...e)}t(kW,"warn",(()=>vW)),t(kW,"log",(()=>NW));const SW=oB("kernelRegistry",(()=>new Map)),IW=oB("gradRegistry",(()=>new Map));function TW(e,t){const n=FW(e,t);return SW.get(n)}function EW(e){return IW.get(e)}function $W(e){const t=SW.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function CW(e){const{kernelName:t,backendName:n}=e,r=FW(t,n);SW.has(r)&&vW(`The kernel '${t}' for backend '${n}' is already registered`),SW.set(r,e)}function AW(e){const{kernelName:t}=e;IW.has(t)&&nB().getBool("DEBUG")&&vW(`Overriding the gradient for '${t}'`),IW.set(t,e)}function RW(e,t){const n=FW(e,t);if(!SW.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);SW.delete(n)}function _W(e){if(!IW.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);IW.delete(e)}function DW(e,t){$W(e).forEach((e=>{CW(Object.assign({},e,{backendName:t}))}))}function FW(e,t){return`${t}_${e}`}var OW={};t(OW,"createScalarValue",(()=>YW)),t(OW,"encodeString",(()=>eU)),t(OW,"toTypedArray",(()=>ZW)),t(OW,"now",(()=>JW)),t(OW,"fetch",(()=>QW)),t(OW,"decodeString",(()=>tU));var MW={};t(MW,"hexToLong",(()=>zW)),t(MW,"fingerPrint64",(()=>XW));const LW=Ur.default||Ur;function zW(e){return LW.fromString(e,!0,16)}const BW=zW("c3a5c85c97cb3127"),PW=zW("b492b66fbe98f273"),VW=zW("9ae16a3b2f90404f");function WW(e){return e.xor(e.shru(47))}function UW(e,t,n){const r=e.slice(t,t+n);return LW.fromBytes(Array.from(r),!0,!0)}function GW(e,t){return UW(e,t,8)}function HW(e,t){return UW(e,t,4)}function jW(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function qW(e,t,n=zW("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function KW(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=jW(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(jW(a,44)),[a.add(r),s.add(o)]}(GW(e,t),GW(e,t+8),GW(e,t+16),GW(e,t+24),n,r)}function XW(e,t=e.length){const n=LW.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=VW.add(2*t),r=GW(e,0).add(VW),a=GW(e,t-8);return qW(jW(a,37).mul(n).add(r),jW(r,25).add(a).mul(n),n)}if(t>=4){const n=VW.add(2*t);return qW(HW(e,0).shl(3).add(t),HW(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return WW(VW.mul(n).xor(BW.mul(r))).mul(VW)}return VW}(e,t):function(e,t=e.length){const n=VW.add(2*t),r=GW(e,0).mul(PW),a=GW(e,8),s=GW(e,t-8).mul(n),o=GW(e,t-16).mul(VW);return qW(jW(r.add(a),43).add(jW(s,30)).add(o),r.add(jW(a.add(VW),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=VW.add(2*t),r=GW(e,0).mul(VW),a=GW(e,8),s=GW(e,t-8).mul(n),o=GW(e,t-16).mul(VW),i=jW(r.add(a),43).add(jW(s,30)).add(o),l=qW(i,r.add(jW(a.add(VW),18)).add(s),n),u=GW(e,16).mul(n),c=GW(e,24),p=i.add(GW(e,t-32)).mul(n),h=l.add(GW(e,t-24)).mul(n);return qW(jW(u.add(c),43).add(jW(p,30)).add(h),u.add(jW(c.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(PW).add(113),s=WW(a.mul(VW).add(113)).mul(VW),o=[LW.UZERO,LW.UZERO],i=[LW.UZERO,LW.UZERO];r=r.mul(VW).add(GW(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{r=jW(r.add(a).add(o[0]).add(GW(e,l+8)),37).mul(PW),a=jW(a.add(o[1]).add(GW(e,l+48)),42).mul(PW),r=r.xor(i[1]),a=a.add(o[0]).add(GW(e,l+40)),s=jW(s.add(i[0]),33).mul(PW),o=KW(e,l,o[1].mul(PW),r.add(i[0])),i=KW(e,l+32,s.add(i[1]),a.add(GW(e,l+16))),[s,r]=[r,s],l+=64}while(l!==u);const p=PW.add(s.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=jW(r.add(a).add(o[0]).add(GW(e,l+8)),37).mul(p),a=jW(a.add(o[1]).add(GW(e,l+48)),42).mul(p),r=r.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(GW(e,l+40))),s=jW(s.add(i[0]),33).mul(p),o=KW(e,l,o[1].mul(p),r.add(i[0])),i=KW(e,l+32,s.add(i[1]),a.add(GW(e,l+16))),[s,r]=[r,s],qW(qW(o[0],i[0],p).add(WW(a).mul(BW)).add(s),qW(o[1],i[1],p).add(r),p)}function YW(e,t){return"string"===t?eU(e):ZW([e],t)}function ZW(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=gz(e)),nB().getBool("DEBUG")&&Rz(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function JW(){return nB().platform.now()}function QW(e,t){return nB().platform.fetch(e,t)}function eU(e,t="utf-8"){return t=t||"utf-8",nB().platform.encode(e,t)}function tU(e,t="utf-8"){return t=t||"utf-8",nB().platform.decode(e,t)}n(OW,az),n(OW,MW);class nU{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new aU)}profileKernel(e,t,n){let r;const a=()=>{r=n()};let s;const o=JW();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(a);else{a();for(const e of r)e.dataSync();s=Promise.resolve({kernelMs:JW()-o})}if(nB().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{rU(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function rU(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class aU{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?Sz(`${r}ms`,9):r.error,i=Sz(e,25),l=t.rank,u=t.size,c=Sz(t.shape.toString(),14);let p="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;p+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${p}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function sU(e,t,n,r){const a=Uz(t),s=function(e,t,n,r){const a=yz(t),s=r[r.length-1],o=new Array(s).fill(0),i=t.length,l="complex64"===n?uU(e):e;if(i>1)for(let e=0;e<a/s;e++){const t=e*s;for(let e=0;e<s;e++)o[e]=Math.max(o[e],oU(l[t+e],0,n).length)}return o}(e,t,n,a),o=t.length,i=lU(e,t,n,a,s),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function oU(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Lz(e)?`'${e}'`:"bool"===n?iU(e):parseFloat(e.toFixed(7)).toString(),Sz(r,t)}function iU(e){return 0===e?"false":"true"}function lU(e,t,n,r,a,s=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l){if("complex64"===n){return[oU(uU(e)[0],0,n)]}return"bool"===n?[iU(e[0])]:[e[0].toString()]}if(1===l){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=uU(r),s=uU(s)),["["+r.map(((e,t)=>oU(e,a[t],n))).join(", ")+", ..., "+s.map(((e,t)=>oU(e,a[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?uU(e):Array.from(e)).map(((e,t)=>oU(e,a[t],n))).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,s=r+p;h.push(...lU(e.slice(r,s),u,n,c,a,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,s=r+p;h.push(...lU(e.slice(r,s),u,n,c,a,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,s=r+p;h.push(...lU(e.slice(r,s),u,n,c,a,t===i-1))}const d=2===l?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(s?"":f),h}function uU(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class cU{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=yz(e),null!=n){const e=n.length;dz(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||Az(t,this.size),this.strides=Uz(e)}set(e,...t){0===t.length&&(t=[0]),dz(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return pU().makeTensor(this.values,this.shape,this.dtype)}}let pU=null,hU=null,dU=null;class fU{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=yz(e),this.strides=Uz(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return hU.buffer(this.shape,this.dtype,e)}bufferSync(){return hU.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Hz(this.shape,e,"complex64"===this.dtype)}arraySync(){return Hz(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=pU().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>tU(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),pU().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=pU().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>tU(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await pU().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(pU().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return hU.print(this,e)}clone(){return this.throwIfDisposed(),hU.clone(this)}toString(e=!1){return sU(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),hU.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),pU().makeVariable(this,e,t,n)}}Object.defineProperty(fU,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),oB("Tensor",(()=>fU));class mU extends fU{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!xz(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);pU().disposeTensor(this),this.dataId=e.dataId,pU().incRef(this,null)}dispose(){pU().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(mU,Symbol.hasInstance,{value:e=>e instanceof fU&&null!=e.assign&&e.assign instanceof Function});var gU,yU,bU,xU,wU,kU={};t(kU,"makeTypesMatch",(()=>IU)),t(kU,"assertTypesMatch",(()=>TU)),t(kU,"isTensorInList",(()=>EU)),t(kU,"getTensorsInContainer",(()=>$U)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(gU||(gU={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(yU||(yU={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(bU||(bU={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(xU||(xU={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(wU||(wU={}));const vU={float32:xU,int32:yU,bool:bU,complex64:wU};function NU(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return vU[e][t]}function SU(e){return NU(e,"int32")}function IU(e,t){if(e.dtype===t.dtype)return[e,t];const n=NU(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function TU(e,t){dz(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function EU(e,t){return t.some((t=>t.id===e.id))}function $U(e){const t=[];return CU(e,t,new Set),t}function CU(e,t,n){if(null==e)return;if(e instanceof fU)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const r=a[e];n.has(r)||(n.add(r),CU(r,t,n))}}function AU(e){return null!=e.kernelName}class RU{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class _U{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new RU}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(vW(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new nU(this.backendInstance),!0}setupRegisteredKernels(){$W(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){$W(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof nz||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,vW(`Initialization of backend ${e} failed`),vW(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return vW(`Initialization of backend ${e} failed`),vW(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return _U.nextTensorId++}nextVariableId(){return _U.nextVariableId++}clone(e){const t=FU.runKernel(vP,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return FU.runKernel(RB,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=TW(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=AU(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(AU(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const l=TW(t,this.backendName);dz(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,a,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=AU(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=EW(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(dz(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&Lz(e[0])&&(a=e.map((e=>eU(e))));const s=r.write(a,t,n),o=new fU(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=Mz(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:a}=e,s=new fU(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new mU(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Oz(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof mU||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Oz(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=EW(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=qz(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=$U(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(dz(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));dz(a instanceof fU,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=jz(yz(e),"float32");return FU.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!xz(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),OU);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){return dz(Vz(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;dz(t.every((e=>e instanceof fU)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),dz(n.value instanceof fU,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),dz(Vz(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];dz(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),dz(s.every((e=>e instanceof fU)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=JW(),n=await this.backend.time(e);return n.wallMs=JW()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new RU;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function DU(){const e=sB();if(null==e._tfengine){const t=new eB(e);e._tfengine=new _U(t)}var t;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */return t=e._tfengine.ENV,aB=t,function(e){pU=e}((()=>e._tfengine)),e._tfengine}_U.nextTensorId=0,_U.nextVariableId=0;const FU=DU();function OU(e,t){const n={a:e,b:t};return FU.runKernel(pB,n)}var MU={};let LU;function zU(e){LU=e}function BU(e){if(void 0!==LU)return LU;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function PU(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(MU,"mockIsMobile",(()=>zU)),t(MU,"isMobile",(()=>BU)),t(MU,"isBrowser",(()=>PU));const VU=nB();function WU(e,t){let n=e;if(Fz(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Fz(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&nB().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&UU(e,r,[]),r}function UU(e,t,n){if(n=n||[],!Array.isArray(e)&&!Fz(e))return void dz(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));dz(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),dz(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)UU(e[t],r,n.concat(t))}function GU(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function HU(e,t,n,r="numeric"){if(e instanceof fU)return GU(r,e.dtype,t,n),e;let a=Pz(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),GU(r,a,t,n),null==e||!Fz(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const s=WU(e,a);Fz(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?ZW(e,a):gz(e,[],!0);return FU.makeTensor(o,s,a)}function jU(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>HU(e,`${t}[${a}]`,n,r)))}VU.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),VU.registerFlag("IS_BROWSER",(()=>PU())),VU.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),VU.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),VU.registerFlag("PROD",(()=>!1)),VU.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>VU.getBool("DEBUG"))),VU.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),VU.registerFlag("IS_TEST",(()=>!1)),VU.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),VU.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),VU.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),VU.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),VU.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const qU="__op";function KU(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=qU;const a=(...e)=>{FU.startScope(n);try{const t=r(...e);return Jz(t)&&console.error("Cannot return a Promise inside of tidy."),FU.endScope(t),t}catch(e){throw FU.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const XU=KU({complex_:function(e,t){const n=HU(e,"real","complex"),r=HU(t,"imag","complex");fz(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const a={real:n,imag:r};return FU.runKernel(FB,a)}});function YU(e,t,n,r){if(null==r&&(r=Pz(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Fz(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Xz(t);const e=yz(t),r=yz(n);dz(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],a=e!==n.length-1||r!==yz(t.slice(e));dz(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Fz(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?ZW(e,r):gz(e,[],!0),FU.makeTensor(e,t,r)}function ZU(e,t,n){return YU(e,t,WU(e,n),n)}const JU={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var QU=Fs;async function eG(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:nG(await Promise.all(r)),specs:n}}function tG(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,l=yz(i);let u;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=JU[n.dtype],c=e.slice(a,a+l*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=hG()),u=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];u[e]=Math.round(t*n.scale+n.min)}}a+=l*i}else if("string"===o){const t=yz(s.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));u.push(n),a+=t}}else{const r=JU[o],s=e.slice(a,a+l*r);if("float32"===o)u=new Float32Array(s);else if("int32"===o)u=new Int32Array(s);else if("bool"===o)u=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(s);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const a=ZU(e,i,"float32"),o=ZU(r,i,"float32");n[t]=XU(a,o),a.dispose(),o.dispose()}}a+=l*r}"complex64"!==o&&(n[t]=ZU(u,i,o))}return n}function nG(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const rG=void 0!==QU&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function aG(e){return rG?QU.byteLength(e):new Blob([e]).size}function sG(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function oG(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function iG(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function lG(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function uG(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),lG(e,n,r)}function cG(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:aG(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:aG(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function pG(e){const t=[];for(const n of e)t.push(...n.weights);return t}function hG(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class dG{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==dG.instance&&(dG.instance=new dG),dG.instance}static registerSaveRouter(e){dG.getInstance().saveRouters.push(e)}static registerLoadRouter(e){dG.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return dG.getHandlers(e,"save")}static getLoadHandlers(e,t){return dG.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?dG.getInstance().loadRouters:dG.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const fG=e=>dG.registerSaveRouter(e),mG=e=>dG.registerLoadRouter(e),gG=e=>dG.getSaveHandlers(e),yG=(e,t)=>dG.getLoadHandlers(e,t),bG="tensorflowjs",xG="models_store",wG="model_info_store";function kG(){if(!nB().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function vG(e){const t=e.result;t.createObjectStore(xG,{keyPath:"modelPath"}),t.createObjectStore(wG,{keyPath:"modelPath"})}class NG{constructor(e){if(this.indexedDB=kG(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(bG,1);r.onupgradeneeded=()=>vG(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(xG,"readonly"),r=t.objectStore(xG).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=cG(t),s=a.transaction(wG,"readwrite");let o=s.objectStore(wG);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;i.onsuccess=()=>{l=a.transaction(xG,"readwrite");const i=l.objectStore(xG).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(wG);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}NG.URL_SCHEME="indexeddb://";const SG=e=>{return nB().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(NG.URL_SCHEME)?(t=e.slice(NG.URL_SCHEME.length),new NG(t)):null;var t};dG.registerSaveRouter(SG),dG.registerLoadRouter(SG);class IG{constructor(){this.indexedDB=kG()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(bG,1);n.onupgradeneeded=()=>vG(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(wG,"readonly"),s=a.objectStore(wG).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(NG.URL_SCHEME)?t.slice(NG.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(bG,1);r.onupgradeneeded=()=>vG(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(wG,"readwrite"),o=s.objectStore(wG),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{l=a.transaction(xG,"readwrite");const r=l.objectStore(xG).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const TG="/",EG="tensorflowjs_models",$G="info",CG="model_topology",AG="weight_specs",RG="weight_data",_G="model_metadata";function DG(e){return{info:[EG,e,$G].join(TG),topology:[EG,e,CG].join(TG),weightSpecs:[EG,e,AG].join(TG),weightData:[EG,e,RG].join(TG),modelMetadata:[EG,e,_G].join(TG)}}function FG(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function OG(e){const t=e.split(TG);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(TG)}class MG{constructor(e){if(!nB().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=DG(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=cG(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(rG)return QU.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw FG(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(rG){const t=QU.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}MG.URL_SCHEME="localstorage://";const LG=e=>{return nB().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(MG.URL_SCHEME)?(t=e.slice(MG.URL_SCHEME.length),new MG(t)):null;var t};dG.registerSaveRouter(LG),dG.registerLoadRouter(LG);class zG{constructor(){dz(nB().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),dz("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=EG+TG,n=TG+$G;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){e[OG(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;const n=DG(e=(t=e).startsWith(MG.URL_SCHEME)?t.slice(MG.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return FG(n),r}}const BG="://";class PG{constructor(){this.managers={}}static getInstance(){return null==PG.instance&&(PG.instance=new PG),PG.instance}static registerManager(e,t){dz(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(BG)&&(e=e.slice(0,e.indexOf(BG))),dz(e.length>0,(()=>"scheme must not be an empty string."));const n=PG.getInstance();dz(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=PG.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(PG.getInstance().managers)}}function VG(e){if(-1===e.indexOf(BG))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${PG.getSchemes().join(",")}`);return{scheme:e.split(BG)[0],path:e.split(BG)[1]}}async function WG(e,t,n=!1){dz(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=dG.getLoadHandlers(e);dz(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),dz(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=dG.getSaveHandlers(t);dz(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),dz(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],i=VG(e).scheme,l=VG(e).path,u=i===VG(e).scheme,c=await a.load();n&&u&&await PG.getManager(i).removeModel(l);const p=await o.save(c);return n&&!u&&await PG.getManager(i).removeModel(l),p.modelArtifactsInfo}async function UG(){const e=PG.getSchemes(),t={};for(const n of e){const e=await PG.getManager(n).listModels();for(const r in e){t[n+BG+r]=e[r]}}return t}async function GG(e){const t=VG(e);return PG.getManager(t.scheme).removeModel(t.path)}async function HG(e,t){return WG(e,t,!1)}async function jG(e,t){return WG(e,t,!0)}class qG{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&nB().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(nB().get("IS_BROWSER")){nB().setPlatform("browser",new qG);try{PG.registerManager(MG.URL_SCHEME,new zG)}catch(e){}try{PG.registerManager(NG.URL_SCHEME,new IG)}catch(e){}}const KG=()=>s("foUwZ");let XG;function YG(e,t="float32",n){return t=t||"float32",Xz(e),new cU(e,t,n)}nB().get("IS_NODE")&&!nB().get("IS_BROWSER")&&nB().setPlatform("node",new class{constructor(){this.util=s("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=nB().global.fetch?nB().global.fetch(e,t):(null==XG&&(XG=KG()),XG(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const ZG=KU({cast_:function(e,t){const n=HU(e,"x","cast");if(!_z(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},a={dtype:t};return FU.runKernel(RB,r,a)}});const JG=KU({clone_:function(e){const t={x:HU(e,"x","clone","string_or_numeric")};return FU.runKernel(vP,t)}});function QG(e,t=!1){console.log(e.toString(t))}DU();!function(e){hU=e}({buffer:YG,cast:ZG,clone:JG,print:QG});var eH={};t(eH,"AdadeltaOptimizer",(()=>p0)),t(eH,"AdagradOptimizer",(()=>h0)),t(eH,"AdamOptimizer",(()=>d0)),t(eH,"AdamaxOptimizer",(()=>f0)),t(eH,"MomentumOptimizer",(()=>g0)),t(eH,"Optimizer",(()=>c0)),t(eH,"OptimizerConstructors",(()=>b0)),t(eH,"RMSPropOptimizer",(()=>y0)),t(eH,"SGDOptimizer",(()=>m0)),t(eH,"Tensor",(()=>fU)),t(eH,"TensorBuffer",(()=>cU)),t(eH,"Variable",(()=>mU)),t(eH,"Rank",(()=>gU)),t(eH,"sumOutType",(()=>SU)),t(eH,"upcastType",(()=>NU)),t(eH,"Reduction",(()=>jY)),t(eH,"customGrad",(()=>OX)),t(eH,"grad",(()=>AX)),t(eH,"grads",(()=>RX)),t(eH,"valueAndGrad",(()=>_X)),t(eH,"valueAndGrads",(()=>DX)),t(eH,"variableGrads",(()=>FX)),t(eH,"Environment",(()=>eB)),t(eH,"env",(()=>nB)),t(eH,"ENV",(()=>aB)),t(eH,"version_core",(()=>Qj)),t(eH,"nextFrame",(()=>v0)),t(eH,"browser",(()=>rj)),t(eH,"io",(()=>tH)),t(eH,"math",(()=>vH)),t(eH,"serialization",(()=>Oj)),t(eH,"test_util",(()=>Bj)),t(eH,"util",(()=>OW)),t(eH,"backend_util",(()=>eq)),t(eH,"broadcast_util",(()=>QH)),t(eH,"tensor_util",(()=>kU)),t(eH,"slice_util",(()=>yj)),t(eH,"gather_util",(()=>pj)),t(eH,"scatter_util",(()=>dj)),t(eH,"device_util",(()=>MU)),t(eH,"kernel_impls",(()=>rX)),t(eH,"KernelBackend",(()=>nz)),t(eH,"DataStorage",(()=>tz));var tH={};t(tH,"copyModel",(()=>HG)),t(tH,"listModels",(()=>UG)),t(tH,"moveModel",(()=>jG)),t(tH,"removeModel",(()=>GG)),t(tH,"browserFiles",(()=>sH)),t(tH,"browserHTTPRequest",(()=>fH)),t(tH,"concatenateArrayBuffers",(()=>sG)),t(tH,"decodeWeights",(()=>tG)),t(tH,"encodeWeights",(()=>eG)),t(tH,"fromMemory",(()=>bH)),t(tH,"fromMemorySync",(()=>xH)),t(tH,"getLoadHandlers",(()=>yG)),t(tH,"getModelArtifactsForJSON",(()=>uG)),t(tH,"getModelArtifactsForJSONSync",(()=>lG)),t(tH,"getModelArtifactsInfoForJSON",(()=>cG)),t(tH,"getSaveHandlers",(()=>gG)),t(tH,"getWeightSpecs",(()=>pG)),t(tH,"http",(()=>dH)),t(tH,"isHTTPScheme",(()=>pH)),t(tH,"loadWeights",(()=>lH)),t(tH,"registerLoadRouter",(()=>mG)),t(tH,"registerSaveRouter",(()=>fG)),t(tH,"weightsLoaderFactory",(()=>uH)),t(tH,"withSaveHandler",(()=>wH)),t(tH,"withSaveHandlerSync",(()=>kH));function nH(e){return new Promise((e=>setTimeout(e))).then(e)}class rH{constructor(e){if(!nB().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(rH.URL_SCHEME)&&(e=e.slice(rH.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=iG(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await nH((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await nH((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:cG(e)}}}}rH.URL_SCHEME="downloads://";class aH{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=uG(r,(e=>this.loadWeights(e)));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(a).then((e=>[t,sG(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>oG(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=oG(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function sH(e){return new aH(e)}function oH(e,t,n,r){var a,s,o;dz(null!=(a=e)&&Array.isArray(a)&&a.length>0,(()=>"promises must be a none empty array")),o=r=null==r?1:r,dz((s=n=null==n?0:n)>=0&&s<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${s}`)),dz(o>=0&&o<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${o}`)),dz(o>=s,(()=>`startFraction must be no more than endFraction, but got startFraction ${s} and endFraction ${o}`));let i=0;return Promise.all(e.map((a=>(a.then((a=>{const s=n+ ++i/e.length*(r-n);return t(s),a})),a))))}async function iH(e,t){null==t&&(t={});const n=null==t.fetchFunc?nB().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await oH(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await oH(a,t.onProgress,.5,1)}async function lH(e,t="",n,r){return uH((e=>iH(e,{requestInit:r})))(e,t,n)}function uH(e){return async(t,n="",r)=>{const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=JU[l]*yz(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let h=0;return l.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=tG(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}dG.registerSaveRouter((e=>nB().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(rH.URL_SCHEME)?function(e="model"){return new rH(e)}(e.slice(rH.URL_SCHEME.length)):null));class cH{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(dz("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=nB().platform.fetch,dz(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&dz(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=iG(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:cG(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return uG(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=pG(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[s,sG(await iH(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function pH(e){return null!=e.match(cH.URL_SCHEME_REGEX)}cH.URL_SCHEME_REGEX=/^https?:\/\//;const hH=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>pH(e))):pH(e),n)return dH(e,t)}return null};function dH(e,t){return new cH(e,t)}function fH(e,t){return dH(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */dG.registerSaveRouter(hH),dG.registerLoadRouter(hH);class mH{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class gH{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class yH{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function bH(e,t,n,r){const a=arguments;return new yH(xH(...a))}function xH(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new mH(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mH({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mH({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function wH(e){return new gH(e)}function kH(e){return new gH(e)}var vH={};t(vH,"confusionMatrix",(()=>JH));const NH=KU({matMul_:function(e,t,n=!1,r=!1){let a=HU(e,"a","matMul"),s=HU(t,"b","matMul");[a,s]=IU(a,s);const o={a:a,b:s},i={transposeA:n,transposeB:r};return FU.runKernel(TB,o,i)}});const SH=KU({oneHot_:function(e,t,n=1,r=0,a="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:HU(e,"indices","oneHot","int32")},o={dtype:a,depth:t,onValue:n,offValue:r};return FU.runKernel(lV,s,o)}});var IH={};t(IH,"transpose",(()=>ZH));var TH={};function EH(){nB().set("PROD",!0)}function $H(){nB().set("DEBUG",!0)}function CH(){nB().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function AH(e){nB().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function RH(){FU.disposeVariables()}function _H(){return FU}function DH(){return FU.memory()}function FH(e){return FU.profile(e)}function OH(e,t){return FU.tidy(e,t)}function MH(e){$U(e).forEach((e=>e.dispose()))}function LH(e){return FU.keep(e)}function zH(e){return FU.time(e)}function BH(e){return FU.setBackend(e)}function PH(){return FU.ready()}function VH(){return FU.backendName}function WH(e){FU.removeBackend(e)}function UH(e){return FU.findBackend(e)}function GH(e){return FU.findBackendFactory(e)}function HH(e,t,n=1){return FU.registerBackend(e,t,n)}function jH(){return FU.backend}function qH(e,t){nB().setPlatform(e,t)}t(TH,"enableProdMode",(()=>EH)),t(TH,"enableDebugMode",(()=>$H)),t(TH,"disableDeprecationWarnings",(()=>CH)),t(TH,"deprecationWarn",(()=>AH)),t(TH,"disposeVariables",(()=>RH)),t(TH,"engine",(()=>_H)),t(TH,"memory",(()=>DH)),t(TH,"profile",(()=>FH)),t(TH,"tidy",(()=>OH)),t(TH,"dispose",(()=>MH)),t(TH,"keep",(()=>LH)),t(TH,"time",(()=>zH)),t(TH,"setBackend",(()=>BH)),t(TH,"ready",(()=>PH)),t(TH,"getBackend",(()=>VH)),t(TH,"removeBackend",(()=>WH)),t(TH,"findBackend",(()=>UH)),t(TH,"findBackendFactory",(()=>GH)),t(TH,"registerBackend",(()=>HH)),t(TH,"backend",(()=>jH)),t(TH,"setPlatform",(()=>qH)),function(e){dU=e}(AH);const KH=KU({imag_:function(e){const t={input:HU(e,"input","imag")};return FU.runKernel(SP,t)}});const XH=KU({neg_:function(e){const t={x:HU(e,"x","neg")};return FU.runKernel(nV,t)}});const YH=KU({real_:function(e){const t={input:HU(e,"input","real")};return FU.runKernel(bV,t)}});const ZH=KU({transpose_:function(e,t,n){const r=HU(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),dz(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{dz(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const a={x:r},s={perm:t};return"complex64"===r.dtype?OH((()=>{let e=YH(r),t=KH(r);return e=FU.runKernel(lW,{x:e},s),t=FU.runKernel(lW,{x:t},s),n&&(t=XH(t)),XU(e,t)})):FU.runKernel(lW,a,s)}});const JH=KU({confusionMatrix_:function(e,t,n){const r=HU(e,"labels","confusionMatrix"),a=HU(t,"predictions","confusionMatrix");dz(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),dz(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),dz(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),dz(r.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),dz(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=SH(ZG(r,"int32"),n),o=SH(ZG(a,"int32"),n),i=ZH(s),l=NH(i,o);return ZG(l,"int32")}});var QH={};function ej(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function tj(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function nj(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}t(QH,"getBroadcastDims",(()=>ej)),t(QH,"getReductionAxes",(()=>tj)),t(QH,"assertAndGetBroadcastShape",(()=>nj));var rj={};function aj(e,t,n){if(mz(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=WU(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return YU(e,t,r,n)}let sj;function oj(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=TW(mW,FU.backendName)){const n={pixels:e},r={numChannels:t};return FU.runKernel(mW,n,r)}const[l,u]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(r||n)c=e.data;else if(s||a||i){if(null==sj)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");sj=new OffscreenCanvas(1,1).getContext("2d")}else sj=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});sj.canvas.width=l,sj.canvas.height=u,sj.drawImage(e,0,0,l,u),c=sj.getImageData(0,0,l,u).data}if(4===t)p=new Int32Array(c);else{const e=l*u;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return aj(p,[u,l,t],"int32")}function ij(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function lj(e,t=3){let n=null;if(nB().getBool("WRAP_TO_IMAGEBITMAP")&&ij(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return oj(n,t)}async function uj(e,t){let n=HU(e,"img","toPixels");if(!(e instanceof fU)){const e=n;n=ZG(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,l=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(rj,"fromPixelsAsync",(()=>lj)),t(rj,"toPixels",(()=>uj)),t(rj,"fromPixels",(()=>cj));const cj=KU({fromPixels_:oj});var pj={};function hj(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===yz(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,l=a.slice();l.pop();let u=1;for(let e=s;e<n;++e)u*=i[e],l.push(i[e]);const c=[...Uz(e.shape).map((e=>e/u)),1].slice(0,s);return[l,o,u,c]}t(pj,"prepareAndValidate",(()=>hj));var dj={};function fj(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function mj(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}fj(n,t,e)}function gj(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length;let o=1;for(let e=a;e<s;++e)o*=n[e];const i=a<1?1:a;return{sliceRank:a,numUpdates:yz(t.shape)/i,sliceSize:o,strides:[...Uz(n.slice(0,a)),1],outputSize:yz(n)}}t(dj,"validateUpdateShape",(()=>fj)),t(dj,"validateInput",(()=>mj)),t(dj,"calculateShapes",(()=>gj));var yj={};t(yj,"assertParamsValid",(()=>bj)),t(yj,"maskToAxes",(()=>xj)),t(yj,"computeOutShape",(()=>wj)),t(yj,"stridesWithElidedDims",(()=>kj)),t(yj,"getNormalizedAxes",(()=>Sj)),t(yj,"startIndicesWithElidedDims",(()=>Ij)),t(yj,"stopIndicesWithElidedDims",(()=>Tj)),t(yj,"startForAxis",(()=>$j)),t(yj,"stopForAxis",(()=>Cj)),t(yj,"stridesForAxis",(()=>Ej)),t(yj,"isSliceContinous",(()=>Aj)),t(yj,"computeFlatOffset",(()=>Rj)),t(yj,"parseSliceParams",(()=>_j)),t(yj,"sliceInfo",(()=>Dj));function bj(e,t,n){const r=e.shape.length;dz(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),dz(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)dz(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function xj(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function wj(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function kj(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function vj(e,t,n){return n<=e?n:n-(t-1)}function Nj(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Sj(e,t,n,r,a,s,o,i,l){const u=e.length;let c=new Array(u),p=new Array(u),h=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Ij(o,l,u,r,e),p=Tj(i,l,u,a,e),h=kj(s,l,u,e)}else for(let t=0;t<u;t++)c[t]=$j(o,r,s,e,t,l),p[t]=Cj(i,a,s,e,t,l),h[t]=Ej(s,t,l);return{begin:c,end:p,strides:h}}function Ij(e,t,n,r,a){const s=[...a],o=Nj(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=vj(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function Tj(e,t,n,r,a){const s=[...a],o=Nj(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{const o=vj(t,n,a);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),s[a]=i}for(let e=0;e<s.length;e++){const t=a[e];s[e]<0&&(s[e]+=t),s[e]=iz(0,s[e],a[e])}return s}function Ej(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function $j(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[a];return o<0&&(o+=l),o=iz(0,o,l-1),o}function Cj(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[a];return o<0&&(o+=l),o=i>0?iz(0,o,l):iz(-1,o,l-1),o}function Aj(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function Rj(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function _j(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{dz(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(dz(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,s]}function Dj(e,t,n,r,a,s,o,i,l){let u;if(null==r?(u=new Array(t.length),u.fill(1)):u=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const a=[h.beginMask&1<<t,h.endMask&1<<t],s=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=Fj(h.begin[t],0,h.strides[t],r,a,s),h.end[t]=Fj(h.end[t],1,h.strides[t],r,a,s);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,l=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],l=!0):n?(i=1,l=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,l=!0),l){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==h.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function Fj(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}var Oj={};t(Oj,"Serializable",(()=>Mj)),t(Oj,"SerializationMap",(()=>Lj)),t(Oj,"registerClass",(()=>zj));class Mj{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Lj{constructor(){this.classNameMap={}}static getMap(){return null==Lj.instance&&(Lj.instance=new Lj),Lj.instance}static register(e){Lj.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function zj(e){dz(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),dz("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),dz(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Lj.register(e)}var Bj={};t(Bj,"TEST_EPSILON_FLOAT16",(()=>Pj)),t(Bj,"expectArraysClose",(()=>Vj)),t(Bj,"testEpsilon",(()=>Wj)),t(Bj,"expectPromiseToFail",(()=>Gj)),t(Bj,"expectArraysEqual",(()=>Hj)),t(Bj,"expectNumbersClose",(()=>jj)),t(Bj,"expectValuesInRange",(()=>Kj)),t(Bj,"expectArrayBuffersEqual",(()=>Xj)),t(Bj,"encodeStrings",(()=>Yj)),t(Bj,"createVideoElement",(()=>Zj)),t(Bj,"play",(()=>Jj));const Pj=.1;function Vj(e,t,n){return null==n&&(n=Wj()),Uj(e,t,((e,t)=>qj(e,t,n)))}function Wj(){return 32===FU.backend.floatPrecision()?.001:Pj}function Uj(e,t,n){let r=!0;if((Fz(e)||Fz(t))&&(r=!1),Fz(e)&&Fz(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=WU(e),r=WU(t);if(!xz(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const a=Fz(e)?e:gz(e),s=Fz(t)?t:gz(t);if(a.length!==s.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.\nActual:   ${a}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=a[e],r=s[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${a}.\nExpected: ${s}.`)}"undefined"!=typeof expect&&expect().nothing()}function Gj(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function Hj(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Lz(e)||Lz(e[0])||Lz(t)||Lz(t[0])?Uj(e,n,((e,t)=>e==t)):Uj(e,t,((e,t)=>qj(e,t,0)))}function jj(e,t,n){if(null==n&&(n=Wj()),!qj(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function qj(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Kj(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function Xj(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let e=0;e<r.length;e++)if(n[e]!==r[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${r[e]} but got ${n[e]} instead`)}function Yj(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Yj(n):e[t]=eU(n)}return e}function Zj(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function Jj(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}
/** @license See the LICENSE file. */const Qj="3.21.0";var eq={};t(eq,"fromUint8ToStringArray",(()=>tX)),t(eq,"fromStringArrayToUint8",(()=>nX)),t(eq,"slice_util",(()=>yj)),t(eq,"upcastType",(()=>NU)),t(eq,"segment_util",(()=>tq));var tq={};t(tq,"segOpComputeOptimalWindowSize",(()=>sq)),t(tq,"computeOutShape",(()=>oq)),t(tq,"collectGatherOpShapeInfo",(()=>iq));var nq={};t(nq,"PARALLELIZE_THRESHOLD",(()=>rq)),t(nq,"computeOptimalWindowSize",(()=>aq));const rq=30;function aq(e){return e<=rq?e:Wz(e,Math.floor(Math.sqrt(e)))}function sq(e,t){let n,r=!1;for(e<=rq?(n=e,r=!0):n=Wz(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Wz(e,n+1);return n}function oq(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function iq(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}var lq={};function uq(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function cq(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function pq(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function hq(e,t){return cq(e,t.map((e=>1)),t)}function dq(e,t,n){dz(uq(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function fq(e,t){if(uq(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function mq(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function gq(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}t(lq,"axesAreInnerMostDims",(()=>uq)),t(lq,"combineLocations",(()=>cq)),t(lq,"computeOutAndReduceShapes",(()=>pq)),t(lq,"expandShapeToKeepDim",(()=>hq)),t(lq,"assertAxesAreInnerMostDims",(()=>dq)),t(lq,"getAxesPermutation",(()=>fq)),t(lq,"getUndoAxesPermutation",(()=>mq)),t(lq,"getInnerMostAxes",(()=>gq));var yq={};function bq(e,t){const n=e[0].length;e.forEach(((e,t)=>{dz(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),dz(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)dz(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function xq(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}t(yq,"assertParamsConsistent",(()=>bq)),t(yq,"computeOutShape",(()=>xq));var wq={};function kq(e,t,n,r,a="NHWC",s){return Sq(e,[...t,e[3]],n,s,r,null,null,Dq(a))}function vq(e,t,n,r,a,s,o="channelsLast"){const[i,l]=Eq(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return Sq(e,u,n,r,a,s,!1,o)}function Nq(e,t,n,r,a,s,o="NDHWC"){const[i,l,u]=$q(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,l,u,e[1],e[1]]}return Iq(e,c,n,r,a,!1,p,s)}function Sq(e,t,n,r,a,s,o=!1,i="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c]=e}const[h,d,,f]=t,[m,g]=Eq(n),[y,b]=Eq(r),x=Cq(h,y),w=Cq(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,r,a,s,o,i,l){let u,c,p;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=Tq(e,t,n));const s=e[0],o=e[1],i=Aq((s-t+2*r)/n+1,a),l=Aq((o-t+2*r)/n+1,a);return[i,l]}([t,n],s,r,e,i);c=a[0],p=a[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/a);const e=Math.max(0,(c-1)*r+s-t),i=Math.max(0,(p-1)*a+o-n),l=Math.floor(e/2),h=e-l,d=Math.floor(i/2);u={top:l,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/r),p=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Aq((t-s+h+d)/r+1,i),p=Aq((n-o+f+m)/a+1,i)}}return{padInfo:u,outHeight:c,outWidth:p}}(a,u,c,m,g,x,w,s,i),S=o?f*p:f;let I;return"channelsFirst"===i?I=[l,S,v,N]:"channelsLast"===i&&(I=[l,v,N,S]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:p,outHeight:v,outWidth:N,outChannels:S,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function Iq(e,t,n,r,a,s=!1,o="channelsLast",i){let[l,u,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c,p]=e}const[d,f,m,,g]=t,[y,b,x]=$q(n),[w,k,v]=$q(r),N=Cq(d,w),S=Cq(f,k),I=Cq(m,v),{padInfo:T,outDepth:E,outHeight:$,outWidth:C}=function(e,t,n,r,a,s,o,i,l,u,c){let p,h,d,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=Tq(e,t,r));const o=e[0],i=e[1],l=e[2],u=Aq((o-t+2*a)/r+1,s),c=Aq((i-t+2*a)/r+1,s),p=Aq((l-t+2*a)/r+1,s);return[u,c,p,n]}([t,n,r,1],i,1,a,e,c);h=s[0],d=s[1],f=s[2]}else if("same"===e){h=Math.ceil(t/a),d=Math.ceil(n/s),f=Math.ceil(r/o);const e=(h-1)*a+i-t,c=(d-1)*s+l-n,m=(f-1)*o+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);p={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/a),d=Math.ceil((n-l+1)/s),f=Math.ceil((r-u+1)/o)}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(a,u,c,p,y,b,x,N,S,I,i),A=s?g*h:g;let R;return"channelsFirst"===o?R=[l,A,E,$,C]:"channelsLast"===o&&(R=[l,E,$,C,A]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:p,inChannels:h,outDepth:E,outHeight:$,outWidth:C,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Tq(e,t,n,r=1){const a=Cq(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function Eq(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function $q(e){return"number"==typeof e?[e,e,e]:e}function Cq(e,t){return t<=1?e:e+(e-1)*(t-1)}function Aq(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Rq(e){const[t,n,r]=Eq(e);return 1===t&&1===n&&1===r}function _q(e,t){return Rq(e)||Rq(t)}function Dq(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Fq(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)dz(wz(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{dz(wz(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(wq,"computeDilation2DInfo",(()=>kq)),t(wq,"convertConv2DDataFormat",(()=>Dq)),t(wq,"computeConv2DInfo",(()=>Sq)),t(wq,"computePool2DInfo",(()=>vq)),t(wq,"computePool3DInfo",(()=>Nq)),t(wq,"computeConv3DInfo",(()=>Iq)),t(wq,"computeDefaultPad",(()=>Tq)),t(wq,"tupleValuesAreOne",(()=>Rq)),t(wq,"eitherStridesOrDilationsAreOne",(()=>_q)),t(wq,"checkPadOnDimRoundingMode",(()=>Fq));var Oq={};t(Oq,"getFusedDyActivation",(()=>jq)),t(Oq,"getFusedBiasGradient",(()=>qq)),t(Oq,"applyActivation",(()=>Kq)),t(Oq,"shouldFuse",(()=>Xq));const Mq=KU({elu_:function(e){const t={x:HU(e,"x","elu","float32")};return FU.runKernel(sP,t)}});const Lq=KU({leakyRelu_:function(e,t=.2){const n={x:HU(e,"x","leakyRelu")},r={alpha:t};return FU.runKernel($P,n,r)}});const zq=KU({mul_:function(e,t){let n=HU(e,"a","mul"),r=HU(t,"b","mul");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(tV,a)}});const Bq=KU({prelu_:function(e,t){const n={x:HU(e,"x","prelu"),alpha:HU(t,"alpha","prelu")};return FU.runKernel(dV,n)}});const Pq=KU({relu_:function(e){const t={x:HU(e,"x","relu")};return FU.runKernel(wV,t)}});const Vq=KU({relu6_:function(e){const t={x:HU(e,"x","relu6")};return FU.runKernel(TV,t)}});const Wq=KU({reshape_:function(e,t){const n={x:HU(e,"x","reshape","string_or_numeric")},r={shape:t};return FU.runKernel(kV,n,r)}});const Uq=KU({sigmoid_:function(e){const t={x:HU(e,"x","sigmoid","float32")};return FU.runKernel(zV,t)}});const Gq=KU({step_:function(e,t=0){const n={x:HU(e,"x","step")},r={alpha:t};return FU.runKernel(fW,n,r)}});const Hq=KU({sum_:function(e,t=null,n=!1){let r=HU(e,"x","sum");"bool"===r.dtype&&(r=ZG(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return FU.runKernel(VV,a,s)}});function jq(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return zq(e,Gq(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function qq(e,t){let n=t;const r=tj(e.shape,t.shape);return r.length>0&&(n=Hq(n,r)),Wq(n,e.shape)}function Kq(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Pq(e);if("elu"===t)return Mq(e);if("relu6"===t)return Vq(e);if("prelu"===t)return Bq(e,n);if("leakyrelu"===t)return Lq(e,r);if("sigmoid"===t)return Uq(e);throw new Error(`Unknown fused activation ${t}.`)}const Xq=(e,t)=>!(e>0)||"linear"===t;var Yq,Zq={};function Jq(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let a=1;a<n.length;++a){const s=n[a],o=r[r.length-n.length+a],i=r[o];if(s>=0)if(i>=0){if(i!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${s} but shape[${a+e}] = ${i}`)}else r[o]=s}return r}function Qq(e){const t={FIRST_DIM_SIZE:Yq.FIRST_DIM_SIZE,VALUE_ROWIDS:Yq.VALUE_ROWIDS,ROW_LENGTHS:Yq.ROW_LENGTHS,ROW_SPLITS:Yq.ROW_SPLITS,ROW_LIMITS:Yq.ROW_LIMITS,ROW_STARTS:Yq.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function eK(e){return 0===e.length?0:e[0]===Yq.FIRST_DIM_SIZE?e.length-1:e.length}function tK(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let a=0;a<Math.min(n,r-1);++a){const n=e[a],r=t[a+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${r}`)}}t(Zq,"RowPartitionType",(()=>Yq)),t(Zq,"combineRaggedTensorToTensorShapes",(()=>Jq)),t(Zq,"getRowPartitionTypesHelper",(()=>Qq)),t(Zq,"getRaggedRank",(()=>eK)),t(Zq,"validateDefaultValueShape",(()=>tK)),function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Yq||(Yq={}));var nK={};function rK(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(nK,"getImageCenter",(()=>rK));var aK={};function sK(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function oK(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function iK(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function lK(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function uK(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}t(aK,"getReshaped",(()=>sK)),t(aK,"getPermuted",(()=>oK)),t(aK,"getReshapedPermuted",(()=>iK)),t(aK,"getSliceBeginCoords",(()=>lK)),t(aK,"getSliceSize",(()=>uK));var cK={};t(cK,"SELU_SCALEALPHA",(()=>pK)),t(cK,"SELU_SCALE",(()=>hK));const pK=1.7580993408473768,hK=1.0507009873554805;var dK={};t(dK,"ERF_P",(()=>fK)),t(dK,"ERF_A1",(()=>mK)),t(dK,"ERF_A2",(()=>gK)),t(dK,"ERF_A3",(()=>yK)),t(dK,"ERF_A4",(()=>bK)),t(dK,"ERF_A5",(()=>xK));const fK=.3275911,mK=.254829592,gK=-.284496736,yK=1.421413741,bK=-1.453152027,xK=1.061405429;var wK={};function kK(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function vK(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function NK(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function SK(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function IK(e,t){return{real:e[2*t],imag:e[2*t+1]}}function TK(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function EK(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function $K(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}t(wK,"mergeRealAndImagArrays",(()=>kK)),t(wK,"splitRealAndImagArrays",(()=>vK)),t(wK,"complexWithEvenIndex",(()=>NK)),t(wK,"complexWithOddIndex",(()=>SK)),t(wK,"getComplexWithIndex",(()=>IK)),t(wK,"assignToTypedArray",(()=>TK)),t(wK,"exponents",(()=>EK)),t(wK,"exponent",(()=>$K));var CK={};t(CK,"decodeEinsumEquation",(()=>_K)),t(CK,"getEinsumPermutation",(()=>DK)),t(CK,"checkEinsumDimSizes",(()=>FK)),t(CK,"getEinsumComputePath",(()=>OK)),t(CK,"isIdentityPermutation",(()=>MK));const AK="->",RK=/->/g;function _K(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(RK,"").length)/AK.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split(AK);dz(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const l=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<s[e].length;++t)l[e].push(i.indexOf(s[e][t]))}const u=i.length,c=[];for(let e=a.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function DK(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function FK(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:dz(r[t[e][n]]===a[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function OK(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=LK(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}}function MK(e){return e.every(((e,t)=>e===t))}function LK(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var zK={};function BK(e,t,n=0){let r=[];if("number"==typeof t)dz(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{dz(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const r=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-r}dz(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}t(zK,"prepareSplitSize",(()=>BK));var PK={};function VK(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function WK(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function UK(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(PK,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>VK)),t(PK,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>WK)),t(PK,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>UK));var GK={};function HK(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function jK(e,t){return`size ${e} must be non-negative, not ${t}`}function qK(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function KK(e,t){return`Input to reshape is a SparseTensor with ${yz(e)}\n  dense values, but the requested shape requires a multiple of ${yz(t)}. inputShape=${e} outputShape= ${t}`}function XK(e,t){return`Input to reshape is a tensor with ${yz(e)} dense values, but the requested shape has ${yz(t)}. inputShape=${e} outputShape=${t}`}t(GK,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>HK)),t(GK,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>jK)),t(GK,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>qK)),t(GK,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>KK)),t(GK,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>XK));var YK={};function ZK(){return"segment ids must be >= 0"}function JK(){return"segment ids are not increasing"}function QK(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function eX(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function tX(e){try{return e.map((e=>tU(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function nX(e){return e.map((e=>eU(e)))}t(YK,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>ZK)),t(YK,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>JK)),t(YK,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>QK)),t(YK,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>eX)),n(eq,lq),n(eq,QH),n(eq,yq),n(eq,wq),n(eq,Oq),n(eq,Zq),n(eq,nq),n(eq,nK),n(eq,aK),n(eq,pj),n(eq,dj),n(eq,cK),n(eq,dK),n(eq,kW),n(eq,wK),n(eq,CK),n(eq,zK),n(eq,PK),n(eq,GK),n(eq,YK);var rX={};function aX(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||sX)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function sX(e,t){return e>t?1:e<t?-1:0}function oX(e,t,n,r,a){return uX(e,t,n,r,a,0)}function iX(e,t,n,r,a,s){return uX(e,t,n,r,a,0,!1,s,!0)}function lX(e,t,n,r,a,s){return uX(e,t,n,r,a,s,!0)}function uX(e,t,n,r,a,s,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(hX);const c=s>0?-.5/s:0,p=[],h=[];for(;p.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=cX(e,s,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*pX(r,c,o),t.score<=a)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(s),h.push(t.score)):t.score>a&&aX(u,t,hX))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),l&&(m.validOutputs=d),m}function cX(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),h=Math.max(a[1],a[3]),d=(i-s)*(l-o),f=(p-u)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(s,u),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function pX(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function hX(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function dX(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=YG(e,"int32"),a=YG([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),o=t*e.length;a.values.set(s,o)}return a.toTensor()}t(rX,"nonMaxSuppressionV3Impl",(()=>oX)),t(rX,"nonMaxSuppressionV4Impl",(()=>iX)),t(rX,"nonMaxSuppressionV5Impl",(()=>lX)),t(rX,"whereImpl",(()=>dX));const fX=KU({add_:function(e,t){let n=HU(e,"a","add"),r=HU(t,"b","add");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(pB,a)}});const mX=KU({floorDiv_:function(e,t){let n=HU(e,"a","floorDiv"),r=HU(t,"b","floorDiv");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(gP,a)}});const gX=KU({div_:function(e,t){let n=HU(e,"a","div"),r=HU(t,"b","div");if([n,r]=IU(n,r),"int32"===n.dtype&&"int32"===r.dtype)return mX(n,r);const a={a:n,b:r};return FU.runKernel(rP,a,{})}});var yX={};t(yX,"spectral",(()=>r0)),t(yX,"signal",(()=>a0)),t(yX,"image",(()=>s0)),t(yX,"linalg",(()=>o0)),t(yX,"losses",(()=>i0)),t(yX,"sparse",(()=>l0)),t(yX,"string",(()=>u0)),t(yX,"abs",(()=>_Y)),t(yX,"acos",(()=>bZ)),t(yX,"acosh",(()=>xZ)),t(yX,"add",(()=>fX)),t(yX,"addN",(()=>wZ)),t(yX,"all",(()=>kZ)),t(yX,"any",(()=>vZ)),t(yX,"argMax",(()=>NZ)),t(yX,"argMin",(()=>SZ)),t(yX,"asin",(()=>IZ)),t(yX,"asinh",(()=>TZ)),t(yX,"atan",(()=>EZ)),t(yX,"atan2",(()=>$Z)),t(yX,"atanh",(()=>CZ)),t(yX,"avgPool",(()=>AZ)),t(yX,"avgPool3d",(()=>RZ)),t(yX,"basicLSTMCell",(()=>DZ)),t(yX,"batchToSpaceND",(()=>FZ)),t(yX,"batchNorm",(()=>OZ)),t(yX,"batchNorm2d",(()=>MZ)),t(yX,"batchNorm3d",(()=>LZ)),t(yX,"batchNorm4d",(()=>zZ)),t(yX,"bincount",(()=>gY)),t(yX,"broadcastArgs",(()=>BZ)),t(yX,"broadcastTo",(()=>kY)),t(yX,"buffer",(()=>YG)),t(yX,"cast",(()=>ZG)),t(yX,"ceil",(()=>PZ)),t(yX,"clipByValue",(()=>VZ)),t(yX,"clone",(()=>JG)),t(yX,"complex",(()=>XU)),t(yX,"concat",(()=>bX)),t(yX,"concat1d",(()=>WZ)),t(yX,"concat2d",(()=>UZ)),t(yX,"concat3d",(()=>GZ)),t(yX,"concat4d",(()=>HZ)),t(yX,"conv1d",(()=>jZ)),t(yX,"conv2d",(()=>LX)),t(yX,"conv2dTranspose",(()=>qZ)),t(yX,"conv3d",(()=>KZ)),t(yX,"conv3dTranspose",(()=>YZ)),t(yX,"cos",(()=>ZZ)),t(yX,"cosh",(()=>JZ)),t(yX,"cumprod",(()=>QZ)),t(yX,"cumsum",(()=>eJ)),t(yX,"denseBincount",(()=>tJ)),t(yX,"depthToSpace",(()=>nJ)),t(yX,"depthwiseConv2d",(()=>VX)),t(yX,"diag",(()=>rJ)),t(yX,"dilation2d",(()=>aJ)),t(yX,"div",(()=>gX)),t(yX,"divNoNan",(()=>oJ)),t(yX,"dot",(()=>iJ)),t(yX,"einsum",(()=>lJ)),t(yX,"elu",(()=>Mq)),t(yX,"equal",(()=>sJ)),t(yX,"erf",(()=>uJ)),t(yX,"euclideanNorm",(()=>cJ)),t(yX,"exp",(()=>oZ)),t(yX,"expandDims",(()=>WY)),t(yX,"expm1",(()=>pJ)),t(yX,"eye",(()=>UY)),t(yX,"fill",(()=>JX)),t(yX,"floor",(()=>hJ)),t(yX,"floorDiv",(()=>mX)),t(yX,"gather",(()=>dJ)),t(yX,"greater",(()=>bY)),t(yX,"greaterEqual",(()=>TY)),t(yX,"imag",(()=>KH)),t(yX,"isFinite",(()=>fJ)),t(yX,"isInf",(()=>mJ)),t(yX,"isNaN",(()=>gJ)),t(yX,"leakyRelu",(()=>Lq)),t(yX,"less",(()=>yJ)),t(yX,"lessEqual",(()=>yY)),t(yX,"linspace",(()=>bJ)),t(yX,"localResponseNormalization",(()=>xJ)),t(yX,"log",(()=>nZ)),t(yX,"log1p",(()=>iZ)),t(yX,"logSigmoid",(()=>kJ)),t(yX,"logSoftmax",(()=>vJ)),t(yX,"logSumExp",(()=>uZ)),t(yX,"logicalAnd",(()=>EY)),t(yX,"logicalNot",(()=>NJ)),t(yX,"logicalOr",(()=>SJ)),t(yX,"logicalXor",(()=>IJ)),t(yX,"lowerBound",(()=>CJ)),t(yX,"matMul",(()=>NH)),t(yX,"max",(()=>DY)),t(yX,"maxPool",(()=>AJ)),t(yX,"maxPool3d",(()=>RJ)),t(yX,"maxPoolWithArgmax",(()=>_J)),t(yX,"maximum",(()=>DJ)),t(yX,"mean",(()=>qY)),t(yX,"meshgrid",(()=>FJ)),t(yX,"min",(()=>FY)),t(yX,"minimum",(()=>eZ)),t(yX,"mirrorPad",(()=>OJ)),t(yX,"mod",(()=>MJ)),t(yX,"moments",(()=>LJ)),t(yX,"mul",(()=>zq)),t(yX,"multiRNNCell",(()=>zJ)),t(yX,"multinomial",(()=>BJ)),t(yX,"neg",(()=>XH)),t(yX,"notEqual",(()=>KY)),t(yX,"oneHot",(()=>SH)),t(yX,"ones",(()=>XY)),t(yX,"onesLike",(()=>PJ)),t(yX,"outerProduct",(()=>VJ)),t(yX,"pad",(()=>WJ)),t(yX,"pad1d",(()=>UJ)),t(yX,"pad2d",(()=>GJ)),t(yX,"pad3d",(()=>HJ)),t(yX,"pad4d",(()=>jJ)),t(yX,"pool",(()=>KJ)),t(yX,"pow",(()=>OY)),t(yX,"prelu",(()=>Bq)),t(yX,"print",(()=>QG)),t(yX,"prod",(()=>XJ)),t(yX,"raggedGather",(()=>YJ)),t(yX,"raggedTensorToTensor",(()=>ZJ)),t(yX,"rand",(()=>JJ)),t(yX,"randomGamma",(()=>cQ)),t(yX,"randomNormal",(()=>pQ)),t(yX,"randomStandardNormal",(()=>hQ)),t(yX,"randomUniform",(()=>dQ)),t(yX,"range",(()=>NY)),t(yX,"real",(()=>YH)),t(yX,"reciprocal",(()=>fQ)),t(yX,"relu",(()=>Pq)),t(yX,"relu6",(()=>Vq)),t(yX,"reshape",(()=>Wq)),t(yX,"reverse",(()=>TX)),t(yX,"reverse1d",(()=>mQ)),t(yX,"reverse2d",(()=>gQ)),t(yX,"reverse3d",(()=>yQ)),t(yX,"reverse4d",(()=>bQ)),t(yX,"round",(()=>wY)),t(yX,"rsqrt",(()=>xQ)),t(yX,"scalar",(()=>EX)),t(yX,"selu",(()=>wQ)),t(yX,"separableConv2d",(()=>kQ)),t(yX,"setdiff1dAsync",(()=>vQ)),t(yX,"sigmoid",(()=>Uq)),t(yX,"sign",(()=>NQ)),t(yX,"sin",(()=>SQ)),t(yX,"sinh",(()=>IQ)),t(yX,"slice",(()=>xX)),t(yX,"slice1d",(()=>TQ)),t(yX,"slice2d",(()=>EQ)),t(yX,"slice3d",(()=>$Q)),t(yX,"slice4d",(()=>CQ)),t(yX,"softmax",(()=>AQ)),t(yX,"softplus",(()=>wJ)),t(yX,"spaceToBatchND",(()=>qJ)),t(yX,"fft",(()=>NX)),t(yX,"ifft",(()=>IX)),t(yX,"irfft",(()=>$X)),t(yX,"rfft",(()=>SX)),t(yX,"split",(()=>wX)),t(yX,"sqrt",(()=>MY)),t(yX,"square",(()=>LY)),t(yX,"squaredDifference",(()=>aZ)),t(yX,"squeeze",(()=>PY)),t(yX,"stack",(()=>$Y)),t(yX,"step",(()=>Gq)),t(yX,"stridedSlice",(()=>RQ)),t(yX,"sub",(()=>xY)),t(yX,"sum",(()=>Hq)),t(yX,"tan",(()=>_Q)),t(yX,"tanh",(()=>_Z)),t(yX,"tensor",(()=>ZU)),t(yX,"tensor1d",(()=>qX)),t(yX,"tensor2d",(()=>QX)),t(yX,"tensor3d",(()=>aj)),t(yX,"tensor4d",(()=>DQ)),t(yX,"tensor5d",(()=>FQ)),t(yX,"tensor6d",(()=>OQ)),t(yX,"tile",(()=>aY)),t(yX,"topk",(()=>MQ)),t(yX,"truncatedNormal",(()=>LQ)),t(yX,"unique",(()=>zQ)),t(yX,"unsortedSegmentSum",(()=>BQ)),t(yX,"unstack",(()=>CY)),t(yX,"upperBound",(()=>PQ)),t(yX,"variable",(()=>VQ)),t(yX,"where",(()=>vY)),t(yX,"whereAsync",(()=>WQ)),t(yX,"zeros",(()=>kX)),t(yX,"zerosLike",(()=>vX)),t(yX,"op",(()=>KU)),t(yX,"OP_SCOPE_SUFFIX",(()=>qU)),t(yX,"fused",(()=>CX));const bX=KU({concat_:function(e,t=0){dz(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=jU(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return JG(n[0]);const r=n,a={axis:t};return FU.runKernel(MB,r,a)}});const xX=KU({slice_:function(e,t,n){const r=HU(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const a={x:r},s={begin:t,size:n};return FU.runKernel(FV,a,s)}});const wX=KU({split_:function(e,t,n=0){const r={x:HU(e,"x","split")},a={numOrSizeSplits:t,axis:n};return FU.runKernel(UV,r,a)}});function kX(e,t="float32"){if("complex64"===t){const t=kX(e,"float32"),n=kX(e,"float32");return XU(t,n)}const n=qz(yz(e),t);return FU.makeTensor(n,e,t)}const vX=KU({zerosLike_:function(e){const t={x:HU(e,"x","zerosLike")};return FU.runKernel(dW,t)}});const NX=KU({fft_:function(e){dz("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return FU.runKernel(hP,t)}});const SX=KU({rfft_:function(e,t){dz("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let a;if(null!=t&&t<n){const r=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,a=xX(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,a=bX([e,kX(r)],e.shape.length-1),n=t}else a=e;const s=vX(a),o=Wq(XU(a,s),[r,n]),i=NX(o),l=Math.floor(n/2)+1,u=YH(i),c=KH(i),p=wX(u,[l,n-l],u.shape.length-1),h=wX(c,[l,n-l],c.shape.length-1),d=a.shape.slice();return d[a.shape.length-1]=l,Wq(XU(p[0],h[0]),d)}});const IX=KU({ifft_:function(e){dz("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return FU.runKernel(NP,t)}});const TX=KU({reverse_:function(e,t){const n={x:HU(e,"x","reverse")},r={dims:t};return FU.runKernel(EV,n,r)}});function EX(e,t){if((Fz(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Fz(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return YU(e,[],[],t)}const $X=KU({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const a=Wq(e,[n,t]);r=IX(a)}else{const a=[n,2*(t-1)],s=Wq(YH(e),[n,t]),o=Wq(KH(e),[n,t]),i=TX(xX(s,[0,1],[n,t-2]),1),l=zq(TX(xX(o,[0,1],[n,t-2]),1),EX(-1)),u=bX([s,i],1),c=bX([o,l],1),p=Wq(XU(u,c),[a[0],a[1]]);r=IX(p)}if(r=YH(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Wq(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});var CX={};function AX(e){return dz(Vz(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const r=HU(t,"x","tf.grad","string_or_numeric"),a=null!=n?HU(n,"dy","tf.grad"):null;return FU.tidy((()=>{const{value:t,grads:n}=FU.gradients((()=>e(r)),[r],a);return null!=a&&fz(t.shape,a.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),MX(n),n[0]}))}}function RX(e){return dz(Vz(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{dz(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=jU(t,"args","tf.grads","string_or_numeric"),a=null!=n?HU(n,"dy","tf.grads"):null;return FU.tidy((()=>{const{value:t,grads:n}=FU.gradients((()=>e(...r)),r,a);return null!=a&&fz(t.shape,a.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),MX(n),n}))}}function _X(e){return dz(Vz(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{dz(t instanceof fU,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),dz(null==n||n instanceof fU,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:a}=FU.gradients((()=>e(t)),[t],n);return MX(r),{grad:r[0],value:a}}}function DX(e){return dz(Vz(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{dz(Array.isArray(t)&&t.every((e=>e instanceof fU)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),dz(null==n||n instanceof fU,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=FU.gradients((()=>e(...t)),t,n);return null!=n&&fz(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),MX(r.grads),r}}function FX(e,t){dz(Vz(e),(()=>"The f passed in variableGrads(f) must be a function")),dz(null==t||Array.isArray(t)&&t.every((e=>e instanceof mU)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in FU.registeredVariables)t.push(FU.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,a=t.length;dz((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`));const{value:s,grads:o}=FU.gradients(e,t,null,!0);dz(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),dz(0===s.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=r&&r.forEach((e=>i[e.name]=null)),{value:s,grads:i}}function OX(e){return FU.customGrad(e)}function MX(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}t(CX,"conv2d",(()=>PX)),t(CX,"depthwiseConv2d",(()=>GX)),t(CX,"matMul",(()=>HX));const LX=KU({conv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const i=HU(e,"x","conv2d","float32"),l=HU(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Wq(i,[1,i.shape[0],i.shape[1],i.shape[2]])),dz(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),dz(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Fq("conv2d",r,o);const p="NHWC"===a?u.shape[3]:u.shape[1];dz(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),dz(_q(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},f=FU.runKernel(LB,h,d);return c?Wq(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const zX=KU({conv2DBackpropFilter_:function(e,t,n,r,a,s="NHWC",o){let i=e;3===e.rank&&(i=Wq(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Wq(t,[1,t.shape[0],t.shape[1],t.shape[2]])),dz(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),dz(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),dz(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===s?i.shape[3]:i.shape[1],c="NHWC"===s?l.shape[3]:l.shape[1];dz(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),dz(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Fq("conv2dDerFilter",a,o);const p={x:i,dy:l},h={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,filterShape:n};return FU.runKernel(zB,p,h)}});const BX=KU({conv2DBackpropInput_:function(e,t,n,r,a,s="NHWC",o){dz(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=Wq(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),dz(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),dz(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),dz(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===s?i[3]:i[1],p="NHWC"===s?l.shape[3]:l.shape[1];dz(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),dz(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Fq("conv2dDerInput",a,o);const h={dy:l,filter:n},d={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,inputShape:i},f=FU.runKernel(BB,h,d);return u?Wq(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const PX=KU({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Xq(FU.state.gradientDepth,l)){dz("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=LX(e,t,n,r,a,s,o);return null!=i&&(p=fX(p,i)),Kq(p,l,u,c)}const p=HU(e,"x","conv2d","float32"),h=HU(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Wq(p,[1,p.shape[0],p.shape[1],p.shape[2]])),dz(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),dz(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Fq("fused conv2d",r,o);const m="NHWC"===a?d.shape[3]:d.shape[1];dz(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),dz(_q(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const g=Sq(d.shape,h.shape,n,s,r,o);let y,b;if(null!=i&&(y=HU(i,"bias","fused conv2d"),[y]=IU(y,p),"NHWC"===a?nj(g.outShape,y.shape):(dz(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),dz(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(dz(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)dz(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{nj(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=HU(u,"prelu weights","fused conv2d")}const x=(e,t)=>{dz("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[o,i,u,c]=t,p=jq(e,u,l);dz(Rq(s),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const h=[BX(i.shape,p,o,n,r),zX(i,p,o.shape,n,r)];if(null!=c){const e=qq(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return OX(((e,t,n)=>{let r=FU.runKernel(bW,w,k);return n([t,e,r]),f&&(r=Wq(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h)}return OX(((e,t,n,r)=>{let a=FU.runKernel(bW,w,k);return r([t,e,a,n]),f&&(a=Wq(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}))(d,h,y)}});const VX=KU({depthwiseConv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const i=HU(e,"x","depthwiseConv2d","float32"),l=HU(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Wq(i,[1,i.shape[0],i.shape[1],i.shape[2]])),dz(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),dz(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const p="NHWC"===a?u.shape[3]:u.shape[1];dz(p===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Fq("depthwiseConv2d",r,o);const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},f=FU.runKernel(YB,h,d);return c?Wq(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const WX=KU({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a,s=[1,1],o){let i=e;3===e.rank&&(i=Wq(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Wq(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:r,pad:a,dimRoundingMode:o,dilations:s,filterShape:n};return FU.runKernel(ZB,u,c)}});const UX=KU({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a,s=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=Wq(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:r,pad:a,dimRoundingMode:o,dilations:s,inputShape:e},p=FU.runKernel(JB,u,c);return l?Wq(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const GX=KU({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Xq(FU.state.gradientDepth,l)){let p=VX(e,t,n,r,a,s,o);return null!=i&&(p=fX(p,i)),Kq(p,l,u,c)}const p=HU(e,"x","depthwiseConv2d","float32"),h=HU(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=Wq(p,[1,p.shape[0],p.shape[1],p.shape[2]])),dz(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),dz(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),dz(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==s&&(s=[1,1]),dz(_q(n,s),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),Fq("fused depthwiseConv2d",r,o);const m=Sq(d.shape,h.shape,n,s,r,o,!0);let g,y;null!=i&&(g=HU(i,"bias","fused conv2d"),[g]=IU(g,p),nj(m.outShape,g.shape)),null!=u&&(y=HU(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{dz(Rq(s),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`));const[a,i,u,c]=t,p=jq(e,u,l),h=UX(i.shape,p,a,n,r,s,o),d=WX(i,p,a.shape,n,r,s,o);if(null!=c){return[h,d,qq(g,p)]}return[h,d]},x={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){return OX(((e,t,n)=>{let r=FU.runKernel(xW,x,w);return n([t,e,r]),f&&(r=Wq(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,h)}return OX(((e,t,n,r)=>{let a=FU.runKernel(xW,x,w);return r([t,e,a,n]),f&&(a=Wq(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}}))(d,h,g)}});const HX=KU({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Xq(FU.state.gradientDepth,s)){let l=NH(e,t,n,r);return null!=a&&(l=fX(l,a)),Kq(l,s,o,i)}let l=HU(e,"a","fused matMul"),u=HU(t,"b","fused matMul");[l,u]=IU(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=yz(f),y=yz(m);dz(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=nj(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([h,d]),x=Wq(l,n?[g,c,h]:[g,h,c]),w=Wq(u,r?[y,d,p]:[y,p,d]);let k,v;null!=a&&(k=HU(a,"bias","fused matMul"),[k]=IU(k,l),nj(b,k.shape)),null!=o&&(v=HU(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,l,u]=t,c=jq(Wq(e,l.shape),l,s);let p,h;if(n||r?!n&&r?(p=NH(c,i,!1,!1),h=NH(c,o,!0,!1)):n&&!r?(p=NH(i,c,!1,!0),h=NH(o,c,!1,!1)):(p=NH(i,c,!0,!0),h=NH(c,o,!0,!0)):(p=NH(c,i,!1,!0),h=NH(o,c,!0,!1)),null!=a){return[p,h,qq(u,c)]}return[p,h]},S={a:x,b:w,bias:k,preluActivationWeights:v},I={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:i};if(null==a){return OX(((e,t,n)=>{const r=FU.runKernel(yW,S,I);return n([e,t,r]),{value:Wq(r,b),gradFunc:N}}))(x,w)}return OX(((e,t,n,r)=>{const a=FU.runKernel(yW,S,I);return r([e,t,a,n]),{value:Wq(a,b),gradFunc:N}}))(x,w,k)}});var jX={};function qX(e,t){mz(e);const n=WU(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return YU(e,null,n,t)}function KX(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function XX(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return qX(a,"float32")}t(jX,"enclosingPowerOfTwo",(()=>KX)),t(jX,"cosineWindow",(()=>XX));const YX=KU({hammingWindow_:function(e){return XX(e,.54,.46)}});const ZX=KU({hannWindow_:function(e){return XX(e,.5,.5)}});function JX(e,t,n){const r={shape:e,value:t,dtype:n};return FU.runKernel(dP,{},r)}function QX(e,t,n){if(mz(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=WU(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return YU(e,t,r,n)}const eY=KU({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push(xX(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=bX([xX(e,s,t-r),JX([r],a)]);o.push(i),s+=n}return 0===o.length?QX([],[0,t]):Wq(bX(o),[o.length,t])}});const tY=KU({stft_:function(e,t,n,r,a=ZX){null==r&&(r=KX(t));const s=eY(e,t,n),o=zq(s,a(t));return SX(o,r)}});const nY=KU({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=HU(e,"image","cropAndResize"),i=HU(t,"boxes","cropAndResize","float32"),l=HU(n,"boxInd","cropAndResize","int32"),u=i.shape[0];dz(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),dz(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),dz(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),dz(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),dz(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),dz("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const c={image:o,boxes:i,boxInd:l},p={method:a,extrapolationValue:s,cropSize:r};return FU.runKernel(qB,c,p)}});const rY=KU({flipLeftRight_:function(e){const t=HU(e,"image","flipLeftRight","float32");dz(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return FU.runKernel(fP,n,{})}});const aY=KU({tile_:function(e,t){const n=HU(e,"x","tile","string_or_numeric");dz(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},a={reps:t};return FU.runKernel(sW,r,a)}});const sY=KU({grayscaleToRGB_:function(e){const t=HU(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];dz(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),dz(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,aY(t,a)}});const oY=KU({rotateWithOffset_:function(e,t,n=0,r=.5){const a=HU(e,"image","rotateWithOffset","float32");dz(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const s={image:a},o={radians:t,fillValue:n,center:r};return FU.runKernel(gW,s,o)}});function iY(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),dz(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),dz(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),dz(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),dz(1===t.rank,(()=>"scores must be a 1D tensor")),dz(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),dz(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const lY=KU({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=HU(e,"boxes","nonMaxSuppression","float32"),o=HU(t,"scores","nonMaxSuppression","float32"),i=iY(s,o,n,r,a),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return FU.runKernel(aV,{boxes:s,scores:o},l)}});const uY=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=HU(e,"boxes","nonMaxSuppressionAsync"),o=HU(t,"scores","nonMaxSuppressionAsync"),i=iY(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const l=await Promise.all([s.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:p}=oX(u,c,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),qX(p,"int32")};const cY=KU({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=HU(e,"boxes","nonMaxSuppression"),i=HU(t,"scores","nonMaxSuppression"),l=iY(o,i,n,r,a,s),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:s=l.softNmsSigma},p=FU.runKernel(oV,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const pY=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=HU(e,"boxes","nonMaxSuppressionAsync"),i=HU(t,"scores","nonMaxSuppressionAsync"),l=iY(o,i,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold,s=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],p=u[1],{selectedIndices:h,selectedScores:d}=lX(c,p,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:qX(h,"int32"),selectedScores:qX(d)}};const hY=KU({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=HU(e,"boxes","nonMaxSuppression"),i=HU(t,"scores","nonMaxSuppression"),l=iY(o,i,n,r,a,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:s},p=FU.runKernel(sV,u,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const dY=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=HU(e,"boxes","nonMaxSuppressionAsync"),i=HU(t,"scores","nonMaxSuppressionAsync"),l=iY(o,i,n,r,a,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=iX(h,d,u,c,p,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:qX(f,"int32"),validOutputs:EX(m,"int32")}};const fY=KU({resizeBilinear_:function(e,t,n=!1,r=!1){const a=HU(e,"images","resizeBilinear");dz(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),dz(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),dz(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=Wq(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},l={alignCorners:n,halfPixelCenters:r,size:t},u=FU.runKernel(SV,i,l);return o?Wq(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const mY=KU({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const a=HU(e,"images","resizeNearestNeighbor");dz(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),dz(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),dz("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),dz(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=Wq(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},l={alignCorners:n,halfPixelCenters:r,size:t},u=FU.runKernel(vV,i,l);return o?Wq(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const gY=KU({bincount_:function(e,t,n){const r=HU(e,"x","bincount"),a=HU(t,"weights","bincount");dz("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),dz(n>=0,(()=>`size must be non-negative, but got ${n}.`)),dz(a.size===r.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`));const s={x:r,weights:a},o={size:n};return FU.runKernel($B,s,o)}});const yY=KU({lessEqual_:function(e,t){let n=HU(e,"a","lessEqual","string_or_numeric"),r=HU(t,"b","lessEqual","string_or_numeric");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(AP,a)}});const bY=KU({greater_:function(e,t){let n=HU(e,"a","greater","string_or_numeric"),r=HU(t,"b","greater","string_or_numeric");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(wP,a)}});const xY=KU({sub_:function(e,t){let n=HU(e,"a","sub"),r=HU(t,"b","sub");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(nW,a)}});const wY=KU({round_:function(e){const t={x:HU(e,"x","round")};return FU.runKernel($V,t)}});const kY=KU({broadcastTo_:function(e,t){let n=HU(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Wq(n,e)}const a=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===s.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return JG(n);const o={x:n},i={reps:s};return FU.runKernel(sW,o,i)}});const vY=KU({where_:function(e,t,n){const r=HU(t,"a","where"),a=HU(n,"b","where"),s=HU(e,"condition","where","bool"),o=nj(nj(s.shape,r.shape),a.shape),i={condition:kY(s,o),t:kY(r,o),e:kY(a,o)};return FU.runKernel(_V,i)}});function NY(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return FU.runKernel(yV,{},a)}const SY=KU({threshold_:function(e,t="binary",n=!1,r=.5){const a=HU(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,i,l,u,c=zq(qX([r]),255);if(dz(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),dz(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),dz("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),dz("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[o,i,l]=wX(a,[1,1,1],-1);const e=zq(o,.2989),t=zq(i,.587),n=zq(l,.114);u=fX(fX(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,r,a,s,o,i,l=qX([-1]),u=qX([0]),c=qX([0]);for(let p=0;p<e.size-1;p++){n=xX(e,0,p+1),r=xX(e,p+1),o=gX(Hq(n),t),i=gX(Hq(r),t);const h=Hq(zq(n,NY(0,n.size)));a=gX(h,Hq(n));const d=JX(r.shape,n.size),f=fX(NY(0,r.size),d),m=zq(r,f);s=gX(Hq(m),Hq(r));const g=xY(a,s),y=xY(a,s),b=zq(o,i);c=zq(zq(b,g),y);const x=bY(c,u);u=vY(x,c,u),l=vY(x,qX([p]),l)}return l}(gY(ZG(wY(u),"int32"),ZU([]),256),s)}const p=n?yY(u,c):bY(u,c);return ZG(zq(p,255),"int32")}});const IY=KU({transform_:function(e,t,n="nearest",r="constant",a=0,s){const o=HU(e,"image","transform","float32"),i=HU(t,"transforms","transform","float32");dz(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),dz(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),dz(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return FU.runKernel(iW,l,u)}});const TY=KU({greaterEqual_:function(e,t){let n=HU(e,"a","greaterEqual","string_or_numeric"),r=HU(t,"b","greaterEqual","string_or_numeric");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(kP,a)}});const EY=KU({logicalAnd_:function(e,t){const n=HU(e,"a","logicalAnd","bool"),r=HU(t,"b","logicalAnd","bool");nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(FP,a)}});const $Y=KU({stack_:function(e,t=0){const n=jU(e,"tensors","stack","string_or_numeric");dz(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&dz(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,a={axis:t};return FU.runKernel(uV,r,a)}});const CY=KU({unstack_:function(e,t=0){const n=HU(e,"x","unstack","string_or_numeric");dz(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},a={axis:t};return FU.runKernel(cW,r,a)}});const AY=KU({bandPart_:function(e,t,n){dz(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),dz(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=HU(e,"a","bandPart");dz(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=Wq(NY(0,s,1,"int32"),[-1,1]),l=NY(0,o,1,"int32"),u=xY(i,l),c=EY(yY(u,EX(+t,"int32")),TY(u,EX(-n,"int32"))),p=kX([s,o],r.dtype);return Wq($Y(CY(Wq(r,[-1,s,o])).map((e=>vY(c,e,p)))),a)}});var RY={};t(RY,"norm",(()=>BY));const _Y=KU({abs_:function(e){const t=HU(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return FU.runKernel(OB,e)}{const e={x:t};return FU.runKernel(lB,e)}}});const DY=KU({max_:function(e,t=null,n=!1){const r={x:HU(e,"x","max")},a={reductionIndices:t,keepDims:n};return FU.runKernel(WP,r,a)}});const FY=KU({min_:function(e,t=null,n=!1){const r={x:HU(e,"x","min")},a={axis:t,keepDims:n};return FU.runKernel(YP,r,a)}});const OY=KU({pow_:function(e,t){let n=HU(e,"base","pow"),r=HU(t,"exp","pow");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(hV,a)}});const MY=KU({sqrt_:function(e){const t={x:HU(e,"x","sqrt","float32")};return FU.runKernel(PV,t)}});const LY=KU({square_:function(e){const t=HU(e,"x","square");return FU.runKernel("Square",{x:t},{})}});function zY(e,t,n=null){if(0===e.rank)return _Y(e);if(1!==e.rank&&null===n)return zY(Wq(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Hq(_Y(e),n);if(t===1/0)return DY(_Y(e),n);if(t===-1/0)return FY(_Y(e),n);if("euclidean"===t||2===t)return MY(Hq(OY(_Y(e),EX(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return DY(Hq(_Y(e),n[0]),n[1]-1);if(t===1/0)return DY(Hq(_Y(e),n[1]),n[0]);if(t===-1/0)return FY(Hq(_Y(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return MY(Hq(LY(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const BY=KU({norm_:function(e,t="euclidean",n=null,r=!1){const a=zY(e=HU(e,"x","norm"),t,n);let s=a.shape;if(r){const t=Ez(n,e.shape);s=hq(a.shape,t)}return Wq(a,s)}});const PY=KU({squeeze_:function(e,t){const n=HU(e,"x","squeeze","string_or_numeric");return Wq(n,$z(n.shape,t).newShape)}});const VY=KU({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,dz(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)dz(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=wX(e,e.shape[0],0).map((e=>PY(e,[0])));dz(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(FU.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=zq(Hq(zq(n[r],e)),n[r]);e=xY(e,t)}return gX(e,BY(e,"euclidean"))})));return t?$Y(n,0):n}});const WY=KU({expandDims_:function(e,t=0){const n=HU(e,"x","expandDims","string_or_numeric");dz(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},a={dim:t};return FU.runKernel(cP,r,a)}});const UY=KU({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=YG([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=Wq(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return aY(WY(o,0),[n[0],1,1]);if(2===n.length)return aY(WY(WY(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return aY(WY(WY(WY(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function GY(e,t=!1){return FU.tidy((()=>{dz(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=UY(n),s=JG(e);const o=QX([[1]],[1,1]);let i=JG(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=s,l=i,u=a;[i,s,a]=FU.tidy((()=>{const t=xX(s,[e,e],[n-e,1]),l=BY(t),u=xX(s,[e,e],[1,1]),c=vY(bY(u,0),QX([[-1]]),QX([[1]])),p=xY(u,zq(c,l)),h=gX(t,p);i=1===h.shape[0]?JG(o):bX([o,xX(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=XH(gX(NH(c,p),l)),f=xX(s,[e,0],[n-e,r]),m=zq(d,i),g=ZH(i);if(0===e)s=xY(f,NH(m,NH(g,f)));else{const t=xY(f,NH(m,NH(g,f)));s=bX([xX(s,[0,0],[e,r]),t],0)}const y=ZH(m),b=xX(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=xY(b,NH(NH(b,i),y));else{const t=xY(b,NH(NH(b,i),y));a=bX([xX(a,[0,0],[n,e]),t],1)}return[i,s,a]})),MH([t,l,u])}return!t&&n>r&&(a=xX(a,[0,0],[n,r]),s=xX(s,[0,0],[r,r])),[a,s]}))}const HY=KU({qr_:function(e,t=!1){if(dz(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return GY(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=CY(Wq(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach((e=>{const[n,r]=GY(e,t);a.push(n),s.push(r)}));return[Wq($Y(a,0),e.shape),Wq($Y(s,0),e.shape)]}}});var jY;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(jY||(jY={}));const qY=KU({mean_:function(e,t=null,n=!1){const r={x:HU(e,"x","mean")},a={axis:t,keepDims:n};return FU.runKernel(XP,r,a)}});const KY=KU({notEqual_:function(e,t){let n=HU(e,"a","notEqual","string_or_numeric"),r=HU(t,"b","notEqual","string_or_numeric");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(rV,a)}});function XY(e,t="float32"){if("complex64"===t){const t=XY(e,"float32"),n=kX(e,"float32");return XU(t,n)}const n=jz(yz(e),t);return FU.makeTensor(n,e,t)}const YY=KU({computeWeightedLoss_:function(e,t,n=jY.SUM_BY_NONZERO_WEIGHTS){const r=HU(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=HU(t,"weights","computeWeightedLoss"));const s=null==a?r:zq(r,a);if(n===jY.NONE)return s;if(n===jY.SUM)return Hq(s);if(n===jY.MEAN){if(null==a)return qY(s);{const e=r.size/a.size,t=gX(Hq(s),Hq(a));return e>1?gX(t,EX(e)):t}}if(n===jY.SUM_BY_NONZERO_WEIGHTS){if(null==a)return gX(Hq(s),EX(r.size));{const e=zq(a,XY(r.shape)),t=ZG(Hq(KY(e,EX(0))),"float32");return gX(Hq(s),t)}}throw Error(`Unknown reduction: ${n}`)}});const ZY=KU({absoluteDifference_:function(e,t,n,r=jY.SUM_BY_NONZERO_WEIGHTS){const a=HU(e,"labels","absoluteDifference"),s=HU(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=HU(n,"weights","absoluteDifference")),fz(a.shape,s.shape,"Error in absoluteDifference: ");const i=_Y(xY(a,s));return YY(i,o,r)}});const JY=KU({cosineDistance_:function(e,t,n,r,a=jY.SUM_BY_NONZERO_WEIGHTS){const s=HU(e,"labels","cosineDistance"),o=HU(t,"predictions","cosineDistance");let i=null;null!=r&&(i=HU(r,"weights","cosineDistance")),fz(s.shape,o.shape,"Error in cosineDistance: ");const l=EX(1),u=xY(l,Hq(zq(s,o),n,!0));return YY(u,i,a)}});const QY=KU({hingeLoss_:function(e,t,n,r=jY.SUM_BY_NONZERO_WEIGHTS){let a=HU(e,"labels","hingeLoss");const s=HU(t,"predictions","hingeLoss");let o=null;null!=n&&(o=HU(n,"weights","hingeLoss")),fz(a.shape,s.shape,"Error in hingeLoss: ");const i=EX(1);a=xY(zq(EX(2),a),i);const l=Pq(xY(i,zq(a,s)));return YY(l,o,r)}});const eZ=KU({minimum_:function(e,t){let n=HU(e,"a","minimum"),r=HU(t,"b","minimum");[n,r]=IU(n,r),"bool"===n.dtype&&(n=ZG(n,"int32"),r=ZG(r,"int32")),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(ZP,a)}});const tZ=KU({huberLoss_:function(e,t,n,r=1,a=jY.SUM_BY_NONZERO_WEIGHTS){const s=HU(e,"labels","huberLoss"),o=HU(t,"predictions","huberLoss");let i=null;null!=n&&(i=HU(n,"weights","huberLoss")),fz(s.shape,o.shape,"Error in huberLoss: ");const l=EX(r),u=_Y(xY(o,s)),c=eZ(u,l),p=xY(u,c),h=fX(zq(EX(.5),LY(c)),zq(l,p));return YY(h,i,a)}});const nZ=KU({log_:function(e){const t={x:HU(e,"x","log","float32")};return FU.runKernel(_P,t)}});const rZ=KU({logLoss_:function(e,t,n,r=1e-7,a=jY.SUM_BY_NONZERO_WEIGHTS){const s=HU(e,"labels","logLoss"),o=HU(t,"predictions","logLoss");let i=null;null!=n&&(i=HU(n,"weights","logLoss")),fz(s.shape,o.shape,"Error in logLoss: ");const l=EX(1),u=EX(r),c=XH(zq(s,nZ(fX(o,u)))),p=zq(xY(l,s),nZ(fX(xY(l,o),u))),h=xY(c,p);return YY(h,i,a)}});const aZ=KU({squaredDifference_:function(e,t){let n=HU(e,"a","squaredDifference"),r=HU(t,"b","squaredDifference");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(YV,a,{})}});const sZ=KU({meanSquaredError_:function(e,t,n,r=jY.SUM_BY_NONZERO_WEIGHTS){const a=HU(e,"labels","meanSquaredError"),s=HU(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=HU(n,"weights","meanSquaredError")),fz(a.shape,s.shape,"Error in meanSquaredError: ");const i=aZ(a,s);return YY(i,o,r)}});const oZ=KU({exp_:function(e){const t={x:HU(e,"x","exp")};return FU.runKernel(uP,t)}});const iZ=KU({log1p_:function(e){const t={x:HU(e,"x","log1p")};return FU.runKernel(DP,t)}});const lZ=KU({sigmoidCrossEntropy_:function(e,t,n,r=0,a=jY.SUM_BY_NONZERO_WEIGHTS){let s=HU(e,"multiClassLabels","sigmoidCrossEntropy");const o=HU(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=HU(n,"weights","sigmoidCrossEntropy")),fz(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=EX(r),t=EX(1),n=EX(.5);s=fX(zq(s,xY(t,e)),zq(n,e))}const l=function(e,t){const n=HU(e,"labels","sigmoidCrossEntropyWithLogits"),r=HU(t,"logits","sigmoidCrossEntropyWithLogits");fz(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=Pq(r),s=zq(r,n),o=iZ(oZ(XH(_Y(r))));return fX(xY(a,s),o)}(s,o);return YY(l,i,a)}});const uZ=KU({logSumExp_:function(e,t=null,n=!1){const r=HU(e,"x","logSumExp"),a=Ez(t,r.shape),s=DY(r,a,!0),o=xY(r,s),i=oZ(o),l=Hq(i,a),u=nZ(l),c=fX(Wq(s,u.shape),u);if(n){const e=hq(c.shape,a);return Wq(c,e)}return c}});const cZ=KU({softmaxCrossEntropy_:function(e,t,n,r=0,a=jY.SUM_BY_NONZERO_WEIGHTS){let s=HU(e,"onehotLabels","softmaxCrossEntropy");const o=HU(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=HU(n,"weights","softmaxCrossEntropy")),fz(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=EX(r),t=EX(1),n=EX(s.shape[1]);s=fX(zq(s,xY(t,e)),gX(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return OX(((e,t,r)=>{const a=uZ(t,[n],!0),s=xY(ZG(t,"float32"),a);r([e,s]);const o=XH(zq(s,e));return{value:Hq(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=hq(e.shape,[n]);return[zq(Wq(e,s),xY(ZG(r,"float32"),oZ(a))),zq(Wq(e,s),xY(oZ(a),ZG(r,"float32")))]}}}))(e,t)}(s,o);return YY(l,i,a)}});const pZ=KU({sparseFillEmptyRows_:function(e,t,n,r){const a=HU(e,"indices","sparseFillEmptyRows","int32"),s=HU(t,"values","sparseFillEmptyRows"),o=HU(n,"denseShape","sparseFillEmptyRows","int32"),i=HU(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:a,values:s,denseShape:o,defaultValue:i},u=FU.runKernel(HV,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const hZ=KU({sparseReshape_:function(e,t,n){const r=HU(e,"inputIndices","sparseReshape","int32"),a=HU(t,"inputShape","sparseReshape","int32"),s=HU(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const o={inputIndices:r,inputShape:a,newShape:s},i=FU.runKernel(jV,o);return{outputIndices:i[0],outputShape:i[1]}}});const dZ=KU({sparseSegmentMean_:function(e,t,n){const r=HU(e,"data","sparseSegmentMean"),a=HU(t,"indices","sparseSegmentMean","int32"),s=HU(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return FU.runKernel(qV,o)}});const fZ=KU({sparseSegmentSum_:function(e,t,n){const r=HU(e,"data","sparseSegmentSum"),a=HU(t,"indices","sparseSegmentSum","int32"),s=HU(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return FU.runKernel(KV,o)}});const mZ=KU({stringNGrams_:function(e,t,n,r,a,s,o,i){const l=HU(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=HU(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},p={data:l,dataSplits:u},h=FU.runKernel(QV,p,c);return{nGrams:h[0],nGramsSplits:h[1]}}});const gZ=KU({stringSplit_:function(e,t,n=!0){const r=HU(e,"input","stringSplit","string"),a=HU(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const s={skipEmpty:n},o={input:r,delimiter:a},i=FU.runKernel(eW,o,s);return{indices:i[0],values:i[1],shape:i[2]}}});const yZ=KU({stringToHashBucketFast_:function(e,t){const n=HU(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return FU.runKernel(tW,a,r)}});const bZ=KU({acos_:function(e){const t={x:HU(e,"x","acos")};return FU.runKernel(uB,t)}});const xZ=KU({acosh_:function(e){const t={x:HU(e,"x","acosh")};return FU.runKernel(cB,t)}});const wZ=KU({addN_:function(e){dz(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),dz(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>HU(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!xz(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return FU.runKernel(hB,r)}});const kZ=KU({all_:function(e,t=null,n=!1){const r={x:HU(e,"x","all","bool")},a={axis:t,keepDims:n};return FU.runKernel(dB,r,a)}});const vZ=KU({any_:function(e,t=null,n=!1){const r={x:HU(e,"x","any","bool")},a={axis:t,keepDims:n};return FU.runKernel(fB,r,a)}});const NZ=KU({argMax_:function(e,t=0){const n={x:HU(e,"x","argMax")},r={axis:t};return FU.runKernel(mB,n,r)}});const SZ=KU({argMin_:function(e,t=0){const n={x:HU(e,"x","argMin")},r={axis:t};return FU.runKernel(gB,n,r)}});const IZ=KU({asin_:function(e){const t={x:HU(e,"x","asin")};return FU.runKernel(yB,t)}});const TZ=KU({asinh_:function(e){const t={x:HU(e,"x","asinh")};return FU.runKernel(bB,t)}});const EZ=KU({atan_:function(e){const t={x:HU(e,"x","atan")};return FU.runKernel(xB,t)}});const $Z=KU({atan2_:function(e,t){let n=HU(e,"a","atan2"),r=HU(t,"b","atan2");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(kB,a)}});const CZ=KU({atanh_:function(e){const t={x:HU(e,"x","atanh")};return FU.runKernel(wB,t)}});const AZ=KU({avgPool_:function(e,t,n,r,a){const s=HU(e,"x","avgPool","float32");dz(_q(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=s,i=!1;3===s.rank&&(i=!0,o=Wq(s,[1,s.shape[0],s.shape[1],s.shape[2]])),dz(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Fq("avgPool",r,a);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:a};let c=FU.runKernel(vB,l,u);return c=ZG(c,s.dtype),i?Wq(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const RZ=KU({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){const o=HU(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=Wq(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),dz(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),dz("NDHWC"===s,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),Fq("avgPool3d",r,a);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s};let p=FU.runKernel(SB,u,c);return p=ZG(p,i.dtype),l?Wq(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const _Z=KU({tanh_:function(e){const t={x:HU(e,"x","tanh","float32")};return FU.runKernel(aW,t)}});const DZ=KU({basicLSTMCell_:function(e,t,n,r,a,s){const o=HU(e,"forgetBias","basicLSTMCell"),i=HU(t,"lstmKernel","basicLSTMCell"),l=HU(n,"lstmBias","basicLSTMCell"),u=HU(r,"data","basicLSTMCell"),c=HU(a,"c","basicLSTMCell"),p=HU(s,"h","basicLSTMCell"),h=bX([u,p],1),d=NH(h,i),f=fX(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=xX(f,[0,0],y),x=xX(f,[0,g],y),w=xX(f,[0,2*g],y),k=xX(f,[0,3*g],y),v=fX(zq(Uq(b),_Z(x)),zq(c,Uq(fX(o,w))));return[v,zq(_Z(v),Uq(k))]}});const FZ=KU({batchToSpaceND_:function(e,t,n){const r=HU(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));dz(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),dz(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),dz(r.shape[0]%a==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const s={x:r},o={blockShape:t,crops:n};return FU.runKernel(EB,s,o)}});const OZ=KU({batchNorm_:function(e,t,n,r,a,s){null==s&&(s=.001);const o=HU(e,"x","batchNorm"),i=HU(t,"mean","batchNorm"),l=HU(n,"variance","batchNorm");let u,c;null!=a&&(u=HU(a,"scale","batchNorm")),null!=r&&(c=HU(r,"offset","batchNorm")),dz(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),dz(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),dz(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p=function(e){let t;return t=0===e.rank||1===e.rank?Wq(e,[1,1,1,e.size]):2===e.rank?Wq(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Wq(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),h={x:p,scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:s},f=FU.runKernel(yP,h,d);return Wq(f,o.shape)}});const MZ=KU({batchNorm2d_:function(e,t,n,r,a,s){const o=HU(e,"x","batchNorm"),i=HU(t,"mean","batchNorm"),l=HU(n,"variance","batchNorm");let u,c;return null!=a&&(u=HU(a,"scale","batchNorm")),null!=r&&(c=HU(r,"offset","batchNorm")),dz(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),dz(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),dz(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&dz(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&dz(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),OZ(o,i,l,c,u,s)}});const LZ=KU({batchNorm3d_:function(e,t,n,r,a,s){const o=HU(e,"x","batchNorm"),i=HU(t,"mean","batchNorm"),l=HU(n,"variance","batchNorm");let u,c;return null!=a&&(u=HU(a,"scale","batchNorm")),null!=r&&(c=HU(r,"offset","batchNorm")),dz(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),dz(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),dz(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&dz(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&dz(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),OZ(o,i,l,c,u,s)}});const zZ=KU({batchNorm4d_:function(e,t,n,r,a,s){const o=HU(e,"x","batchNorm"),i=HU(t,"mean","batchNorm"),l=HU(n,"variance","batchNorm");let u,c;return null!=a&&(u=HU(a,"scale","batchNorm")),null!=r&&(c=HU(r,"offset","batchNorm")),dz(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),dz(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),dz(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&dz(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&dz(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),OZ(o,i,l,c,u,s)}});const BZ=KU({broadcastArgs_:function(e,t){const n=HU(e,"s0","broadcastArgs","int32"),r=HU(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const a={s0:n,s1:r};return FU.runKernel(AB,a)}});const PZ=KU({ceil_:function(e){const t={x:HU(e,"x","ceil","float32")};return FU.runKernel(_B,t)}});const VZ=KU({clipByValue_:function(e,t,n){const r=HU(e,"x","clipByValue");if(dz(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return JX(r.shape,t,r.dtype);const a={x:r},s={clipValueMin:t,clipValueMax:n};return FU.runKernel(DB,a,s)}});const WZ=KU({concat1d_:function(e){return bX(e,0)}});const UZ=KU({concat2d_:function(e,t){return bX(e,t)}});const GZ=KU({concat3d_:function(e,t){return bX(e,t)}});const HZ=KU({concat4d_:function(e,t){return bX(e,t)}});const jZ=KU({conv1d_:function(e,t,n,r,a="NWC",s=1,o){const i=HU(e,"x","conv1d"),l=HU(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=Wq(i,[1,i.shape[0],i.shape[1]])),dz(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),dz(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Fq("conv1d",r,o),dz(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),dz(_q(n,s),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`)),dz("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const p=Wq(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=Wq(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=LX(h,p,[1,n],r,"NHWC",[1,s],o);return Wq(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const qZ=KU({conv2dTranspose_:function(e,t,n,r,a,s){const o=HU(e,"x","conv2dTranspose"),i=HU(t,"filter","conv2dTranspose");return BX(n,o,i,r,a,"NHWC",s)}});const KZ=KU({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){const o=HU(e,"x","conv3d"),i=HU(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Wq(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),dz(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),dz(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),dz(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),dz(_q(n,s),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),dz("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const c={x:l,filter:i},p={strides:n,pad:r,dataFormat:a,dilations:s},h=FU.runKernel(PB,c,p);return u?Wq(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const XZ=KU({conv3DBackpropInput_:function(e,t,n,r,a){dz(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let s=e,o=t,i=!1;4===t.rank&&(i=!0,o=Wq(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const l=s[4],u=o.shape[4];dz(5===s.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`)),dz(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),dz(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),dz(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),dz(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:a,strides:r,inputShape:s},h=FU.runKernel(WB,c,p);return i?Wq(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const YZ=KU({conv3dTranspose_:function(e,t,n,r,a){const s=HU(e,"x","conv3dTranspose"),o=HU(t,"filter","conv3dTranspose");return XZ(n,s,o,r,a)}});const ZZ=KU({cos_:function(e){const t={x:HU(e,"x","cos","float32")};return FU.runKernel(UB,t)}});const JZ=KU({cosh_:function(e){const t={x:HU(e,"x","cosh","float32")};return FU.runKernel(GB,t)}});const QZ=KU({cumprod_:function(e,t=0,n=!1,r=!1){const a={x:HU(e,"x","cumprod")},s={axis:t,exclusive:n,reverse:r};return FU.runKernel(HB,a,s)}});const eJ=KU({cumsum_:function(e,t=0,n=!1,r=!1){const a={x:HU(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:r};return FU.runKernel(jB,a,s)}});const tJ=KU({denseBincount_:function(e,t,n,r=!1){const a=HU(e,"x","denseBincount"),s=HU(t,"weights","denseBincount");dz("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),dz(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),dz(n>=0,(()=>`size must be non-negative, but got ${n}.`)),dz(s.size===a.size||0===s.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`));const o={x:a,weights:s},i={size:n,binaryOutput:r};return FU.runKernel(KB,o,i)}});const nJ=KU({depthToSpace_:function(e,t,n="NHWC"){const r=HU(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];dz(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),dz(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),dz(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),dz(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},l={blockSize:t,dataFormat:n};return FU.runKernel(XB,i,l)}});const rJ=KU({diag_:function(e){const t={x:HU(e,"x","diag")};return FU.runKernel(QB,t)}});const aJ=KU({dilation2d_:function(e,t,n,r,a=[1,1],s="NHWC"){const o=HU(e,"x","dilation2d"),i=HU(t,"filter","dilation2d");dz(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),dz(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),dz("NHWC"===s,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`));let l=o,u=!1;3===o.rank&&(l=Wq(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0);const c={x:l,filter:i},p={strides:n,pad:r,dilations:a},h=FU.runKernel(eP,c,p);return u?Wq(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const sJ=KU({equal_:function(e,t){let n=HU(e,"a","equal","string_or_numeric"),r=HU(t,"b","equal","string_or_numeric");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(lP,a)}});const oJ=KU({divNoNan_:function(e,t){let n=HU(e,"a","div"),r=HU(t,"b","div");[n,r]=IU(n,r);const a=gX(n,r),s=vX(a),o=sJ(r,s);return vY(o,s,a)}});const iJ=KU({dot_:function(e,t){const n=HU(e,"t1","dot"),r=HU(t,"t2","dot");dz(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(dz(a===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`)),1===n.rank&&1===r.rank){const e=Wq(n,[1,-1]),t=Wq(r,[-1,1]),a=NH(e,t);return Wq(a,[])}if(1===n.rank&&2===r.rank){const e=Wq(n,[1,-1]),t=Wq(r,[r.shape[0],r.shape[1]]),a=NH(e,t);return Wq(a,[a.size])}if(2===n.rank&&1===r.rank){const e=Wq(r,[-1,1]),t=NH(n,e);return Wq(t,[t.size])}{const e=Wq(r,[r.shape[0],r.shape[1]]);return NH(n,e)}}});const lJ=KU({einsum_:function(e,...t){const n=t.map(((e,t)=>HU(e,`tensors${t}`,"einsum"))),r={equation:e};return FU.runKernel(aP,n,r)}});const uJ=KU({erf_:function(e){let t=HU(e,"x","erf");dz("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=ZG(t,"float32"));const n={x:t};return FU.runKernel(iP,n)}});const cJ=KU({euclideanNorm_:function(e,t=null,n=!1){return BY(e,"euclidean",t,n)}});const pJ=KU({expm1_:function(e){const t={x:HU(e,"x","expm1")};return FU.runKernel(pP,t)}});const hJ=KU({floor_:function(e){const t={x:HU(e,"x","floor","float32")};return FU.runKernel(mP,t)}});const dJ=KU({gather_:function(e,t,n=0,r=0){const a={x:HU(e,"x","gather"),indices:HU(t,"indices","gather","int32")},s={axis:n,batchDims:r};return FU.runKernel(bP,a,s)}});const fJ=KU({isFinite_:function(e){const t={x:HU(e,"x","isFinite")};return FU.runKernel(IP,t)}});const mJ=KU({isInf_:function(e){const t={x:HU(e,"x","isInf")};return FU.runKernel(TP,t)}});const gJ=KU({isNaN_:function(e){const t={x:HU(e,"x","isNaN")};return FU.runKernel(EP,t)}});const yJ=KU({less_:function(e,t){let n=HU(e,"a","less","string_or_numeric"),r=HU(t,"b","less","string_or_numeric");[n,r]=IU(n,r),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(CP,a)}});function bJ(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return FU.runKernel(RP,{},r)}const xJ=KU({localResponseNormalization_:function(e,t=5,n=1,r=1,a=.5){const s=HU(e,"x","localResponseNormalization");dz(4===s.rank||3===s.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`)),dz(wz(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=s,i=!1;3===s.rank&&(i=!0,o=Wq(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:r,beta:a},c=FU.runKernel(PP,l,u);return i?Wq(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const wJ=KU({softplus_:function(e){const t={x:HU(e,"x","softplus")};return FU.runKernel(BV,t)}});const kJ=KU({logSigmoid_:function(e){const t=HU(e,"x","logSigmoid");return OX((e=>({value:XH(wJ(XH(e))),gradFunc:t=>zq(t,Uq(XH(e)))})))(t)}});const vJ=KU({logSoftmax_:function(e,t=-1){const n=HU(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return OX(((e,n)=>{const r=DY(e,t,!0),a=xY(e,r),s=xY(ZG(a,"float32"),nZ(Hq(oZ(a),t,!0)));n([s]);return{value:s,gradFunc:(e,n)=>{const[r]=n,a=oZ(r);return xY(e,zq(Hq(e,t,!0),a))}}}))(n)}});const NJ=KU({logicalNot_:function(e){const t={x:HU(e,"x","logicalNot","bool")};return FU.runKernel(OP,t)}});const SJ=KU({logicalOr_:function(e,t){const n=HU(e,"a","logicalOr","bool"),r=HU(t,"b","logicalOr","bool");nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(MP,a)}});const IJ=KU({logicalXor_:function(e,t){const n=HU(e,"a","logicalXor","bool"),r=HU(t,"b","logicalXor","bool");return nj(n.shape,r.shape),EY(SJ(e,t),NJ(EY(e,t)))}});var TJ={};t(TJ,"searchSorted",(()=>$J));const EJ=2147483648;const $J=KU({searchSorted_:function(e,t,n="left"){const r=HU(e,"sortedSequence","searchSorted"),a=HU(t,"values","searchSorted"),s=r.shape[r.shape.length-1],o=a.shape[a.shape.length-1],i=Wq(r,[-1,s]),l=Wq(a,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(yz(l.shape)>=EJ)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=EJ)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const u={sortedSequence:i,values:l},c={side:n};return FU.runKernel(RV,u,c)}});function CJ(e,t){return $J(e,t,"left")}const AJ=KU({maxPool_:function(e,t,n,r,a){const s=HU(e,"x","maxPool");let o=s,i=!1;3===s.rank&&(i=!0,o=Wq(s,[1,s.shape[0],s.shape[1],s.shape[2]])),dz(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),dz(_q(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Fq("maxPool",r,a);const l={x:o},u={filterSize:t,strides:n,pad:r,dimRoundingMode:a},c=FU.runKernel(GP,l,u);return i?Wq(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const RJ=KU({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){const o=HU(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=Wq(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),dz(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),dz("NDHWC"===s,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),Fq("maxPool3d",r,a);const u={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s},p=FU.runKernel(jP,u,c);return l?Wq(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const _J=KU({maxPoolWithArgmax_:function(e,t,n,r,a=!1){const s={x:HU(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},i=FU.runKernel(KP,s,o);return{result:i[0],indexes:i[1]}}});const DJ=KU({maximum_:function(e,t){let n=HU(e,"a","maximum"),r=HU(t,"b","maximum");[n,r]=IU(n,r),"bool"===n.dtype&&(n=ZG(n,"int32"),r=ZG(r,"int32")),nj(n.shape,r.shape);const a={a:n,b:r};return FU.runKernel(UP,a)}});function FJ(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=HU(e,"x","meshgrid",e instanceof fU?e.dtype:"float32");if(void 0===t)return[r];let a=HU(t,"y","meshgrid",t instanceof fU?t.dtype:"float32");const s=yz(r.shape),o=yz(a.shape);return"xy"===n?(r=Wq(r,[1,-1]),a=Wq(a,[-1,1]),[NH(XY([o,1],r.dtype),r),NH(a,XY([1,s],a.dtype))]):(r=Wq(r,[-1,1]),a=Wq(a,[1,-1]),[NH(r,XY([1,o],r.dtype)),NH(XY([s,1],a.dtype),a)])}const OJ=KU({mirrorPad_:function(e,t,n){dz("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=HU(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");dz(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let e=0;e<r.rank;e++)dz(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),dz(t[e][0]>=0&&t[e][0]<=r.shape[e]-a&&t[e][1]>=0&&t[e][1]<=r.shape[e]-a,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-a} or less than 0 for input of shape ${r.shape}`));const s={paddings:t,mode:n},o={x:r};return FU.runKernel(JP,o,s)}});const MJ=KU({mod_:function(e,t){let n=HU(e,"a","mod"),r=HU(t,"b","mod");[n,r]=IU(n,r);const a={a:n,b:r};return FU.runKernel(QP,a)}});const LJ=KU({moments_:function(e,t=null,n=!1){const r=Ez(t,(e=HU(e,"x","moments")).shape),a=qY(e,r,n);let s=a.shape;n||(s=hq(a.shape,r));const o=LY(xY(ZG(e,"float32"),Wq(a,s)));return{mean:a,variance:qY(o,r,n)}}});const zJ=KU({multiRNNCell_:function(e,t,n,r){const a=HU(t,"data","multiRNNCell"),s=jU(n,"c","multiRNNCell"),o=jU(r,"h","multiRNNCell");let i=a;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const BJ=KU({multinomial_:function(e,t,n,r=!1){const a=HU(e,"logits","multinomial"),s=a.size,o=a.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Wq(a,[1,-1]):a},l={numSamples:t,seed:n,normalized:r},u=FU.runKernel(eV,i,l);return 1===o?Wq(u,[u.size]):u}});const PJ=KU({onesLike_:function(e){const t={x:HU(e,"x","onesLike")};return FU.runKernel(iV,t)}});const VJ=KU({outerProduct_:function(e,t){const n=HU(e,"v1","outerProduct"),r=HU(t,"v2","outerProduct");dz(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const a=Wq(n,[-1,1]),s=Wq(r,[1,-1]);return NH(a,s)}});const WJ=KU({pad_:function(e,t,n=0){const r=HU(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},s={x:r};return FU.runKernel(cV,s,a)}});const UJ=KU({pad1d_:function(e,t,n=0){return dz(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),WJ(e,[t],n)}});const GJ=KU({pad2d_:function(e,t,n=0){return dz(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),WJ(e,t,n)}});const HJ=KU({pad3d_:function(e,t,n=0){return dz(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),WJ(e,t,n)}});const jJ=KU({pad4d_:function(e,t,n=0){return dz(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),WJ(e,t,n)}});const qJ=KU({spaceToBatchND_:function(e,t,n){const r=HU(e,"x","spaceToBatchND");dz(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),dz(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),dz(r.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:r},s={blockShape:t,paddings:n};return FU.runKernel(WV,a,s)}});const KJ=KU({pool_:function(e,t,n,r,a,s,o){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const i=HU(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=Wq(i,[1,i.shape[0],i.shape[1],i.shape[2]])),dz(_q(s,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`));const c=vq(l.shape,t,s,a,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t])),l=t.map(((e,t)=>[r[t],i[t]])),u=t.map(((e,t)=>[0,o[t]]));return[l,u]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?l:qJ(l,p,f),b=("avg"===n?()=>AZ(y,t,s,g,o):()=>AJ(y,t,s,g,o))(),x=d?b:FZ(b,p,m);return u?Wq(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const XJ=KU({prod_:function(e,t=null,n=!1){let r=HU(e,"x","prod");"bool"===r.dtype&&(r=ZG(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return FU.runKernel(fV,a,s)}});const YJ=KU({raggedGather_:function(e,t,n,r){const a={paramsNestedSplits:e.map(((e,t)=>HU(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:HU(t,"paramsDenseValues","raggedGather"),indices:HU(n,"indices","raggedGather","int32")},s={outputRaggedRank:r},o=FU.runKernel(mV,a,s);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const ZJ=KU({raggedTensorToTensor_:function(e,t,n,r,a){const s=HU(e,"shape","raggedTensorToTensor","int32"),o=HU(t,"values","raggedTensorToTensor"),i={shape:s,values:o,defaultValue:HU(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>HU(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:a};return FU.runKernel(gV,i,l)}});const JJ=KU({rand_:function(e,t,n){const r=yz(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return FU.makeTensor(a,e,n)}});var QJ={},eQ=s("6hTlM"),tQ=s("eTxuL"),nQ=s("eRcXS"),rQ=s("aqXnw"),aQ=s("bUIhf"),sQ=s("13wuC"),oQ={};!function(e,t,n){var r,a=256,o=n.pow(a,6),i=n.pow(2,52),l=2*i,u=255;function c(s,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[s,m(t)]:null==s?function(){try{var n;return r&&(n=r.randomBytes)?n=n(a):(n=new Uint8Array(a),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var s=e.navigator,o=s&&s.plugins;return[+new Date,e,o,e.screen,m(t)]}}():s,3),g),b=new p(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,r,a){return a&&(a.S&&h(a,b),e.state=function(){return h(b,{})}),r?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function p(e){var t,n=e.length,r=this,s=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<a;)i[s]=s++;for(s=0;s<a;s++)i[s]=i[o=u&o+e[s%n]+(t=i[s])],i[o]=t;(r.g=function(e){for(var t,n=0,s=r.i,o=r.j,i=r.S;e--;)t=i[s=u&s+1],n=n*a+i[u&(i[s]=i[o=u&o+t])+(i[o]=t)];return r.i=s,r.j=o,n})(a)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(d(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function f(e,t){for(var n,r=e+"",a=0;a<r.length;)t[u&a]=u&(n^=19*t[u&a])+r.charCodeAt(a++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),oQ){oQ=c;try{r=s("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:oQ,[],Math),oQ.alea=eQ,oQ.xor128=tQ,oQ.xorwow=nQ,oQ.xorshift7=rQ,oQ.xor4096=aQ,oQ.tychei=sQ,QJ=oQ;class iQ{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=QJ.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class lQ{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const a=r||Math.random();this.randu=QJ.alea(a.toString()),this.randn=new iQ(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class uQ{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=QJ.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const cQ=KU({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const s=new lQ(t,n,r,a),o=YG(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const pQ=KU({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new iQ(t,n,r,!1,a),o=YG(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const hQ=KU({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return pQ(e,0,1,t,n)}});const dQ=KU({randomUniform_:function(e,t=0,n=1,r="float32",a){const s=YG(e,r),o=new uQ(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=o.nextValue();return s.toTensor()}});const fQ=KU({reciprocal_:function(e){const t={x:HU(e,"x","reciprocal")};return FU.runKernel(xV,t)}});const mQ=KU({reverse1d_:function(e){const t=HU(e,"x","reverse");return dz(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),TX(t,0)}});const gQ=KU({reverse2d_:function(e,t){const n=HU(e,"x","reverse");return dz(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),TX(n,t)}});const yQ=KU({reverse3d_:function(e,t){const n=HU(e,"x","reverse");return dz(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),TX(n,t)}});const bQ=KU({reverse4d_:function(e,t){const n=HU(e,"x","reverse");return dz(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),TX(n,t)}});const xQ=KU({rsqrt_:function(e){const t={x:HU(e,"x","rsqrt","float32")};return FU.runKernel(CV,t)}});const wQ=KU({selu_:function(e){const t={x:HU(e,"x","selu")};return FU.runKernel(DV,t)}});const kQ=KU({separableConv2d_:function(e,t,n,r,a,s=[1,1],o="NHWC"){const i=HU(e,"x","separableConv2d"),l=HU(t,"depthwiseFilter","separableConv2d"),u=HU(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=Wq(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");dz(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),dz(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),dz(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),dz(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),dz(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const h=l.shape[2],d=l.shape[3];dz(u.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${u.shape[2]}.`));const f=VX(c,l,r,a,o,s),m=LX(f,u,1,"valid",o);return p?Wq(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const vQ=async function(e,t){const n=HU(e,"x","setdiff1d"),r=HU(t,"y","setdiff1d");dz(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),dz(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),dz(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const a=await n.data(),s=await r.data(),o=new Set(s);let i=0;for(let e=0;e<a.length;e++)o.has(a[e])||i++;const l=new cU([i],n.dtype),u=new cU([i],"int32");for(let e=0,t=0;e<a.length;e++)o.has(a[e])||(l.values[t]=a[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const NQ=KU({sign_:function(e){const t={x:HU(e,"x","sign")};return FU.runKernel(LV,t)}});const SQ=KU({sin_:function(e){const t={x:HU(e,"x","sin","float32")};return FU.runKernel(OV,t)}});const IQ=KU({sinh_:function(e){const t={x:HU(e,"x","sinh")};return FU.runKernel(MV,t)}});const TQ=KU({slice1d_:function(e,t,n){const r=HU(e,"x","slice1d");return dz(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),xX(r,[t],[n])}});const EQ=KU({slice2d_:function(e,t,n){const r=HU(e,"x","slice2d");return dz(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),xX(r,t,n)}});const $Q=KU({slice3d_:function(e,t,n){const r=HU(e,"x","slice3d");return dz(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),xX(r,t,n)}});const CQ=KU({slice4d_:function(e,t,n){const r=HU(e,"x","slice4d");return dz(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),xX(r,t,n)}});const AQ=KU({softmax_:function(e,t=-1){const n=HU(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},a={dim:t};return FU.runKernel(GV,r,a)}});const RQ=KU({stridedSlice_:function(e,t,n,r,a=0,s=0,o=0,i=0,l=0){const u={x:HU(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return FU.runKernel(JV,u,c)}});const _Q=KU({tan_:function(e){const t={x:HU(e,"x","tan","float32")};return FU.runKernel(rW,t)}});function DQ(e,t,n){if(mz(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=WU(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return YU(e,t,r,n)}function FQ(e,t,n){if(mz(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=WU(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return YU(e,t,r,n)}function OQ(e,t,n){if(mz(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=WU(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return YU(e,t=t||r,r,n)}const MQ=KU({topk_:function(e,t=1,n=!0){const r=HU(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const s={x:r},o={k:t,sorted:n},[i,l]=FU.runKernel(oW,s,o);return{values:i,indices:l}}});const LQ=KU({truncatedNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new iQ(t,n,r,!0,a),o=YG(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const zQ=KU({unique_:function(e,t=0){const n=HU(e,"x","unique","string_or_numeric");dz(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},a={axis:t},[s,o]=FU.runKernel(uW,r,a);return{values:s,indices:o}}});const BQ=KU({unsortedSegmentSum_:function(e,t,n){const r=HU(e,"x","unsortedSegmentSum"),a=HU(t,"segmentIds","unsortedSegmentSum","int32");dz(wz(n),(()=>"numSegments must be of dtype int"));const s={x:r,segmentIds:a},o={numSegments:n};return FU.runKernel(pW,s,o)}});function PQ(e,t){return $J(e,t,"right")}function VQ(e,t=!0,n,r){return FU.makeVariable(e,t,n,r)}const WQ=async function(e){const t=HU(e,"condition","whereAsync","bool"),n=await t.data(),r=dX(t.shape,n);return e!==t&&t.dispose(),r};var UQ={};t(UQ,"booleanMaskAsync",(()=>GQ));const GQ=async function(e,t,n){const r=HU(e,"tensor","boolMask"),a=HU(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;dz(o>0,(()=>"mask cannot be scalar")),fz(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=s;e<s+o;e++)l*=i[e];const u=i.slice(0,s).concat([l],i.slice(s+o)),c=Wq(r,u),p=Wq(a,[-1]),h=await WQ(p),d=PY(h,[1]),f=dJ(c,d,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f};var HQ={};t(HQ,"movingAverage",(()=>jQ));const jQ=KU({movingAverage_:function(e,t,n,r,a=!0){const s=HU(e,"v","movingAverage"),o=HU(t,"x","movingAverage"),i=HU(n,"decay","movingAverage");TU(s,o),dz(xz(s.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=EX(1),u=xY(l,i);let c=zq(xY(o,s),u);if(a){dz(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=HU(r,"step","movingAverage");c=gX(c,xY(l,OY(i,e)))}return fX(s,c)}});var qQ={};t(qQ,"scatterND",(()=>KQ));const KQ=KU({scatterND_:function(e,t,n){const r=HU(e,"indices","scatterND","int32"),a=HU(t,"updates","scatterND");mj(a,r,n);const s={indices:r,updates:a},o={shape:n};return FU.runKernel(AV,s,o)}});var XQ={};t(XQ,"sparseToDense",(()=>YQ));const YQ=KU({sparseToDense_:function(e,t,n,r=0){const a=HU(e,"sparseIndices","sparseToDense","int32"),s=HU(t,"sparseValues","sparseToDense","string_or_numeric"),o=HU(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,o);const i={sparseIndices:a,sparseValues:s,defaultValue:o},l={outputShape:n};return FU.runKernel(XV,i,l)}});var ZQ={};t(ZQ,"gatherND",(()=>JQ));const JQ=KU({gatherND_:function(e,t){const n=HU(t,"indices","gatherND","int32"),r={params:HU(e,"x","gatherND","string_or_numeric"),indices:n};return FU.runKernel(xP,r)}});var QQ={};t(QQ,"dropout",(()=>e0));const e0=KU({dropout_:function(e,t,n,r){const a=HU(e,"x","dropout");if(dz("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),dz(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof fU?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(xz(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,i=gX(hJ(fX(dQ(s,0,1,"float32",r),o)),o);return zq(a,i)}});var t0={};t(t0,"inTopKAsync",(()=>n0));const n0=async function(e,t,n=1){const r=HU(e,"predictions","inTopK"),a=HU(t,"targets","inTopK");dz(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),dz(r.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`)),fz(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];dz(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await r.data(),i=await a.data(),[l,u]=[o.length/s,s],c=Cz("bool",l);for(let e=0;e<l;e++){const t=e*u,r=o.subarray(t,t+u),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),ZU(c,a.shape,"bool")},r0={fft:NX,ifft:IX,rfft:SX,irfft:$X},a0={hammingWindow:YX,hannWindow:ZX,frame:eY,stft:tY},s0={flipLeftRight:rY,grayscaleToRGB:sY,resizeNearestNeighbor:mY,resizeBilinear:fY,rotateWithOffset:oY,cropAndResize:nY,nonMaxSuppression:lY,nonMaxSuppressionAsync:uY,nonMaxSuppressionWithScore:cY,nonMaxSuppressionWithScoreAsync:pY,nonMaxSuppressionPadded:hY,nonMaxSuppressionPaddedAsync:dY,threshold:SY,transform:IY},o0={bandPart:AY,gramSchmidt:VY,qr:HY},i0={absoluteDifference:ZY,computeWeightedLoss:YY,cosineDistance:JY,hingeLoss:QY,huberLoss:tZ,logLoss:rZ,meanSquaredError:sZ,sigmoidCrossEntropy:lZ,softmaxCrossEntropy:cZ},l0={sparseFillEmptyRows:pZ,sparseReshape:hZ,sparseSegmentMean:dZ,sparseSegmentSum:fZ},u0={stringNGrams:mZ,stringSplit:gZ,stringToHashBucketFast:yZ};n(yX,UQ),n(yX,IH),n(yX,RY),n(yX,HQ),n(yX,qQ),n(yX,TJ),n(yX,XQ),n(yX,ZQ),n(yX,QQ),n(yX,jX),n(yX,t0);class c0 extends Mj{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return MH(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return FX(e,t)}dispose(){null!=this.iterations_&&MH(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:EX(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(c0,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class p0 extends c0{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=FU.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=FU.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:OH((()=>vX(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:OH((()=>vX(r).variable(false)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;OH((()=>{const e=fX(zq(s,this.rho),zq(LY(a),1-this.rho)),t=zq(gX(MY(fX(o,this.epsilon)),MY(fX(s,this.epsilon))),a),n=fX(zq(o,this.rho),zq(LY(t),1-this.rho));s.assign(e),o.assign(n);const i=fX(zq(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(MH(this.accumulatedGrads.map((e=>e.variable))),MH(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}p0.className="Adadelta",zj(p0);class h0 extends c0{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=FU.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:OH((()=>JX(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;OH((()=>{const e=fX(s,LY(a));s.assign(e);const t=fX(zq(gX(a,MY(fX(e,FU.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&MH(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}h0.className="Adagrad",zj(h0);class d0 extends c0{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],OH((()=>{this.accBeta1=EX(t).variable(),this.accBeta2=EX(n).variable()})),null==r&&(this.epsilon=FU.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);OH((()=>{const n=xY(1,this.accBeta1),r=xY(1,this.accBeta2);t.forEach(((t,a)=>{const s=FU.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:OH((()=>vX(s).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:OH((()=>vX(s).variable(false)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=fX(zq(i,this.beta1),zq(o,1-this.beta1)),c=fX(zq(l,this.beta2),zq(LY(o),1-this.beta2)),p=gX(u,n),h=gX(c,r);i.assign(u),l.assign(c);const d=fX(zq(gX(p,fX(MY(h),this.epsilon)),-this.learningRate),s);s.assign(d)})),this.accBeta1.assign(zq(this.accBeta1,this.beta1)),this.accBeta2.assign(zq(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&MH(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&MH(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),OH((()=>{this.accBeta1.assign(OY(this.beta1,this.iterations_+1)),this.accBeta2.assign(OY(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}d0.className="Adam",zj(d0);class f0 extends c0{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],OH((()=>{this.iteration=EX(0).variable(),this.accBeta1=EX(t).variable()})),null==r&&(this.epsilon=FU.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);OH((()=>{const n=xY(1,this.accBeta1),r=gX(-this.learningRate,fX(zq(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=FU.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:vX(s).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:vX(s).variable(false)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=fX(zq(i,this.beta1),zq(o,1-this.beta1)),c=zq(l,this.beta2),p=_Y(o),h=DJ(c,p);i.assign(u),l.assign(h);const d=fX(zq(gX(r,n),gX(u,fX(h,this.epsilon))),s);s.assign(d)})),this.iteration.assign(fX(this.iteration,1)),this.accBeta1.assign(zq(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&MH(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&MH(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}f0.className="Adamax",zj(f0);class m0 extends c0{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=FU.registeredVariables[t];OH((()=>{const e=fX(zq(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=LH(EX(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}m0.className="SGD",zj(m0);class g0 extends m0{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=EX(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=FU.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:OH((()=>vX(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&OH((()=>{let e;const t=fX(zq(this.m,a),s);e=this.useNesterov?fX(zq(this.c,fX(s,zq(t,this.m))),r):fX(zq(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&MH(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}g0.className="Momentum",zj(g0);class y0 extends c0{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=FU.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=FU.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:OH((()=>vX(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:OH((()=>vX(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:OH((()=>vX(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;OH((()=>{const e=fX(zq(o,this.decay),zq(LY(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=fX(zq(t,this.decay),zq(s,1-this.decay)),l=gX(zq(s,this.learningRate),MY(xY(e,fX(LY(a),this.epsilon)))),u=fX(zq(i,this.momentum),l);o.assign(e),t.assign(a),i.assign(u);const c=xY(r,u);r.assign(c)}else{const e=fX(zq(o,this.decay),zq(LY(s),1-this.decay)),t=fX(zq(i,this.momentum),gX(zq(s,this.learningRate),MY(fX(e,this.epsilon))));o.assign(e),i.assign(t);const n=xY(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&MH(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&MH(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&MH(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}y0.className="RMSProp",zj(y0);class b0{static sgd(e){return new m0(e)}static momentum(e,t,n=!1){return new g0(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new y0(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new d0(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new p0(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new f0(e,t,n,r,a)}static adagrad(e,t=.1){return new h0(e,t)}}var x0={};t(x0,"train",(()=>w0));const w0={sgd:b0.sgd,momentum:b0.momentum,adadelta:b0.adadelta,adagrad:b0.adagrad,rmsprop:b0.rmsprop,adamax:b0.adamax,adam:b0.adam},k0="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function v0(){return new Promise((e=>k0((()=>e()))))}n(eH,yX),n(eH,x0),n(eH,TH),n(eH,wW),n(eH,iB),n(ez,eH);var N0,S0;nB().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(N0||(N0={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(S0||(S0={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const I0={};function T0(e){return I0[e]}function E0(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return $0(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type){return t.inputNames.slice(e,o).map((e=>$0(e,n,r,a)))}const i=$0(t.inputNames.slice(e)[0],n,r,a),l=i.dataSync();return"number"===s.type?l[0]:OW.toNestedArray(i.shape,l)}const o=t.attrParams[e];return o&&o.value}function $0(e,t,n,r){const[a,s]=R0(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[A0(a,e)]));return void 0!==o?t[A0(a,o)][s]:void 0}function C0(e,t){const[n,r,a]=R0(e);return[A0(n,t&&t.currentContextId),r,a]}function A0(e,t){return t?`${e}-${t}`:e}function R0(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function _0(e,t,n){let r=E0("pad",e,t,n);if("explicit"===r){r=E0("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function D0(e){return e.kept?e:JG(e)}var F0={};t(F0,"json",(()=>O0));const O0=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var M0={};t(M0,"json",(()=>L0));const L0=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var z0={};t(z0,"json",(()=>B0));const B0=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var P0={};t(P0,"json",(()=>V0));const V0=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var W0={};t(W0,"json",(()=>U0));const U0=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var G0={};t(G0,"json",(()=>H0));const H0=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var j0={};t(j0,"json",(()=>q0));const q0=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var K0={};t(K0,"json",(()=>X0));const X0=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var Y0={};t(Y0,"json",(()=>Z0));const Z0=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var J0={};t(J0,"json",(()=>Q0));const Q0=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var e1={};t(e1,"json",(()=>t1));const t1=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var n1={};t(n1,"json",(()=>r1));const r1=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var a1={};t(a1,"json",(()=>s1));const s1=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var o1={};t(o1,"json",(()=>i1));const i1=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var l1={};t(l1,"json",(()=>u1));const u1=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var c1={};t(c1,"json",(()=>p1));const p1=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var h1={};t(h1,"json",(()=>d1));const d1=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var f1={};t(f1,"json",(()=>m1));const m1=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var g1={};t(g1,"json",(()=>y1));const y1=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var b1=Fs;class x1{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[F0,M0,z0,P0,W0,G0,j0,K0,Y0,J0,e1,n1,a1,o1,l1,c1,h1,f1,g1].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=C0(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=C0(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=C0(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:l,weights:a,placeholders:r,signature:t,functions:h};return s.length>0&&(d.initNodes=s),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=T0(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=k1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=k1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=R1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=R1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=N1(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=N1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=A1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=A1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=v1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=v1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=D1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=D1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=C1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=C1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=_1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=_1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=T1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=T1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=E1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=E1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=I1(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=I1(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=C0(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:S1(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[a,,s]=C0(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=C0(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function w1(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=nB().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==b1)return new b1(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function k1(e,t,n,r=!1){const a=e[t];return null!=a?w1(a.s,r):n}function v1(e,t,n){const r=e[t];return r?r.b:n}function N1(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function S1(e){switch("string"==typeof e&&(e=N0[e]),e){case N0.DT_FLOAT:case N0.DT_HALF:return"float32";case N0.DT_INT32:case N0.DT_INT64:case N0.DT_INT8:case N0.DT_UINT8:return"int32";case N0.DT_BOOL:return"bool";case N0.DT_DOUBLE:return"float32";case N0.DT_STRING:return"string";default:return null}}function I1(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function T1(e,t,n){const r=e[t];return r&&r.type?S1(r.type):n}function E1(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>S1(e))):n}function $1(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function C1(e,t,n){const r=e[t];return r&&r.shape?$1(r.shape):n}function A1(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function R1(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>w1(e,r))):n}function _1(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>$1(e))):n}function D1(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class F1{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return $0(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return $0(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return N1(this.node.rawAttrs,e,t);if(null!=n.s)return k1(this.node.rawAttrs,e,t);if(null!=n.b)return v1(this.node.rawAttrs,e,t);if(null!=n.shape)return C1(this.node.rawAttrs,e,t);if(null!=n.type)return T1(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return A1(this.node.rawAttrs,e,t);if(null!=n.list.s)return R1(this.node.rawAttrs,e,t);if(null!=n.list.shape)return _1(this.node.rawAttrs,e,t);if(null!=n.list.b)return D1(this.node.rawAttrs,e,t);if(null!=n.list.type)return E1(this.node.rawAttrs,e,t)}return t}}var O1={};n(O1,yX);function M1(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){OW.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const a=e[r],s=t[r];OW.assert(a<0||s<0||a===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function L1(e){return"number"!=typeof e&&!e.some((e=>e<0))}function z1(e,t,n){let r=B1(e,n);const a=!L1(r);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach((e=>{r=B1(e.shape,r)})),!L1(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function B1(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class P1{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=EX(0),LH(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),M1(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,LH(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ZU([],[0].concat(this.elementShape));const n=this.readMany(e);return M1(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),$Y(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ZU([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return M1(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),bX(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,CY(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];OH((()=>{t=Wq(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=Wq(xX(t,o,i),this.elementShape)}return s}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class V1{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);M1(t,e.shape,"TensorList shape mismatch: "),LH(e)})),this.idTensor=EX(0),this.maxNumElements=r,LH(this.idTensor)}get id(){return this.idTensor.id}copy(){return new V1([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);M1(e,this.elementShape,"TensorList shape mismatch: ");const r=z1(this.elementShape,this.tensors,e);return OH((()=>{const e=this.tensors.map((e=>Wq(e,r)));return $Y(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=z1(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,M1(r.shape,e,"TensorList shape mismatch: "),Wq(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(M1(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");LH(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new V1([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);M1(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=z1(this.elementShape,this.tensors,t);return Wq(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);M1(this.elementShape,t.shape,"TensorList shape mismatch: "),LH(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);M1(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=z1(this.elementShape,this.tensors,n);return 0===e.length?ZU([],[0].concat(r)):OH((()=>{const t=e.map((e=>Wq(this.tensors[e],r)));return $Y(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);M1(this.elementShape,t,"TensorList shape mismatch: ");const n=z1(this.elementShape,this.tensors,t);return 0===this.size()?ZU([],[0].concat(n)):OH((()=>{const e=this.tensors.map((e=>Wq(e,n)));return bX(e,0)}))}}const W1=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=E0("thenBranch",e,t,n),a=E0("elseBranch",e,t,n),s=E0("cond",e,t,n),o=E0("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=E0("body",e,t,n),a=E0("cond",e,t,n),s=E0("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=s;for(;l[0];){const e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[D0(E0("pred",e,t,n))];case"Switch":{const r=E0("pred",e,t,n);let a=E0("data",e,t,n);return a.kept||(a=D0(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==$0(e,t,n)));if(r){return[D0($0(r,t,n))]}return}case"Enter":{const r=E0("frameName",e,t,n),a=E0("tensor",e,t,n);return n.enterFrame(r),[D0(a)]}case"Exit":{const r=E0("tensor",e,t,n);return n.exitFrame(),[D0(r)]}case"NextIteration":{const r=E0("tensor",e,t,n);return n.nextIteration(),[D0(r)]}case"TensorArrayV3":{const r=E0("size",e,t,n),a=E0("dtype",e,t,n),s=E0("elementShape",e,t,n),o=E0("dynamicSize",e,t,n),i=E0("clearAfterRead",e,t,n),l=E0("identicalElementShapes",e,t,n),u=E0("name",e,t,n),c=new P1(u,a,r,s,l,o,i);return n.addTensorArray(c),[c.idTensor,EX(1)]}case"TensorArrayWriteV3":{const r=E0("tensorArrayId",e,t,n),a=E0("index",e,t,n),s=E0("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=E0("tensorArrayId",e,t,n),a=E0("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=E0("tensorArrayId",e,t,n),a=E0("indices",e,t,n),s=E0("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=E0("tensorArrayId",e,t,n),a=E0("indices",e,t,n),s=E0("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=E0("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=E0("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=E0("tensorArrayId",e,t,n),a=E0("tensor",e,t,n),s=E0("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=E0("tensorArrayId",e,t,n);return[EX(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=E0("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=E0("tensorListId",e,t,n),a=E0("index",e,t,n),s=E0("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=E0("tensorListId",e,t,n),a=E0("index",e,t,n),s=E0("elementShape",e,t,n),o=E0("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=E0("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new V1([],n,e.dtype,r),o=CY(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(E0("tensor",e,t,n),r,E0("elementShape",e,t,n),E0("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=E0("elementShape",e,t,n),a=E0("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=E0(s,e,t,n),i=function(e,t,n,r){return new V1([],e,t,r)}(r,a,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=E0("tensorListId",e,t,n),a=E0("indices",e,t,n),s=E0("elementShape",e,t,n),o=E0("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=E0("tensorListId",e,t,n),a=E0("elementShape",e,t,n),s=E0("elementDType",e,t,n),o=E0("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);M1(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=CY(e);return new V1(a,t,r)}(E0("tensor",e,t,n),E0("elementShape",e,t,n),E0("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=E0("tensorListId",e,t,n),a=n.getTensorList(r.id),s=E0("dtype",e,t,n),o=E0("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=E0("tensorListId",e,t,n),a=E0("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=E0("tensorListId",e,t,n),a=E0("elementShape",e,t,n),s=E0("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=E0("tensor",e,t,n),a=E0("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=B1(e.shape.slice(1),n),o=0===r?0:e.size/r,i=OH((()=>{const n=[];e=Wq(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],l=[1,t[r],o];n[r]=Wq(xX(e,i,l),s)}return e.dispose(),n})),l=new V1([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)l.setItem(e,i[e]);return l}(r,E0("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const r=E0("tensorListId",e,t,n);return[EX(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=E0("tensorListId",e,t,n),a=E0("size",e,t,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function U1(e,t,n){const[r,a]=E0("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,l="fusedbatchnorm"===r,u=E0("numArgs",e,t,n);if(s){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=E0("strides",e,t,n),p=_0(e,t,n),h=E0("dataFormat",e,t,n).toUpperCase(),d=E0("dilations",e,t,n);let[f,m]=E0("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:E0("leakyreluAlpha",e,t,n)}}function G1(e,t,n){return{boxes:E0("boxes",e,t,n),scores:E0("scores",e,t,n),maxOutputSize:E0("maxOutputSize",e,t,n),iouThreshold:E0("iouThreshold",e,t,n),scoreThreshold:E0("scoreThreshold",e,t,n),softNmsSigma:E0("softNmsSigma",e,t,n)}}class H1{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=EX(0),this.tensorMap=new Map,LH(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return EX(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),OH((()=>{const e=CY(t),r=n.length,a=e.length;OW.assert(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let t=0;t<r;t++){const r=n[t],a=e[t];LH(a),this.tensorMap.set(r,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return OH((()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return $Y(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function j1(e,t,n,r,a=OH){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(E0("a",e,t,n),E0("b",e,t,n))];case"AddN":return[r.addN(E0("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(E0("a",e,t,n),E0("b",e,t,n))];case"Mul":return[r.mul(E0("a",e,t,n),E0("b",e,t,n))];case"RealDiv":case"Div":return[r.div(E0("a",e,t,n),E0("b",e,t,n))];case"DivNoNan":return[r.divNoNan(E0("a",e,t,n),E0("b",e,t,n))];case"FloorDiv":return[r.floorDiv(E0("a",e,t,n),E0("b",e,t,n))];case"Sub":return[r.sub(E0("a",e,t,n),E0("b",e,t,n))];case"Minimum":return[r.minimum(E0("a",e,t,n),E0("b",e,t,n))];case"Maximum":return[r.maximum(E0("a",e,t,n),E0("b",e,t,n))];case"Pow":return[r.pow(E0("a",e,t,n),E0("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(E0("a",e,t,n),E0("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(E0("x",e,t,n))];case"Acos":return[r.acos(E0("x",e,t,n))];case"Acosh":return[r.acosh(E0("x",e,t,n))];case"Asin":return[r.asin(E0("x",e,t,n))];case"Asinh":return[r.asinh(E0("x",e,t,n))];case"Atan":return[r.atan(E0("x",e,t,n))];case"Atan2":return[r.atan2(E0("x",e,t,n),E0("y",e,t,n))];case"Atanh":return[r.atanh(E0("x",e,t,n))];case"Ceil":return[r.ceil(E0("x",e,t,n))];case"Complex":return[r.complex(E0("real",e,t,n),E0("imag",e,t,n))];case"Cos":return[r.cos(E0("x",e,t,n))];case"Cosh":return[r.cosh(E0("x",e,t,n))];case"Elu":return[r.elu(E0("x",e,t,n))];case"Erf":return[r.erf(E0("x",e,t,n))];case"Exp":return[r.exp(E0("x",e,t,n))];case"Expm1":return[r.expm1(E0("x",e,t,n))];case"Floor":return[r.floor(E0("x",e,t,n))];case"Log":return[r.log(E0("x",e,t,n))];case"Log1p":return[r.log1p(E0("x",e,t,n))];case"Imag":return[r.imag(E0("x",e,t,n))];case"Neg":return[r.neg(E0("x",e,t,n))];case"Reciprocal":return[r.reciprocal(E0("x",e,t,n))];case"Real":return[r.real(E0("x",e,t,n))];case"Relu":return[r.relu(E0("x",e,t,n))];case"Round":return[r.round(E0("x",e,t,n))];case"Selu":return[r.selu(E0("x",e,t,n))];case"Sigmoid":return[r.sigmoid(E0("x",e,t,n))];case"Sin":return[r.sin(E0("x",e,t,n))];case"Sign":return[r.sign(E0("x",e,t,n))];case"Sinh":return[r.sinh(E0("x",e,t,n))];case"Softplus":return[r.softplus(E0("x",e,t,n))];case"Sqrt":return[r.sqrt(E0("x",e,t,n))];case"Square":return[r.square(E0("x",e,t,n))];case"Tanh":return[r.tanh(E0("x",e,t,n))];case"Tan":return[r.tan(E0("x",e,t,n))];case"ClipByValue":return[r.clipByValue(E0("x",e,t,n),E0("clipValueMin",e,t,n),E0("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(E0("x",e,t,n))];case"Rsqrt":return[r.rsqrt($0(e.inputNames[0],t,n))];case"Prod":return[r.prod(E0("x",e,t,n),E0("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(E0("x",e,t,n),E0("alpha",e,t,n))];case"Prelu":return[r.prelu(E0("x",e,t,n),E0("alpha",e,t,n))];case"IsNan":return[r.isNaN($0(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return W1(e,t,n);case"convolution":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Conv1D":{const a=E0("stride",e,t,n),s=E0("pad",e,t,n),o=E0("dataFormat",e,t,n).toUpperCase(),i=E0("dilation",e,t,n);return[r.conv1d(E0("x",e,t,n),E0("filter",e,t,n),a,s,o,i)]}case"Conv2D":{const a=E0("strides",e,t,n),s=_0(e,t,n),o=E0("dataFormat",e,t,n).toUpperCase(),i=E0("dilations",e,t,n);return[r.conv2d(E0("x",e,t,n),E0("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=U1(e,t,n);return[r.fused.conv2d({x:E0("x",e,t,n),filter:E0("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=U1(e,t,n);return[r.fused.depthwiseConv2d({x:E0("x",e,t,n),filter:E0("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=E0("outputShape",e,t,n),s=E0("strides",e,t,n),o=_0(e,t,n);return[r.conv2dTranspose(E0("x",e,t,n),E0("filter",e,t,n),a,[s[1],s[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=E0("strides",e,t,n),s=_0(e,t,n),o=E0("dilations",e,t,n),i=E0("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(E0("input",e,t,n),E0("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"Conv3D":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("dataFormat",e,t,n).toUpperCase(),i=E0("dilations",e,t,n);return[r.conv3d(E0("x",e,t,n),E0("filter",e,t,n),[a[1],a[2],a[3]],s,o,[i[1],i[2],i[3]])]}case"AvgPool":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("kernelSize",e,t,n);return[r.avgPool(E0("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPool":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("kernelSize",e,t,n);return[r.maxPool(E0("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("kernelSize",e,t,n),i=E0("includeBatchInIndex",e,t,n),{result:l,indexes:u}=r.maxPoolWithArgmax(E0("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s,i);return[l,u]}case"AvgPool3D":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("kernelSize",e,t,n);return[r.avgPool3d(E0("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("kernelSize",e,t,n);return[r.maxPool3d(E0("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{const a=E0("strides",e,t,n),s=E0("pad",e,t,n),o=E0("dilations",e,t,n),i=a[1],l=a[2],u=o[1],c=o[2];return[r.dilation2d(E0("x",e,t,n),E0("filter",e,t,n),[i,l],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Fill":{const a=E0("shape",e,t,n),s=E0("dtype",e,t,n),o=E0("value",e,t,n);return[r.fill(a,o,s)]}case"LinSpace":{const a=E0("start",e,t,n),s=E0("stop",e,t,n),o=E0("num",e,t,n);return[r.linspace(a,s,o)]}case"Multinomial":{const a=E0("logits",e,t,n),s=E0("numSamples",e,t,n),o=E0("seed",e,t,n);return[r.multinomial(a,s,o)]}case"OneHot":{const a=E0("indices",e,t,n),s=E0("depth",e,t,n),o=E0("onValue",e,t,n),i=E0("offValue",e,t,n),l=E0("dtype",e,t,n);return[r.oneHot(a,s,o,i,l)]}case"Ones":return[r.ones(E0("shape",e,t,n),E0("dtype",e,t,n))];case"OnesLike":return[r.onesLike(E0("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(E0("shape",e,t,n),E0("dtype",e,t,n),E0("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(E0("shape",e,t,n),E0("minval",e,t,n),E0("maxval",e,t,n),E0("dtype",e,t,n))];case"Range":{const a=E0("start",e,t,n),s=E0("stop",e,t,n),o=E0("step",e,t,n);return[r.range(a,s,o,E0("dtype",e,t,n))]}case"TruncatedNormal":{const a=E0("shape",e,t,n),s=E0("mean",e,t,n),o=E0("stdDev",e,t,n),i=E0("seed",e,t,n);return[r.truncatedNormal(a,s,o,E0("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(E0("shape",e,t,n),E0("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(E0("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,a=O1)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=G1(e,t,n),c=await a.image.nonMaxSuppressionWithScoreAsync(r,s,o,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=G1(e,t,n),u=E0("padToMaxOutputSize",e,t,n),c=await a.image.nonMaxSuppressionPaddedAsync(r,s,o,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=G1(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,o,i,l)]}case"Where":{const r=a.cast(E0("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(E0("x",e,t,n),E0("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"LowerBound":{const a=E0("sortedSequence",e,t,n),s=E0("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{const a=E0("x",e,t,n),s=E0("k",e,t,n),o=E0("sorted",e,t,n),i=r.topk(a,s,o);return[i.values,i.indices]}case"UpperBound":{const a=E0("sortedSequence",e,t,n),s=E0("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{const a=E0("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{const a=E0("x",e,t,n),s=E0("axis",e,t,n),o=r.unique(a,s);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"ResizeBilinear":{const a=E0("images",e,t,n),s=E0("size",e,t,n),o=E0("alignCorners",e,t,n),i=E0("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],o,i)]}case"ResizeNearestNeighbor":{const a=E0("images",e,t,n),s=E0("size",e,t,n),o=E0("alignCorners",e,t,n),i=E0("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],o,i)]}case"CropAndResize":{const a=E0("image",e,t,n),s=E0("boxes",e,t,n),o=E0("boxInd",e,t,n),i=E0("cropSize",e,t,n),l=E0("method",e,t,n),u=E0("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,o,i,l,u)]}case"ImageProjectiveTransformV3":{const a=E0("images",e,t,n),s=E0("transforms",e,t,n),o=E0("outputShape",e,t,n),i=E0("fillValue",e,t,n),l=E0("interpolation",e,t,n),u=E0("fillMode",e,t,n);return[r.image.transform(a,s,l.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=E0("default",e,t,n);return[$0(e.name,t,n)||a];case"Placeholder":return[$0(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[D0(E0("x",e,t,n))];case"IdentityN":return E0("x",e,t,n).map((e=>D0(e)));case"Shape":return[r.tensor1d(E0("x",e,t,n).shape,"int32")];case"ShapeN":return E0("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(E0("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(E0("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const s=E0("x",e,t,n),o=E0("data",e,t,n),i=E0("message",e,t,n),l=E0("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,l));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Equal":return[r.equal(E0("a",e,t,n),E0("b",e,t,n))];case"NotEqual":return[r.notEqual(E0("a",e,t,n),E0("b",e,t,n))];case"Greater":return[r.greater(E0("a",e,t,n),E0("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(E0("a",e,t,n),E0("b",e,t,n))];case"Less":return[r.less(E0("a",e,t,n),E0("b",e,t,n))];case"LessEqual":return[r.lessEqual(E0("a",e,t,n),E0("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(E0("a",e,t,n),E0("b",e,t,n))];case"LogicalNot":return[r.logicalNot(E0("a",e,t,n))];case"LogicalOr":return[r.logicalOr(E0("a",e,t,n),E0("b",e,t,n))];case"Select":case"SelectV2":return[r.where(E0("condition",e,t,n),E0("a",e,t,n),E0("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(E0("a",e,t,n),E0("b",e,t,n),E0("transposeA",e,t,n),E0("transposeB",e,t,n))];case"Einsum":return[r.einsum(E0("equation",e,t,n),...E0("tensors",e,t,n))];case"Transpose":return[r.transpose(E0("x",e,t,n),E0("perm",e,t,n))];case"_FusedMatMul":const[a,s]=E0("fusedOps",e,t,n),o="biasadd"===a,i="prelu"===s,l=E0("numArgs",e,t,n),u=E0("leakyreluAlpha",e,t,n);if(o){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=E0("args",e,t,n);return[r.fused.matMul({a:E0("a",e,t,n),b:E0("b",e,t,n),transposeA:E0("transposeA",e,t,n),transposeB:E0("transposeB",e,t,n),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(E0("x",e,t,n),E0("axis",e,t,n),E0("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(E0("x",e,t,n),E0("mean",e,t,n),E0("variance",e,t,n),E0("offset",e,t,n),E0("scale",e,t,n),E0("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(E0("x",e,t,n),E0("radius",e,t,n),E0("bias",e,t,n),E0("alpha",e,t,n),E0("beta",e,t,n))];case"Softmax":return[r.softmax(E0("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(E0("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(E0("sparseIndices",e,t,n),E0("outputShape",e,t,n),E0("sparseValues",e,t,n),E0("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Max":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.max(E0("x",e,t,n),a,s)]}case"Mean":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.mean(E0("x",e,t,n),a,s)]}case"Min":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.min(E0("x",e,t,n),a,s)]}case"Sum":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.sum(E0("x",e,t,n),a,s)]}case"All":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.all(E0("x",e,t,n),a,s)]}case"Any":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.any(E0("x",e,t,n),a,s)]}case"ArgMax":{const a=E0("axis",e,t,n);return[r.argMax(E0("x",e,t,n),a)]}case"ArgMin":{const a=E0("axis",e,t,n);return[r.argMin(E0("x",e,t,n),a)]}case"Prod":{const a=E0("axis",e,t,n),s=E0("keepDims",e,t,n);return[r.prod(E0("x",e,t,n),a,s)]}case"Cumprod":{const a=E0("axis",e,t,n),s=E0("exclusive",e,t,n),o=E0("reverse",e,t,n);return[r.cumprod(E0("x",e,t,n),a,s,o)]}case"Cumsum":{const a=E0("axis",e,t,n),s=E0("exclusive",e,t,n),o=E0("reverse",e,t,n);return[r.cumsum(E0("x",e,t,n),a,s,o)]}case"Bincount":const a=E0("x",e,t,n),s=E0("weights",e,t,n),o=E0("size",e,t,n);return[r.bincount(a,s,o)];case"DenseBincount":{const a=E0("x",e,t,n),s=E0("weights",e,t,n),o=E0("size",e,t,n),i=E0("binaryOutput",e,t,n);return[r.denseBincount(a,s,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"ConcatV2":case"Concat":{const a=E0("n",e,t,n),s=E0("axis",e,t,n);let o=E0("tensors",e,t,n);return o=o.slice(0,a),[r.concat(o,s)]}case"Gather":{const a=E0("x",e,t,n),s=E0("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{const a=E0("axis",e,t,n),s=E0("batchDims",e,t,n),o=E0("x",e,t,n),i=E0("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),a,s)]}case"Reverse":{const a=E0("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);const o=E0("x",e,t,n);return[r.reverse(o,s)]}case"ReverseV2":{const a=E0("axis",e,t,n),s=E0("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{const a=E0("begin",e,t,n),s=E0("size",e,t,n);return[r.slice(E0("x",e,t,n),a,s)]}case"StridedSlice":{const a=E0("begin",e,t,n),s=E0("end",e,t,n),o=E0("strides",e,t,n),i=E0("beginMask",e,t,n),l=E0("endMask",e,t,n),u=E0("ellipsisMask",e,t,n),c=E0("newAxisMask",e,t,n),p=E0("shrinkAxisMask",e,t,n),h=E0("x",e,t,n);return[r.stridedSlice(h,a,s,o,i,l,u,c,p)]}case"Pack":return OH((()=>{const a=E0("axis",e,t,n),s=E0("tensors",e,t,n),o=s[0].shape,i=r.squeeze(s[0]).shape,l=s.map((e=>{const t=OW.arraysEqual(e.shape,o);if(!t&&!OW.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(l,a)]}));case"Unpack":{const a=E0("axis",e,t,n),s=E0("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{const a=E0("reps",e,t,n);return[r.tile(E0("x",e,t,n),a)]}case"Split":case"SplitV":{const a=E0("axis",e,t,n),s=E0("numOrSizeSplits",e,t,n),o=E0("x",e,t,n);return r.split(o,s,a)}case"ScatterNd":{const a=E0("indices",e,t,n),s=E0("values",e,t,n),o=E0("shape",e,t,n);return[r.scatterND(a,s,o)]}case"GatherNd":{const a=E0("x",e,t,n),s=E0("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{const a=E0("sparseIndices",e,t,n),s=E0("outputShape",e,t,n),o=E0("sparseValues",e,t,n),i=E0("defaultValue",e,t,n);return[r.sparseToDense(a,o,s,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:s,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(E0("indices",e,t,n),E0("values",e,t,n),E0("denseShape",e,t,n),E0("defaultValue",e,t,n));return[a,s,o,i]}case"SparseReshape":{const{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(E0("inputIndices",e,t,n),E0("inputShape",e,t,n),E0("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(E0("data",e,t,n),E0("indices",e,t,n),E0("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(E0("data",e,t,n),E0("indices",e,t,n),E0("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"FFT":return[r.fft(E0("x",e,t,n))];case"IFFT":return[r.ifft(E0("x",e,t,n))];case"RFFT":return[r.rfft(E0("x",e,t,n))];case"IRFFT":return[r.irfft(E0("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(E0("data",e,t,n),E0("dataSplits",e,t,n),E0("separator",e,t,n),E0("nGramWidths",e,t,n),E0("leftPad",e,t,n),E0("rightPad",e,t,n),E0("padWidth",e,t,n),E0("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{const{indices:a,values:s,shape:o}=r.string.stringSplit(E0("input",e,t,n),E0("delimiter",e,t,n),E0("skipEmpty",e,t,n));return[a,s,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(E0("input",e,t,n),E0("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return a((()=>((e,t,n,r=O1)=>{switch(e.op){case"Cast":return[r.cast(E0("x",e,t,n),E0("dtype",e,t,n))];case"ExpandDims":{const a=E0("axis",e,t,n);return[r.expandDims(E0("x",e,t,n),a)]}case"Squeeze":{const a=E0("axis",e,t,n);return[r.squeeze(E0("x",e,t,n),a)]}case"Reshape":return[r.reshape(E0("x",e,t,n),E0("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(E0("x",e,t,n),E0("padding",e,t,n),E0("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(E0("x",e,t,n),E0("padding",e,t,n),E0("constantValue",e,t,n))];case"SpaceToBatchND":{const a=E0("blockShape",e,t,n),s=E0("paddings",e,t,n);return[r.spaceToBatchND(E0("x",e,t,n),a,s)]}case"BatchToSpaceND":{const a=E0("blockShape",e,t,n),s=E0("crops",e,t,n);return[r.batchToSpaceND(E0("x",e,t,n),a,s)]}case"DepthToSpace":{const a=E0("blockSize",e,t,n),s=E0("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(E0("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(E0("x",e,t,n),E0("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(E0("s0",e,t,n),E0("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=E0("keyDType",e,t,n),s=E0("valueDType",e,t,n),o=new H1(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=E0("tableHandle",e,t,n,r),s=E0("keys",e,t,n),o=E0("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=E0("tableHandle",e,t,n,r),s=E0("keys",e,t,n),o=E0("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=E0("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=T0(e.op);if(s&&s.customExecutor)return s.customExecutor(new F1(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return OW.isPromise(s)?s.then((e=>[].concat(e))):[].concat(s)}class q1{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function K1(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const l=new Set,u=Object.keys(e).map((e=>R0(e)[0]));let c=[];null!=r&&(c=r.map((e=>R0(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(J1(e)||Q1(e)||e2(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),p.push(e))})):s.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const X1=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Y1=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Z1=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function J1(e){return X1.indexOf(e.op)>=0}function Q1(e){return Y1.indexOf(e.op)>=0}function e2(e){return Z1.indexOf(e.op)>=0}class t2{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new t2(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=K1(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map((e=>R0(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&s.push(e)}));const l=new Set,u=[];for(;s.length>0;){const e=s.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&s.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[R0(e)[0]])),a=t.map((e=>R0(e)[0]));let s=a.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const l={},u={};return OH((()=>{const n=new q1(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=R0(t),s=[];s[a]=e[t],r[n]=s}));const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=j1(t,r,n,this._resourceManager);if(OW.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map((e=>$0(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const s=function(e,t,n){return t[A0(e,n.currentContextId)]}(e.name,n,r);null!=s&&s.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=C0(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=nB().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const s=new q1(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);const o=t.map((e=>$0(e,this.tensorsMap,s))),i=o.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map((e=>this.graph.nodes[R0(e)[0]])),o=n.map((e=>R0(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:p}=K1(e,i,this.weightMap,this._initNodes),h=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=R0(t),a=[];a[r]=e[t],d[n]=a}));const f={},m=this.getFrozenTensorIds(d),g={};for(;h.length>0;){const e=this.processStack(s,h,t,d,g,m,o,f,l);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!J1(e)&&!$0(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,r,a,s,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&E0("isConstant",e.node,r,n)&&([c]=C0(e.node.name,n)),null==r[e.node.name]){const p=j1(e.node,r,n,this._resourceManager);c||([c]=C0(e.node.name,n));const h=n.currentContext;OW.isPromise(p)?u.push(p.then((u=>(r[c]=u,n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,l),u)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,l))}else this.processChildNodes(e.node,t,n,r,a,l)}return u}processChildNodes(e,t,n,r,a,s){e.children.forEach((e=>{const[o]=C0(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!$0(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!$0(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=R0(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));OW.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&OW.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=R0(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=R0(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class n2{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class r2{constructor(e,t={},n=tH){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new n2}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return OW.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new t2(x1.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=x1.Instance.transformGraph(e.modelInitializer);this.initializer=new t2(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof fU?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof fU||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function a2(e,t={},n=tH){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}
/** @license See the LICENSE file. */(e));const r=new r2(e,t,n);return await r.load(),r}function s2(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{l(r.next(e))}catch(e){s(e)}}function i(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){e.done?a(e.value):new n((function(t){t(e.value)})).then(o,i)}l((r=r.apply(e,t||[])).next())}))}function o2(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s}var i2={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},l2=224,u2={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},c2={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};var p2=function(){function e(e,t,n,r,a){void 0===r&&(r=-1),void 0===a&&(a=1),this.version=e,this.alpha=t,this.modelUrl=n,this.inputMin=r,this.inputMax=a,this.normalizationConstant=(a-r)/255}return e.prototype.load=function(){return s2(this,void 0,void 0,(function(){var e,t,n,r,a=this;return o2(this,(function(s){switch(s.label){case 0:return this.modelUrl?(e=this,[4,a2(this.modelUrl)]):[3,2];case 1:return e.model=s.sent(),[3,4];case 2:return t=c2[this.version][this.alpha].url,n=this,[4,a2(t,{fromTFHub:!0})];case 3:n.model=s.sent(),s.label=4;case 4:return[4,(r=OH((function(){return a.model.predict(kX([1,l2,l2,3]))}))).data()];case 5:return s.sent(),r.dispose(),[2]}}))}))},e.prototype.infer=function(e,t){var n=this;return void 0===t&&(t=!1),OH((function(){e instanceof fU||(e=rj.fromPixels(e));var r=fX(zq(ZG(e,"float32"),n.normalizationConstant),n.inputMin),a=r;e.shape[0]===l2&&e.shape[1]===l2||(a=s0.resizeBilinear(r,[l2,l2],!0));var s,o=Wq(a,[-1,l2,l2,3]);if(t){var i=u2[n.version],l=n.model.execute(o,i);s=PY(l,[1,2])}else{var u=n.model.predict(o);s=xX(u,[0,1],[-1,1e3])}return s}))},e.prototype.classify=function(e,t){return void 0===t&&(t=3),s2(this,void 0,void 0,(function(){var n,r;return o2(this,(function(a){switch(a.label){case 0:return[4,h2(n=this.infer(e),t)];case 1:return r=a.sent(),n.dispose(),[2,r]}}))}))},e}();function h2(e,t){return s2(this,void 0,void 0,(function(){var n,r,a,s,o,i,l;return o2(this,(function(u){switch(u.label){case 0:return[4,(n=AQ(e)).data()];case 1:for(r=u.sent(),n.dispose(),a=[],l=0;l<r.length;l++)a.push({value:r[l],index:l});for(a.sort((function(e,t){return t.value-e.value})),s=new Float32Array(t),o=new Int32Array(t),l=0;l<t;l++)s[l]=a[l].value,o[l]=a[l].index;for(i=[],l=0;l<o.length;l++)i.push({className:i2[o[l]],probability:s[l]});return[2,i]}}))}))}const d2=["tench","tinca tinca","goldfish","carassius auratus","great white shark","white shark","man-eater","man-eating shark","carcharodon carcharias","tiger shark","galeocerdo cuvieri","hammerhead","hammerhead shark","electric ray","crampfish","numbfish","torpedo","stingray","cock","hen","ostrich","struthio camelus","brambling","fringilla montifringilla","goldfinch","carduelis carduelis","house finch","linnet","carpodacus mexicanus","junco","snowbird","indigo bunting","indigo finch","indigo bird","passerina cyanea","robin","american robin","turdus migratorius","bulbul","jay","magpie","chickadee","water ouzel","dipper","kite","bald eagle","american eagle","haliaeetus leucocephalus","vulture","great grey owl","great gray owl","strix nebulosa","european fire salamander","salamandra salamandra","common newt","triturus vulgaris","eft","spotted salamander","ambystoma maculatum","axolotl","mud puppy","ambystoma mexicanum","bullfrog","rana catesbeiana","tree frog","tree-frog","tailed frog","bell toad","ribbed toad","tailed toad","ascaphus trui","loggerhead","loggerhead turtle","caretta caretta","leatherback turtle","leatherback","leathery turtle","dermochelys coriacea","mud turtle","terrapin","box turtle","box tortoise","banded gecko","common iguana","iguana","iguana iguana","american chameleon","anole","anolis carolinensis","whiptail","whiptail lizard","agama","frilled lizard","chlamydosaurus kingi","alligator lizard","gila monster","heloderma suspectum","green lizard","lacerta viridis","african chameleon","chamaeleo chamaeleon","komodo dragon","komodo lizard","dragon lizard","giant lizard","varanus komodoensis","african crocodile","nile crocodile","crocodylus niloticus","american alligator","alligator mississipiensis","triceratops","thunder snake","worm snake","carphophis amoenus","ringneck snake","ring-necked snake","ring snake","hognose snake","puff adder","sand viper","green snake","grass snake","king snake","kingsnake","garter snake","water snake","vine snake","night snake","hypsiglena torquata","boa constrictor","constrictor constrictor","rock python","rock snake","python sebae","indian cobra","naja naja","green mamba","sea snake","horned viper","cerastes","horned asp","cerastes cornutus","diamondback","diamondback rattlesnake","crotalus adamanteus","sidewinder","horned rattlesnake","crotalus cerastes","trilobite","harvestman","daddy longlegs","phalangium opilio","scorpion","black and gold garden spider","argiope aurantia","barn spider","araneus cavaticus","garden spider","aranea diademata","black widow","latrodectus mactans","tarantula","wolf spider","hunting spider","tick","centipede","black grouse","ptarmigan","ruffed grouse","partridge","bonasa umbellus","prairie chicken","prairie grouse","prairie fowl","peacock","quail","african grey","african gray","psittacus erithacus","macaw","sulphur-crested cockatoo","kakatoe galerita","cacatua galerita","lorikeet","coucal","bee eater","hornbill","hummingbird","jacamar","toucan","drake","red-breasted merganser","mergus serrator","goose","black swan","cygnus atratus","tusker","echidna","spiny anteater","anteater","platypus","duckbill","duckbilled platypus","duck-billed platypus","ornithorhynchus anatinus","wallaby","brush kangaroo","koala","koala bear","kangaroo bear","native bear","phascolarctos cinereus","wombat","jelly fish","sea anemone","anemone","brain coral","flatworm","platyhelminth","nematode","nematode worm","roundworm","conch","snail","slug","sea slug","nudibranch","chiton","coat-of-mail shell","sea cradle","polyplacophore","chambered nautilus","pearly nautilus","nautilus","dungeness crab","cancer magister","rock crab","cancer irroratus","fiddler crab","king crab","alaska crab","alaskan king crab","alaska king crab","paralithodes camtschatica","american lobster","northern lobster","maine lobster","homarus americanus","spiny lobster","langouste","rock lobster","crawfish","crayfish","sea crawfish","crawdad","crawdaddy","hermit crab","isopod","white stork","ciconia ciconia","black stork","ciconia nigra","spoonbill","flamingo","little blue heron","egretta caerulea","american egret","great white heron","egretta albus","bittern","crane","limpkin","aramus pictus","european gallinule","porphyrio porphyrio","american coot","marsh hen","mud hen","water hen","fulica americana","bustard","ruddy turnstone","arenaria interpres","red-backed sandpiper","dunlin","erolia alpina","redshank","tringa totanus","dowitcher","oystercatcher","oyster catcher","pelican","king penguin","aptenodytes patagonica","albatross","mollymawk","grey whale","gray whale","devilfish","eschrichtius gibbosus","eschrichtius robustus","killer whale","killer","orca","grampus","sea wolf","orcinus orca","dugong","dugong dugon","sea lion","chihuahua","japanese spaniel","maltese dog","maltese terrier","maltese","pekinese","pekingese","peke","shih-tzu","blenheim spaniel","papillon","toy terrier","rhodesian ridgeback","afghan hound","afghan","basset","basset hound","beagle","bloodhound","sleuthhound","bluetick","black-and-tan coonhound","walker hound","walker foxhound","english foxhound","redbone","borzoi","russian wolfhound","irish wolfhound","italian greyhound","whippet","ibizan hound","ibizan podenco","norwegian elkhound","elkhound","otterhound","otter hound","saluki","gazelle hound","scottish deerhound","deerhound","weimaraner","staffordshire bullterrier","staffordshire bull terrier","american staffordshire terrier","staffordshire terrier","american pit bull terrier","pit bull terrier","bedlington terrier","border terrier","kerry blue terrier","irish terrier","norfolk terrier","norwich terrier","yorkshire terrier","wire-haired fox terrier","lakeland terrier","sealyham terrier","sealyham","airedale","airedale terrier","cairn","cairn terrier","australian terrier","dandie dinmont","dandie dinmont terrier","boston bull","boston terrier","miniature schnauzer","giant schnauzer","standard schnauzer","scotch terrier","scottish terrier","scottie","tibetan terrier","chrysanthemum dog","silky terrier","sydney silky","soft-coated wheaten terrier","west highland white terrier","lhasa","lhasa apso","flat-coated retriever","curly-coated retriever","golden retriever","labrador retriever","chesapeake bay retriever","german short-haired pointer","vizsla","hungarian pointer","english setter","irish setter","red setter","gordon setter","brittany spaniel","clumber","clumber spaniel","english springer","english springer spaniel","welsh springer spaniel","cocker spaniel","english cocker spaniel","cocker","sussex spaniel","irish water spaniel","kuvasz","schipperke","groenendael","malinois","briard","kelpie","komondor","old english sheepdog","bobtail","shetland sheepdog","shetland sheep dog","shetland","collie","border collie","bouvier des flandres","bouviers des flandres","rottweiler","german shepherd","german shepherd dog","german police dog","alsatian","doberman","doberman pinscher","miniature pinscher","greater swiss mountain dog","bernese mountain dog","appenzeller","entlebucher","boxer","bull mastiff","tibetan mastiff","french bulldog","great dane","saint bernard","st bernard","eskimo dog","husky","malamute","malemute","alaskan malamute","siberian husky","dalmatian","coach dog","carriage dog","affenpinscher","monkey pinscher","monkey dog","basenji","pug","pug-dog","leonberg","newfoundland","newfoundland dog","great pyrenees","samoyed","samoyede","pomeranian","chow","chow chow","keeshond","brabancon griffon","pembroke","pembroke welsh corgi","cardigan","cardigan welsh corgi","toy poodle","miniature poodle","standard poodle","mexican hairless","timber wolf","grey wolf","gray wolf","canis lupus","white wolf","arctic wolf","canis lupus tundrarum","red wolf","maned wolf","canis rufus","canis niger","coyote","prairie wolf","brush wolf","canis latrans","dingo","warrigal","warragal","canis dingo","dhole","cuon alpinus","african hunting dog","hyena dog","cape hunting dog","lycaon pictus","hyena","hyaena","red fox","vulpes vulpes","kit fox","vulpes macrotis","arctic fox","white fox","alopex lagopus","grey fox","gray fox","urocyon cinereoargenteus","tabby","tabby cat","tiger cat","persian cat","siamese cat","siamese","egyptian cat","cougar","puma","catamount","mountain lion","painter","panther","felis concolor","lynx","leopard","panthera pardus","snow leopard","ounce","panthera uncia","jaguar","panthera onca","felis onca","lion","king of beasts","panthera leo","tiger","panthera tigris","cheetah","chetah","acinonyx jubatus","brown bear","bruin","ursus arctos","american black bear","black bear","ursus americanus","euarctos americanus","ice bear","polar bear","ursus maritimus","thalarctos maritimus","sloth bear","melursus ursinus","ursus ursinus","mongoose","meerkat","mierkat","tiger beetle","ladybug","ladybeetle","lady beetle","ladybird","ladybird beetle","ground beetle","carabid beetle","long-horned beetle","longicorn","longicorn beetle","leaf beetle","chrysomelid","dung beetle","rhinoceros beetle","weevil","fly","bee","ant","emmet","pismire","grasshopper","hopper","cricket","walking stick","walkingstick","stick insect","cockroach","roach","mantis","mantid","cicada","cicala","leafhopper","lacewing","lacewing fly","dragonfly","darning needle","devil's darning needle","sewing needle","snake feeder","snake doctor","mosquito hawk","skeeter hawk","damselfly","admiral","ringlet","ringlet butterfly","monarch","monarch butterfly","milkweed butterfly","danaus plexippus","cabbage butterfly","sulphur butterfly","sulfur butterfly","lycaenid","lycaenid butterfly","starfish","sea star","sea urchin","sea cucumber","holothurian","wood rabbit","cottontail","cottontail rabbit","hare","angora","angora rabbit","hamster","porcupine","hedgehog","fox squirrel","eastern fox squirrel","sciurus niger","marmot","beaver","guinea pig","cavia cobaya","sorrel","zebra","hog","pig","grunter","squealer","sus scrofa","wild boar","boar","warthog","hippopotamus","hippo","river horse","hippopotamus amphibius","ox","water buffalo","water ox","asiatic buffalo","bubalus bubalis","bison","ram","tup","bighorn","bighorn sheep","cimarron","rocky mountain bighorn","rocky mountain sheep","ovis canadensis","ibex","capra ibex","hartebeest","impala","aepyceros melampus","gazelle","arabian camel","dromedary","camelus dromedarius","llama","weasel","mink","polecat","fitch","foulmart","foumart","mustela putorius","black-footed ferret","ferret","mustela nigripes","otter","skunk","wood pussy","badger","armadillo","three-toed sloth","ai","bradypus tridactylus","orangutan","orang","orangutang","pongo pygmaeus","gorilla","gorilla gorilla","chimpanzee","chimp","pan troglodytes","gibbon","hylobates lar","siamang","hylobates syndactylus","symphalangus syndactylus","guenon","guenon monkey","patas","hussar monkey","erythrocebus patas","baboon","macaque","langur","colobus","colobus monkey","proboscis monkey","nasalis larvatus","marmoset","capuchin","ringtail","cebus capucinus","howler monkey","howler","titi","titi monkey","spider monkey","ateles geoffroyi","squirrel monkey","saimiri sciureus","madagascar cat","ring-tailed lemur","lemur catta","indri","indris","indri indri","indri brevicaudatus","indian elephant","elephas maximus","african elephant","loxodonta africana","lesser panda","red panda","panda","bear cat","cat bear","ailurus fulgens","giant panda","panda bear","coon bear","ailuropoda melanoleuca","barracouta","snoek","eel","coho","cohoe","coho salmon","blue jack","silver salmon","oncorhynchus kisutch","rock beauty","holocanthus tricolor","anemone fish","sturgeon","gar","garfish","garpike","billfish","lepisosteus osseus","lionfish","puffer","pufferfish","blowfish","globefish","abacus","abaya","academic gown","academic robe","judge's robe","accordion","piano accordion","squeeze box","acoustic guitar","aircraft carrier","carrier","flattop","attack aircraft carrier","airliner","airship","dirigible","altar","ambulance","amphibian","amphibious vehicle","analog clock","apiary","bee house","apron","ashcan","trash can","garbage can","wastebin","ash bin","ash-bin","ashbin","dustbin","trash barrel","trash bin","assault rifle","assault gun","backpack","back pack","knapsack","packsack","rucksack","haversack","bakery","bakeshop","bakehouse","balance beam","beam","balloon","ballpoint","ballpoint pen","ballpen","biro","band aid","banjo","bannister","banister","balustrade","balusters","handrail","barbell","barber chair","barbershop","barn","barometer","barrel","cask","barrow","garden cart","lawn cart","wheelbarrow","baseball","basketball","bassinet","bassoon","bathing cap","swimming cap","bath towel","bathtub","bathing tub","bath","tub","beach wagon","station wagon","wagon","estate car","beach waggon","station waggon","waggon","beacon","lighthouse","beacon light","pharos","beaker","bearskin","busby","shako","beer bottle","beer glass","bell cote","bell cot","bib","bicycle-built-for-two","tandem bicycle","tandem","bikini","two-piece","binder","ring-binder","binoculars","field glasses","opera glasses","birdhouse","boathouse","bobsled","bobsleigh","bob","bolo tie","bolo","bola tie","bola","bonnet","poke bonnet","bookcase","bookshop","bookstore","bookstall","bottlecap","bow","bow tie","bow-tie","bowtie","brass","memorial tablet","plaque","brassiere","bra","bandeau","breakwater","groin","groyne","mole","bulwark","seawall","jetty","breastplate","aegis","egis","broom","bucket","pail","buckle","bulletproof vest","bullet train","bullet","butcher shop","meat market","cab","hack","taxi","taxicab","caldron","cauldron","candle","taper","wax light","cannon","canoe","can opener","tin opener","car mirror","carousel","carrousel","merry-go-round","roundabout","whirligig","carpenter's kit","tool kit","carton","car wheel","cash machine","cash dispenser","automated teller machine","automatic teller machine","automated teller","automatic teller","atm","cassette","cassette player","castle","catamaran","cd player","cello","violoncello","cellular telephone","cellular phone","cellphone","cell","mobile phone","chain","chainlink fence","chain mail","ring mail","mail","chain armor","chain armour","ring armor","ring armour","chain saw","chainsaw","chest","chiffonier","commode","chime","bell","gong","china cabinet","china closet","christmas stocking","church","church building","cinema","movie theater","movie theatre","movie house","picture palace","cleaver","meat cleaver","chopper","cliff dwelling","cloak","clog","geta","patten","sabot","cocktail shaker","coffee mug","coffeepot","coil","spiral","volute","whorl","helix","combination lock","computer keyboard","keypad","confectionery","confectionary","candy store","container ship","containership","container vessel","convertible","corkscrew","bottle screw","cornet","horn","trumpet","trump","cowboy boot","cowboy hat","ten-gallon hat","cradle","crash helmet","crate","crib","cot","crock pot","croquet ball","crutch","cuirass","dam","dike","dyke","desk","desktop computer","dial telephone","dial phone","diaper","nappy","napkin","digital clock","digital watch","dining table","board","dishrag","dishcloth","dishwasher","dish washer","dishwashing machine","disk brake","disc brake","dock","dockage","docking facility","dogsled","dog sled","dog sleigh","dome","doormat","welcome mat","drilling platform","offshore rig","drum","membranophone","tympan","drumstick","dumbbell","dutch oven","electric fan","blower","electric guitar","electric locomotive","entertainment center","envelope","espresso maker","face powder","feather boa","boa","file","file cabinet","filing cabinet","fireboat","fire engine","fire truck","fire screen","fireguard","flagpole","flagstaff","flute","transverse flute","folding chair","football helmet","forklift","fountain","fountain pen","four-poster","freight car","french horn","frying pan","frypan","skillet","fur coat","garbage truck","dustcart","gasmask","respirator","gas helmet","gas pump","gasoline pump","petrol pump","island dispenser","goblet","go-kart","golf ball","golfcart","golf cart","gondola","tam-tam","gown","grand piano","grand","greenhouse","nursery","glasshouse","grille","radiator grille","grocery store","grocery","food market","market","guillotine","hair slide","hair spray","half track","hammer","hamper","hand blower","blow dryer","blow drier","hair dryer","hair drier","hand-held computer","hand-held microcomputer","handkerchief","hankie","hanky","hankey","hard disc","hard disk","fixed disk","harmonica","mouth organ","harp","mouth harp","harvester","reaper","hatchet","holster","home theater","home theatre","honeycomb","hook","claw","hoopskirt","crinoline","horizontal bar","high bar","horse cart","horse-cart","hourglass","ipod","iron","smoothing iron","jack-o'-lantern","jean","blue jean","denim","jeep","landrover","jersey","t-shirt","tee shirt","jigsaw puzzle","jinrikisha","ricksha","rickshaw","joystick","kimono","knee pad","knot","lab coat","laboratory coat","ladle","lampshade","lamp shade","laptop","laptop computer","lawn mower","mower","lens cap","lens cover","letter opener","paper knife","paperknife","library","lifeboat","lighter","light","igniter","ignitor","limousine","limo","liner","ocean liner","lipstick","lip rouge","loafer","lotion","loudspeaker","speaker","speaker unit","loudspeaker system","speaker system","loupe","jeweler's loupe","lumbermill","sawmill","magnetic compass","mailbag","postbag","mailbox","letter box","maillot","tank suit","manhole cover","maraca","marimba","xylophone","mask","matchstick","maypole","maze","labyrinth","measuring cup","medicine chest","medicine cabinet","megalith","megalithic structure","microphone","mike","microwave","microwave oven","military uniform","milk can","minibus","miniskirt","mini","minivan","missile","mitten","mixing bowl","mobile home","manufactured home","model t","modem","monastery","monitor","moped","mortar","mortarboard","mosque","mosquito net","motor scooter","scooter","mountain bike","all-terrain bike","off-roader","mountain tent","mouse","computer mouse","mousetrap","moving van","muzzle","nail","neck brace","necklace","nipple","notebook","notebook computer","obelisk","oboe","hautboy","hautbois","ocarina","sweet potato","odometer","hodometer","mileometer","milometer","oil filter","organ","pipe organ","oscilloscope","scope","cathode-ray oscilloscope","cro","overskirt","oxcart","oxygen mask","packet","paddle","boat paddle","paddlewheel","paddle wheel","padlock","paintbrush","pajama","pyjama","pj's","jammies","palace","panpipe","pandean pipe","syrinx","paper towel","parachute","chute","parallel bars","bars","park bench","parking meter","passenger car","coach","carriage","patio","terrace","pay-phone","pay-station","pedestal","plinth","footstall","pencil box","pencil case","pencil sharpener","perfume","essence","petri dish","photocopier","pick","plectrum","plectron","pickelhaube","picket fence","paling","pickup","pickup truck","pier","piggy bank","penny bank","pill bottle","pillow","ping-pong ball","pinwheel","pirate","pirate ship","pitcher","ewer","plane","carpenter's plane","woodworking plane","planetarium","plastic bag","plate rack","plow","plough","plunger","plumber's helper","polaroid camera","polaroid land camera","pole","police van","police wagon","paddy wagon","patrol wagon","black maria","poncho","pool table","billiard table","snooker table","pop bottle","soda bottle","pot","flowerpot","potter's wheel","power drill","prayer rug","prayer mat","printer","prison","prison house","projectile","projector","puck","hockey puck","punching bag","punch bag","punching ball","punchball","purse","quill","quill pen","quilt","comforter","comfort","puff","racer","race car","racing car","racket","racquet","radiator","radio","wireless","radio telescope","radio reflector","rain barrel","recreational vehicle","rv","r.v.","reel","reflex camera","refrigerator","icebox","remote control","remote","restaurant","eating house","eating place","eatery","revolver","six-gun","six-shooter","rifle","rocking chair","rocker","rotisserie","rubber eraser","rubber","pencil eraser","rugby ball","rule","ruler","running shoe","safe","safety pin","saltshaker","salt shaker","sandal","sarong","sax","saxophone","scabbard","scale","weighing machine","school bus","schooner","scoreboard","screen","crt screen","screw","screwdriver","seat belt","seatbelt","sewing machine","shield","buckler","shoe shop","shoe-shop","shoe store","shoji","shopping basket","shopping cart","shovel","shower cap","shower curtain","ski","ski mask","sleeping bag","slide rule","slipstick","sliding door","slot","one-armed bandit","snorkel","snowmobile","snowplow","snowplough","soap dispenser","soccer ball","sock","solar dish","solar collector","solar furnace","sombrero","soup bowl","space bar","space heater","space shuttle","spatula","speedboat","spider web","spider's web","spindle","sports car","sport car","spotlight","spot","stage","steam locomotive","steel arch bridge","steel drum","stethoscope","stole","stone wall","stopwatch","stop watch","stove","strainer","streetcar","tram","tramcar","trolley","trolley car","stretcher","studio couch","day bed","stupa","tope","submarine","pigboat","sub","u-boat","suit","suit of clothes","sundial","sunglass","sunglasses","dark glasses","shades","sunscreen","sunblock","sun blocker","suspension bridge","swab","swob","mop","sweatshirt","swimming trunks","bathing trunks","swing","switch","electric switch","electrical switch","syringe","table lamp","tank","army tank","armored combat vehicle","armoured combat vehicle","tape player","teapot","teddy","teddy bear","television","television system","tennis ball","thatch","thatched roof","theater curtain","theatre curtain","thimble","thresher","thrasher","threshing machine","throne","tile roof","toaster","tobacco shop","tobacconist shop","tobacconist","toilet seat","torch","totem pole","tow truck","tow car","wrecker","toyshop","tractor","trailer truck","tractor trailer","trucking rig","rig","articulated lorry","semi","tray","trench coat","tricycle","trike","velocipede","trimaran","tripod","triumphal arch","trolleybus","trolley coach","trackless trolley","trombone","vat","turnstile","typewriter keyboard","umbrella","unicycle","monocycle","upright","upright piano","vacuum","vacuum cleaner","vase","vault","velvet","vending machine","vestment","viaduct","violin","fiddle","volleyball","waffle iron","wall clock","wallet","billfold","notecase","pocketbook","wardrobe","closet","press","warplane","military plane","washbasin","handbasin","washbowl","lavabo","wash-hand basin","washer","automatic washer","washing machine","water bottle","water jug","water tower","whiskey jug","whistle","wig","window screen","window shade","windsor tie","wine bottle","wing","wok","wooden spoon","wool","woolen","woollen","worm fence","snake fence","snake-rail fence","virginia fence","wreck","yawl","yurt","web site","website","internet site","site","comic book","crossword puzzle","crossword","street sign","traffic light","traffic signal","stoplight","book jacket","dust cover","dust jacket","dust wrapper","menu","plate","guacamole","consomme","hot pot","hotpot","trifle","ice cream","icecream","ice lolly","lolly","lollipop","popsicle","french loaf","bagel","beigel","pretzel","cheeseburger","hotdog","hot dog","red hot","mashed potato","head cabbage","broccoli","cauliflower","zucchini","courgette","spaghetti squash","acorn squash","butternut squash","cucumber","cuke","artichoke","globe artichoke","bell pepper","cardoon","mushroom","granny smith","strawberry","orange","lemon","fig","pineapple","ananas","banana","jackfruit","jak","jack","custard apple","pomegranate","hay","carbonara","chocolate sauce","chocolate syrup","dough","meat loaf","meatloaf","pizza","pizza pie","potpie","burrito","red wine","espresso","cup","eggnog","alp","bubble","cliff","drop","drop-off","coral reef","geyser","lakeside","lakeshore","promontory","headland","head","foreland","sandbar","sand bar","seashore","coast","seacoast","sea-coast","valley","vale","volcano","ballplayer","baseball player","groom","bridegroom","scuba diver","rapeseed","daisy","yellow lady's slipper","yellow lady-slipper","cypripedium calceolus","cypripedium parviflorum","corn","acorn","hip","rose hip","rosehip","buckeye","horse chestnut","conker","coral fungus","agaric","gyromitra","stinkhorn","carrion fungus","earthstar","hen-of-the-woods","hen of the woods","polyporus frondosus","grifola frondosa","bolete","ear","spike","capitulum","toilet tissue","toilet paper","bathroom tissue"],f2=(...e)=>console.info("[AI-Blur][SW]",...e);let m2=["snake","spider","frog","gun","blood"].map((e=>e.toLowerCase()));async function g2(){try{const e=await chrome.storage.sync.get(["blocklist"]);e.blocklist?(m2=e.blocklist,f2("Loaded blocklist from storage:",m2)):f2("Using default blocklist:",m2),x2()}catch(e){f2("Error loading blocklist, using default:",e),x2()}}g2();const y2=new Map;async function b2(e){if(y2.has(e))return y2.get(e);const t=`\nYou are given a list of labeled concepts commonly found in image classification:\n${d2.join(", ")}\n\nGiven the descriptor: "${e}", identify all relevant or conceptually similar items from the list above. \nThese could be:\n- synonyms or subtypes (e.g., "snake" → "cobra", "python")\n- species that match the description (e.g., "dog-like" → "wolf", "fox", "husky")\n- anything that would likely be grouped under the given descriptor by a human viewer.\n\nSimilar words should only be returned if "${e}" has the suffix -like.\nOtherwise only return **exact matches from the list** above that relate to the term "${e}".\nRespond with a comma-separated list of the matching cleaned labels, and nothing else.\n`;try{const n=await fetch("https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=AIzaSyBTCd3G6ruJ4KSg0zuwjSOOyY8jrFG3mWg",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:t}]}]})});if(!n.ok)throw new Error(`Gemini API HTTP error! status: ${n.status}`);const r=await n.json();if(r?.candidates?.[0]?.content?.parts?.[0]?.text){const t=r.candidates[0].content.parts[0].text.split(",").map((e=>e.trim().toLowerCase())).filter((e=>e.length>0));return f2(`Gemini returned relevant cleaned matches for "${e}":`,t),y2.set(e,t),t}}catch(t){f2(`Error calling Gemini API for "${e}":`,t)}return[]}async function x2(){f2("Expanding blocklist using Gemini API...");const e=new Set(m2.map((e=>e.toLowerCase())));for(const t of m2){(await b2(t)).forEach((t=>e.add(t)))}m2=Array.from(e),f2("Final expanded BLOCKLIST:",m2)}const w2=new class{constructor(){this.model=null,this.load()}async load(){f2("loading MobileNet...");const e=performance.now();this.model=await function(e){return void 0===e&&(e={version:1,alpha:1}),s2(this,void 0,void 0,(function(){var t,n,r,a,s,o,i;return o2(this,(function(l){switch(l.label){case 0:if(null==ez)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");if(r=e.version.toFixed(2),a=e.alpha?e.alpha.toFixed(2):"",s=-1,o=1,null==e.modelUrl){if(!(r in c2))throw new Error("Invalid version of MobileNet. Valid versions are: "+Object.keys(c2));if(!(a in c2[r]))throw new Error("MobileNet constructed with invalid alpha "+e.alpha+". Valid multipliers for this version are: "+Object.keys(c2[r])+".");t=c2[r][a].inputRange,s=t[0],o=t[1]}return null!=e.inputRange&&(n=e.inputRange,s=n[0],o=n[1]),[4,(i=new p2(r,a,e.modelUrl,s,o)).load()];case 1:return l.sent(),[2,i]}}))}))}({version:2,alpha:1}),await this.model.classify(pp([224,224,3])),f2(`model ready in ${(performance.now()-e).toFixed(0)} ms`)}async classify(e,t,n){if(!this.model)return void setTimeout((()=>this.classify(e,t,n)),3e3);f2("classify",t);const r=performance.now(),a=await this.model.classify(e,3),s=(performance.now()-r).toFixed(1);let o="sensitive content",i=!1;for(const e of a){if(m2.find((t=>e.className.toLowerCase().includes(t)&&e.probability>=.01))){i=!0,o=e.className;break}}f2(`preds (${s} ms)`,a.map((e=>`${e.className}:${e.probability.toFixed(2)}`))),chrome.tabs.sendMessage(n,{action:"BLUR_IF_BLOCKLIST",url:t,shouldBlur:i,classificationTag:o})}};chrome.runtime.onMessage.addListener(((e,t)=>{if("CLASSIFY_IMAGE"===e.action&&t.tab){const{rawImageData:n,width:r,height:a,url:s}=e,o=new ImageData(Uint8ClampedArray.from(n),r,a);w2.classify(o,s,t.tab.id)}else"RELOAD_SETTINGS"===e.action&&g2().then((()=>{f2("Settings reloaded, notifying all tabs to reprocess images"),chrome.tabs.query({},(e=>{e.forEach((e=>{chrome.tabs.sendMessage(e.id,{action:"REPROCESS_IMAGES"}).catch((()=>{}))}))}))}))}))})();
//# sourceMappingURL=service_worker.js.map
